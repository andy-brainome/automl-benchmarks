#!/usr/bin/env python3
#
# This code has been produced by an enterprise version of Brainome(tm) licensed to: andy Stevko.
# Portions of this code copyright (c) 2019-2022 by Brainome, Inc. All Rights Reserved.
# Distribution and use of this code or commercial use is permitted within the license terms
# set forth in a written contractual agreement between Brainome, Inc and brainome-user.
# Please contact support@brainome.ai with any questions.
# Use of predictions results at your own risk.
#
# Output of Brainome v1.8-120-prod.
# Invocation: brainome TRAIN_TEST_SPLITS/phpDYCOet-clean-train.csv -f RF -y -split 70 -modelonly -q -o btc-runs/RF/nomao.py -json btc-runs/RF/nomao.json
# Total compiler execution time: 0:00:17.54. Finished on: Feb-26-2022 18:35:56.
# This source code requires Python 3.
#
"""

[01;1mPredictor:[0m                        btc-runs/RF/nomao.py
    Classifier Type:              Random Forest
    System Type:                  Binary classifier
    Training / Validation Split:  70% : 30%
    Accuracy:
      Best-guess accuracy:        71.44%
      Training accuracy:          99.75% (16845/16886 correct)
      Validation Accuracy:        96.62% (6995/7239 correct)
      Combined Model Accuracy:    98.81% (23840/24125 correct)


    Model Capacity (MEC):        228    bits
    Generalization Ratio:         63.76 bits/bit
    Percent of Data Memorized:     3.32%
    Resilience to Noise:          -1.87 dB







    Training Confusion Matrix:
              Actual | Predicted
              ------ | ---------
                   1 |   4802     21 
                   0 |     20  12043 

    Validation Confusion Matrix:
              Actual | Predicted
              ------ | ---------
                   1 |   1947    121 
                   0 |    123   5048 

    Training Accuracy by Class:
               Class |     TP     FP     TN     FN     TPR      TNR      PPV      NPV       F1       TS 
               ----- | ------ ------ ------ ------ -------- -------- -------- -------- -------- --------
                   1 |   4802     20  12043     21   99.56%   99.83%   99.59%   99.83%   99.57%   99.15%
                   0 |  12043     21   4802     20   99.83%   99.56%   99.83%   99.59%   99.83%   99.66%

    Validation Accuracy by Class:
               Class |     TP     FP     TN     FN     TPR      TNR      PPV      NPV       F1       TS 
               ----- | ------ ------ ------ ------ -------- -------- -------- -------- -------- --------
                   1 |   1947    123   5048    121   94.15%   97.62%   94.06%   97.66%   94.10%   88.86%
                   0 |   5048    121   1947    123   97.62%   94.15%   97.66%   94.06%   97.64%   95.39%


    Attribute Ranking:
                                      Feature | Relative Importance
                                           V6 :   0.1288
                                          V90 :   0.1043
                                           V1 :   0.0849
                                          V97 :   0.0689
                                          V14 :   0.0630
                                          V60 :   0.0344
                                          V30 :   0.0306
                                          V93 :   0.0239
                                          V65 :   0.0199
                                          V20 :   0.0184
                                          V53 :   0.0183
                                          V11 :   0.0178
                                          V34 :   0.0167
                                          V91 :   0.0162
                                          V79 :   0.0137
                                          V98 :   0.0123
                                         V118 :   0.0120
                                           V4 :   0.0118
                                          V89 :   0.0115
                                          V23 :   0.0114
                                         V117 :   0.0106
                                          V41 :   0.0102
                                          V19 :   0.0090
                                          V74 :   0.0086
                                          V61 :   0.0085
                                          V31 :   0.0085
                                          V37 :   0.0075
                                          V55 :   0.0072
                                          V57 :   0.0069
                                          V69 :   0.0069
                                          V81 :   0.0067
                                         V101 :   0.0064
                                          V66 :   0.0063
                                         V100 :   0.0062
                                         V115 :   0.0061
                                         V106 :   0.0061
                                          V25 :   0.0058
                                         V113 :   0.0058
                                          V99 :   0.0058
                                          V67 :   0.0056
                                          V59 :   0.0054
                                         V114 :   0.0054
                                         V105 :   0.0052
                                          V96 :   0.0050
                                          V12 :   0.0050
                                          V76 :   0.0048
                                         V102 :   0.0048
                                          V27 :   0.0047
                                           V2 :   0.0045
                                         V107 :   0.0045
                                          V62 :   0.0045
                                          V10 :   0.0042
                                         V103 :   0.0040
                                         V109 :   0.0040
                                          V28 :   0.0040
                                          V17 :   0.0039
                                          V58 :   0.0039
                                          V94 :   0.0037
                                         V111 :   0.0036
                                          V47 :   0.0036
                                          V75 :   0.0036
                                          V70 :   0.0035
                                           V5 :   0.0034
                                          V13 :   0.0033
                                           V3 :   0.0032
                                          V73 :   0.0030
                                           V9 :   0.0028
                                          V43 :   0.0026
                                          V33 :   0.0025
                                          V68 :   0.0025
                                          V29 :   0.0024
                                         V110 :   0.0020
                                          V26 :   0.0020
                                          V92 :   0.0019
                                          V54 :   0.0018
                                          V15 :   0.0016
                                          V51 :   0.0014
                                         V112 :   0.0012
                                          V44 :   0.0011
                                          V49 :   0.0010
                                          V21 :   0.0009
         

"""

import sys
import math
import argparse
import csv
import binascii
import faulthandler
import json
try:
    import numpy as np  # For numpy see: http://numpy.org
except ImportError as e:
    print("This predictor requires the Numpy library. Please run 'python3 -m pip install numpy'.", file=sys.stderr)
    raise e
try:
    from scipy.sparse import coo_matrix
    report_cmat = True
except ImportError:
    print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix. Try 'python3 -m pip install scipy'.", file=sys.stderr)
    report_cmat = False
try:
    import multiprocessing
    var_dict = {}
    default_to_serial = False
except:
    default_to_serial = True

IOBUF = 100000000
sys.setrecursionlimit(1000000)
TRAINFILE = ['TRAIN_TEST_SPLITS/phpDYCOet-clean-train.csv']
mapping = {'1': 0, '0': 1}
ignorelabels = []
ignorecolumns = []
target = ''
target_column = 118
important_idxs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117]
ignore_idxs = []
classifier_type = 'RF'
num_attr = 118
n_classes = 2
model_cap = 228
logits_dict = {0: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.510360003, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.680480003, 0.510360003, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.729085743, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.527958632, -0.637950003, 0.803201377, 0.637187839, -0.0, -0.804621577, 0.567066669, -0.327153862, 0.535562932, -0.425300002, -0.368593335, 0.275546491, 0.231981829, -0.720912099, -0.671526372, -0.170120001, -0.425300002, 0.607571423, -0.121514291, -0.773272753, -0.170120001, -0.818759382, 0.498627603, -0.326533645, 0.539946079, -0.498627603, 0.283533335, -0.794362009, 0.666132569, -0.0793893337, -0.657281816, 0.425300002, 0.567066669, -0.016678432, -0.477827072, -0.76207602, 0.686628938, -0.212650001, 0.744274974, -0.389858335, 0.458015412, -0.680480003, -0.810414195, -0.0, 0.425300002, -0.637950003, -0.425300002, 0.654307723, 0.765540004, -0.466458082, -0.729085743, -0.845006347]), 1: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.510360003, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.680480003, -0.510360003, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.729085743, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.527958632, 0.637950003, -0.803201377, -0.637187839, -0.0, 0.804621577, -0.567066669, 0.327153862, -0.535562932, 0.425300002, 0.368593335, -0.275546491, -0.231981829, 0.720912099, 0.671526372, 0.170120001, 0.425300002, -0.607571423, 0.121514291, 0.773272753, 0.170120001, 0.818759382, -0.498627603, 0.326533645, -0.539946079, 0.498627603, -0.283533335, 0.794362009, -0.666132569, 0.0793893337, 0.657281816, -0.425300002, -0.567066669, 0.016678432, 0.477827072, 0.76207602, -0.686628938, 0.212650001, -0.744274974, 0.389858335, -0.458015412, 0.680480003, 0.810414195, -0.0, -0.425300002, 0.637950003, 0.425300002, -0.654307723, -0.765540004, 0.466458082, 0.729085743, 0.845006347]), 2: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.152323663, 1.14948499, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.476863176, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.691746473, 0.0, -0.107569464, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.696899772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.490376234, 0.773447156, 0.267516881, 0.456215471, 0.336914599, -0.336845875, 0.236020163, 1.11990297, -0.219586805, -0.465050995, 0.749789894, 0.15334551, -0.422028691, -0.113787912, -0.195165172, 0.66376847, -0.270347536, 0.273471266, 0.993755579, -0.099023737, -0.297087997, -0.483111411, 0.414093256, -0.572450817, 0.744915783, 1.60621238, 0.40768829, -0.285748363, 0.435535878, -0.0626507103, -0.402073056, 0.675842285, -0.0235500354, -0.496364623, 0.283390254, 1.09729826, -0.348114878, 0.800238788, 0.097300522, -0.394186288, 0.263550013, -0.51758188, 0.286969274, -0.379636586, 0.410782158, -0.430126399, -0.402797222, -0.501627207]), 3: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.152323663, -1.14948511, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.476863235, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.691746473, 0.0, 0.107569426, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.696899831, 0.0, 0.0, 0.0, 0.0, 0.0, -0.490376234, -0.773447096, -0.267516851, -0.456215471, -0.336914569, 0.336845905, -0.236020207, -1.11990297, 0.219586805, 0.465050995, -0.749789953, -0.15334551, 0.422028691, 0.113787875, 0.195165172, -0.66376847, 0.270347536, -0.273471296, -0.993755817, 0.0990237221, 0.297087997, 0.483111352, -0.414093286, 0.572450876, -0.744915783, -1.60621262, -0.407688379, 0.285748303, -0.435535908, 0.0626506507, 0.402073026, -0.675842285, 0.0235499721, 0.496364623, -0.283390284, -1.09729826, 0.348114848, -0.800239086, -0.097300522, 0.394186258, -0.263550013, 0.51758188, -0.286969334, 0.379636556, -0.410782158, 0.430126369, 0.402797192, 0.501627207]), 4: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.311736971, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.195113167, -0.301902831, 0.448135853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.541164994, 0.0, 0.434585869, 0.0, 0.0, 0.0, 0.597997069, 0.0, 0.0, 0.0, 0.199899241, 0.0, 0.342375338, -1.4822427, 0.41873306, 0.193825141, -0.0575060658, -1.57806087, -0.321594059, 0.613706768, 0.37786442, -0.612718225, 0.130313084, -0.675701141, 0.421080649, 1.13360417, 0.365159869, 0.0234026928, 0.69429791, -0.0584124662, -0.334609538, 0.418916553, -0.107823379, -0.410185814, -0.259212792, 0.122091062, 0.0615086108, -0.412284434, 0.385019749, -0.623677552, 0.381275058, -0.0689164251, 0.159897655, -0.425105691, -0.211652026, -0.47251761, 0.161333963, -0.323022753, 0.253364265, 1.48786604, 0.175837129, -0.390539587, -0.361643076, 0.414135963, 0.160505459, -0.441980571, -0.0655266717, -0.448561281]), 5: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.311737001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.195113152, 0.301902801, -0.448135972, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.541164994, 0.0, -0.43458581, 0.0, 0.0, 0.0, -0.597997189, 0.0, 0.0, 0.0, -0.199899286, 0.0, -0.342375308, 1.48224294, -0.41873306, -0.193825066, 0.0575060844, 1.5780611, 0.321594059, -0.613706768, -0.37786442, 0.612718046, -0.130313024, 0.67570132, -0.421080619, -1.13360429, -0.365159869, -0.0234027114, -0.69429791, 0.0584125444, 0.334609538, -0.418916613, 0.107823275, 0.410185814, 0.259212762, -0.122091077, -0.0615085997, 0.412284404, -0.38501972, 0.623677552, -0.381275088, 0.0689163804, -0.159897596, 0.425105691, 0.211651981, 0.47251761, -0.161333889, 0.323022753, -0.253364235, -1.48786604, -0.175837204, 0.390539557, 0.361643076, -0.414136052, -0.160505444, 0.441980571, 0.0655266866, 0.448561221]), 6: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.17649555, 0.144364178, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.287533969, 1.01529181, -0.304191113, -0.0548403822, 0.0, 0.0, 0.0, 0.0, -0.363895535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0690552965, 0.0, -0.281228602, 0.60675323, -0.306978673, 0.00492199138, 0.0, 0.507606328, -1.28438556, -0.697678745, 0.416741878, 0.210803658, -0.850265026, 0.450010478, -0.269131392, 0.130149841, -0.896954656, -0.438440293, -0.0282909051, -0.387133837, 0.0140907615, 0.123535298, -0.408622265, -0.0157630891, 0.580871284, -0.364024013, 0.339358807, 0.566970766, -0.375835627, -1.88502705, -0.471329719, 0.185508877, -0.388089716, -0.220718428, 0.936793983, -0.408844769, 0.462092131, -0.259379178, 0.275929689, 0.102567144, -0.30562976, 0.087823458, -0.403245032, 0.135285899, 1.10031033, -0.0668250173, -0.42742011]), 7: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.17649555, -0.144364163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.287533969, -1.01529169, 0.304191083, 0.0548404753, 0.0, 0.0, 0.0, 0.0, 0.363895535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0690550506, 0.0, 0.281228721, -0.60675323, 0.306978643, -0.00492207892, 0.0, -0.507606328, 1.28438568, 0.697678745, -0.416741878, -0.210803717, 0.850265026, -0.450010478, 0.269131362, -0.130149841, 0.896954536, 0.438440293, 0.0282908604, 0.387133777, -0.0140910894, -0.123535514, 0.408622265, 0.0157630295, -0.580871403, 0.364023983, -0.339359015, -0.566970825, 0.375835627, 1.88502717, 0.471329719, -0.185508862, 0.388089716, 0.220718399, -0.936793983, 0.408844769, -0.462092161, 0.259379178, -0.275929719, -0.102567159, 0.30562973, -0.0878233239, 0.403245091, -0.135285869, -1.10031033, 0.0668250024, 0.42742011]), 8: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0928958356, 0.876791656, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.174120262, -0.929873168, 0.0, 0.0, 0.0, 0.723259568, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.487839162, 0.0, -0.276310891, 0.663239539, 0.236312017, -0.380844116, -0.0282932464, 0.0, 0.0, 0.0, -1.77446759, -0.403855652, 0.0269623417, -0.525305212, -0.499272496, 0.40113014, 0.168985844, -0.0857258141, 0.0394174233, -0.314352185, -0.184302509, 1.68452358, 0.836021781, 0.198249832, 0.403555036, -0.144298837, -0.0013437022, -0.366379648, 0.115930945, -0.361604065, -1.57821989, -0.392085999, 0.17036736, 0.790736496, -0.235662267, 0.381435335, 0.979769409, -0.13936308, -0.551401317, -0.193087325, 0.404374748, -0.145581856, -0.0259476043, -0.575705767, 0.130227134, 0.642450333, -0.317744762, -0.429840118, -0.329728246, 0.766536474, 0.139630437, -0.406245589]), 9: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0928958058, -0.876791775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.174120277, 0.929873288, 0.0, 0.0, 0.0, -0.723259628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.487839162, 0.0, 0.276310831, -0.663239479, -0.236311957, 0.380844057, 0.0282932278, 0.0, 0.0, 0.0, 1.77446783, 0.403855652, -0.0269623473, 0.525305212, 0.499272406, -0.40113014, -0.168985799, 0.0857258141, -0.0394174419, 0.314352095, 0.184302434, -1.68452418, -0.836021781, -0.198249876, -0.403555036, 0.144298851, 0.00134364201, 0.366379648, -0.115930863, 0.361604065, 1.57822001, 0.392085969, -0.170367286, -0.790736496, 0.235662326, -0.381435305, -0.979769409, 0.139362827, 0.551401317, 0.193087295, -0.404374778, 0.145581827, 0.0259475186, 0.575705767, -0.130227238, -0.642450273, 0.317744702, 0.429840118, 0.329728156, -0.766537309, -0.139630258, 0.406245589]), 10: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.276097029, -0.452791274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.447005093, 0.447554857, 0.0, -0.0670665503, -0.449448943, 0.0, 0.0, 0.357777685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.779347062, -0.0401904546, -0.463554293, 0.0278434828, 0.0, 0.0, 0.0, 0.50966537, 1.35690653, 0.426595062, -0.10270559, 0.317401409, -0.409153789, -0.297253579, 0.535913408, -0.803126693, 0.222022027, -0.196617275, -0.00519905752, 0.059973266, -0.521175027, -1.46267819, -0.301736325, 0.355899096, -0.440283895, -0.518529356, 0.328949481, 0.271915287, -0.0419307537, 0.169044688, -0.330440551, 0.762634158, 0.0946853235, -0.0100006722, -0.310742944, 0.339455545, -0.21867536]), 11: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.276097, 0.452791303, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.447005093, -0.447554886, 0.0, 0.0670664683, 0.449448973, 0.0, 0.0, -0.357777476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.779347003, 0.0401904546, 0.463554353, -0.0278435461, 0.0, 0.0, 0.0, -0.50966543, -1.35690665, -0.426595062, 0.102705561, -0.317401379, 0.409153759, 0.297253579, -0.535913467, 0.803126693, -0.222021967, 0.196617246, 0.00519885775, -0.0599732511, 0.521175086, 1.46267819, 0.301736325, -0.355899245, 0.440283895, 0.518529296, -0.328949571, -0.271915317, 0.0419305675, -0.169044584, 0.330440551, -0.762634158, -0.0946853086, 0.0100005595, 0.310742855, -0.339455664, 0.2186753]), 12: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.278009623, -0.369255185, 0.0, 0.00801011361, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.525676072, 0.0, 0.463490278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.33076486, 0.0717947856, 0.0, -0.268266797, -0.338832319, 0.0, 0.0, 0.419880748, 0.0, 0.0, 0.0, 0.529671311, -0.321533591, 0.49287051, 0.174456477, 0.0, -0.163997024, 0.353833139, -0.531595767, 0.410892397, -0.59896487, 0.156973466, -0.622702599, 0.422198027, -0.485387236, 0.0627192706, -0.494540244, 0.443696648, -0.360266477, 0.179260775, -0.350135058, -0.0539173, 0.790821731, 0.330471784, 0.000323513086, 0.506527007, -0.398571372, 0.0860185921, 0.636110187, 0.214070708, -0.314516127, 0.0854472741, 0.441680461, -0.383653641, -0.432400912, -0.239191502]), 13: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.278009623, 0.369255185, 0.0, -0.00801005587, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.525676012, 0.0, -0.463490307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.33076483, -0.0717948303, 0.0, 0.268266767, 0.338832319, 0.0, 0.0, -0.419880748, 0.0, 0.0, 0.0, -0.529671311, 0.321533591, -0.492870539, -0.174456686, 0.0, 0.163997158, -0.35383305, 0.531595767, -0.410892427, 0.59896493, -0.156973466, 0.622702599, -0.422198087, 0.485387236, -0.0627192855, 0.494540185, -0.443696707, 0.360266507, -0.179260775, 0.350135058, 0.0539173298, -0.790821731, -0.330471814, -0.000323480315, -0.506526947, 0.398571372, -0.0860185176, -0.636110246, -0.214070708, 0.314516127, -0.0854473561, -0.441680372, 0.383653641, 0.432400852, 0.239191681]), 14: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.115302928, 0.0, 0.0, 0.0, -0.355000824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0343036763, 0.0, 0.0, 0.0132963192, -0.293539047, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.445078403, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.419358134, -0.173948005, 0.34055239, 0.968900383, 0.137423962, -0.634692192, 0.422605425, -0.0756955147, -0.24812296, -0.734498918, 0.37311548, -0.208185852, 0.332461685, 0.546024621, -0.152066052, -0.629828215, 0.513418376, -0.119618364, 0.238632262, -0.135526344, -0.944490373, -0.370271504, 0.201989397, -0.529238522, 0.0261764266, 0.278818458, 0.144027531, -0.312670618, 0.372697681, -0.162716463, -0.313428223, -0.0522720218, 0.137831733, -0.426696539, 0.540989697, -0.135546684, -0.410016507, 0.242600173, 0.215103105, -0.523324966, -0.373045832, 0.156049505, 0.402475387, -0.387433469, -0.0714938268, -0.440126866, -0.269541323, 0.0764098391]), 15: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.115302853, 0.0, 0.0, 0.0, 0.355000794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0343036205, 0.0, 0.0, -0.013296389, 0.293539077, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.445078403, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.419358134, 0.17394802, -0.34055233, -0.968900383, -0.137423933, 0.634691954, -0.422605425, 0.0756956562, 0.24812299, 0.734498858, -0.37311551, 0.208185732, -0.332461685, -0.546024561, 0.152065992, 0.629828095, -0.513418436, 0.119618312, -0.238632336, 0.135526329, 0.944490194, 0.370271534, -0.201989427, 0.529238343, -0.0261764284, -0.278818458, -0.144027546, 0.312670648, -0.372697711, 0.162716508, 0.313428283, 0.0522720218, -0.137831762, 0.426696539, -0.540989757, 0.135546714, 0.410016567, -0.242600143, -0.215103075, 0.523324966, 0.373045772, -0.15604952, -0.402475446, 0.387433439, 0.0714937598, 0.440126866, 0.269541264, -0.0764098838]), 16: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.549255431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.668693185, 0.0458203256, 0.0, 0.0, 0.416189432, -0.0191216078, -0.941125572, 0.243485108, 0.0, -0.220658243, 0.0, 0.0, 0.0, 0.0, 0.272983253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0527055673, 0.493004352, -0.148248807, -1.12391782, 0.346070468, -0.248827234, 0.191098288, 0.79852128, -0.126419455, 0.321403623, -0.427982777, -0.0796680301, 0.0187663566, -0.216692865, -0.348562777, 0.273145586, 0.120875172, -0.493776947, -0.0263903197, -0.37025252, 0.204399526, -0.475337029, 0.158265263, 0.751383722, -0.0819842368, -0.635045409, 0.166845202, -0.416936904, -0.20762445, 0.481869936, -0.115501329, 0.631519735, 0.384441257, -0.142117009, 0.338753283, -0.283793151]), 17: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.549255431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.668693185, -0.0458202586, 0.0, 0.0, -0.416189432, 0.0191216841, 0.941125631, -0.243485034, 0.0, 0.220658317, 0.0, 0.0, 0.0, 0.0, -0.272983342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0527055301, -0.493004352, 0.148248866, 1.12391806, -0.346070468, 0.248827294, -0.191098258, -0.79852128, 0.126419529, -0.321403593, 0.427982777, 0.0796682835, -0.018766351, 0.216692865, 0.348562807, -0.273145586, -0.12087521, 0.493776947, 0.02639037, 0.37025252, -0.204399467, 0.475337029, -0.158265173, -0.751383781, 0.0819842815, 0.63504529, -0.166845188, 0.416936904, 0.207624465, -0.481869876, 0.115501329, -0.631519854, -0.384441316, 0.142116949, -0.338753343, 0.283793241]), 18: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.342067897, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.195840508, 0.0, 0.0, 0.0536467582, 0.0, 0.0, 0.0, 1.58317828, 0.0, 0.0, -0.71542424, 0.0888421163, -0.264565051, 0.0, 0.0, 0.0, 0.0, -0.0145399533, 0.446822882, -0.503242433, 0.0, 0.0, 0.0, 0.328216076, 0.00680442899, 0.174042419, -0.291784137, -0.164403185, -0.558374703, 0.296138525, -0.264723331, -0.79114759, -0.184629068, -0.236931533, 0.327250242, -0.00404445129, -0.322040647, 0.171848789, -0.622572243, 0.43203643, -0.233543932, -0.398447275, -0.0877149254, 0.842496514, -0.0728905872, -0.449511856, 0.270215929, 0.56005007, 0.0893373787, 0.0511859283, 1.14260149]), 19: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.342067897, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.195840165, 0.0, 0.0, -0.0536468215, 0.0, 0.0, 0.0, -1.58317852, 0.0, 0.0, 0.71542424, -0.0888421908, 0.264565021, 0.0, 0.0, 0.0, 0.0, 0.0145399813, -0.446822882, 0.503242493, 0.0, 0.0, 0.0, -0.328216106, -0.00680443458, -0.174042419, 0.291784137, 0.164403185, 0.558374703, -0.296138525, 0.264723331, 0.791147709, 0.184629008, 0.236931607, -0.327250391, 0.00404442567, 0.322040647, -0.171848819, 0.622572124, -0.432036459, 0.233543858, 0.398447335, 0.0877147764, -0.842496216, 0.0728906021, 0.449511915, -0.270215899, -0.56005007, -0.0893374383, -0.0511859916, -1.14260149]), 20: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0615820624, -0.516852915, 0.0, 0.0, 0.427937299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.103347771, 0.0, 0.0643441007, -0.364459008, 0.0, -0.307641625, 0.382540911, 0.0, 0.0, 0.0, -0.0220246371, -0.278088361, 0.0, 0.0996613577, 0.0, 0.0, 0.0, 0.0, 0.0, -0.440175086, -0.276153386, 0.386124045, -0.458534032, 0.0926558077, 0.0297601037, -0.214674801, -0.158160657, 0.53897351, 0.137944236, 0.800692201, -0.425831586, -0.090751633, 0.738559544, -0.331635833, -0.247352585, 0.589567482, 0.706644535, -0.0857360661, -0.267821461, 0.138533711]), 21: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0615821332, 0.516852975, 0.0, 0.0, -0.427937239, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.103347786, 0.0, -0.0643441677, 0.364459008, 0.0, 0.307641566, -0.382540941, 0.0, 0.0, 0.0, 0.0220246017, 0.278088361, 0.0, -0.0996614099, 0.0, 0.0, 0.0, 0.0, 0.0, 0.440175086, 0.276153237, -0.386124045, 0.458534032, -0.0926557556, -0.0297601148, 0.214674816, 0.158160716, -0.538973749, -0.137944266, -0.800692201, 0.425831586, 0.0907516107, -0.738559306, 0.331635863, 0.247352555, -0.589567602, -0.706644833, 0.0857360289, 0.26782155, -0.138533592]), 22: np.array([0.0, 0.0, 0.0, 0.0, -0.532442689, 0.0, 0.0, 0.311872512, -0.101845317, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.503134429, 0.0, 0.0, 0.0, 0.0, -1.28963816, 0.0, 0.0, -0.447751403, 0.0770996585, 0.0, 0.0, -1.12626159, 0.0, 0.453778327, 0.0, 0.0, 0.0, -0.413110971, 0.179393947, -0.357595176, 0.291352034, -0.433305889, 0.0305644292, 0.562543094, 0.264152557, -0.244066045, 0.284690171, 0.115467899, -0.47219035, -0.51313889, 0.0414357409, 0.218348593, -0.602129996, -0.791588843, -0.105492026]), 23: np.array([0.0, 0.0, 0.0, 0.0, 0.532442689, 0.0, 0.0, -0.311872393, 0.10184554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.503134429, 0.0, 0.0, 0.0, 0.0, 1.28963804, 0.0, 0.0, 0.447751403, -0.0770997033, 0.0, 0.0, 1.12626159, 0.0, -0.453778327, 0.0, 0.0, 0.0, 0.41311124, -0.179393947, 0.357595265, -0.291352063, 0.433305949, -0.0305644292, -0.562543035, -0.264152467, 0.244066074, -0.284690291, -0.115467921, 0.47219038, 0.513138771, -0.0414357409, -0.218348593, 0.602129936, 0.791588604, 0.10549207]), 24: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.257669747, -0.0714689419, 0.0, -0.446623802, 0.0, 0.0, 0.0, 0.0, 0.0675831363, 0.389181793, 0.0394956619, -0.28883484, 0.0, 0.0, 0.0, 0.0, -0.0348257534, -0.200652078, 0.158316314, 0.0, 0.510318339, 0.0, 0.0, 0.0, 0.0, 0.0, -0.320655107, 0.0, -0.102270529, -0.402835548, 0.8658517, 0.0338796191, 0.0, 0.0, 0.0440073349, -0.301339597, 0.311270088, -0.237955496, -0.0289015137, -0.536208808, 0.270938069, -0.0899432153, 0.415117055, -0.291949034, 0.328046173, 0.00293170754, 0.322688669, -0.0558750629, -0.167785674, 1.02549946, -0.40810442, -0.103506513]), 25: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.257669806, 0.071468927, 0.0, 0.446623802, 0.0, 0.0, 0.0, 0.0, -0.0675830916, -0.389181823, -0.039495457, 0.28883484, 0.0, 0.0, 0.0, 0.0, 0.0348256491, 0.200652078, -0.158316344, 0.0, -0.510318279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.320655078, 0.0, 0.102270611, 0.402835548, -0.865851104, -0.033879973, 0.0, 0.0, -0.04400732, 0.301339656, -0.311270088, 0.237955421, 0.028901577, 0.536208749, -0.270938039, 0.08994326, -0.415117055, 0.291949302, -0.328046173, -0.00293168542, -0.322688669, 0.0558750629, 0.167785719, -1.02549946, 0.40810442, 0.103506662]), 26: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0397205986, -0.20686616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.359777123, 0.0, 0.0, 0.0, 0.0986439809, 0.422128141, -0.0556975678, 0.0, -0.374562263, 0.0, 0.103245251, 0.0, 0.0, 0.498135269, 0.0, 0.330969393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.243296131, 0.112929069, -0.275537878, 0.204756334, -0.0587693676, -0.52934283, 0.617547512, 0.0843932629, -0.164724931, 0.329855472, -0.163911879, -0.547052443, 0.228363663, -0.223945841, -0.609519303, -0.133384079, 0.163284674, -0.232851028, 0.445526809, 0.213492066, -0.0154522117, -0.697637618, -0.169005066, 0.284542561, 0.336349696, -0.404905498, -0.00361844036, 0.524842381, -0.0337586515, -0.485978693, 0.334491611, -0.0802635103, 0.358051062, -0.194817454, -0.155110672, -0.518529356, 0.100551501, -0.315807581, 0.0268360265, -0.11343272]), 27: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0397205539, 0.20686616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.359777063, 0.0, 0.0, 0.0, -0.0986440852, -0.422128141, 0.0556975938, 0.0, 0.374562263, 0.0, -0.103245243, 0.0, 0.0, -0.498135209, 0.0, -0.330969393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.243296072, -0.112928919, 0.275537908, -0.204756349, 0.0587693863, 0.52934283, -0.617547572, -0.0843932033, 0.164724901, -0.329855472, 0.163911924, 0.547052264, -0.228363693, 0.223945871, 0.609519303, 0.133384049, -0.163284719, 0.23285082, -0.445526809, -0.213492066, 0.0154521344, 0.697637618, 0.169005036, -0.284542561, -0.336349696, 0.404905498, 0.00361834257, -0.524842441, 0.0337585248, 0.485978723, -0.334491611, 0.0802636147, -0.358051032, 0.194817618, 0.155110702, 0.518529415, -0.100551523, 0.315807581, -0.0268359967, 0.113432869]), 28: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0335421376, 0.0, 0.701302409, 0.0, 0.0, 0.0, 0.109366462, 0.0, 0.0704809502, 0.577513516, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0890277475, 0.0, 0.0, 0.0, -0.430496722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.169296384, -0.249447376, 0.372990429, -0.0179506373, -0.111031517, -0.520838678, 0.299581677, -0.0851185694, -0.421590179, 0.000357173587, 0.137643054, -0.265922546, -0.589778244, 0.378528833, 0.48755154, -0.0439292155, 0.321332425, -0.544090629, -0.137066841, -0.543534696, 0.255616158, -0.372064143, -0.663651586, 0.145207122, -0.273775458, 0.0870097131, -0.350871861, -0.0539871491, 0.533744931, -0.103843994, -0.377239048, -0.00178897323, 0.395451963, -0.106880568, 0.219264179, -0.28005594, 0.0560049042, 0.550526202, -0.315734714, 0.206094801, -0.194811806, -0.42997098, -0.0698076934, 0.285626948, 0.0581305213, -0.347150594]), 29: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.033542227, 0.0, -0.701302409, 0.0, 0.0, 0.0, -0.109366514, 0.0, -0.0704807863, -0.577513635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0890276358, 0.0, 0.0, 0.0, 0.430496722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.16929616, 0.249447316, -0.37299034, 0.0179506056, 0.111031458, 0.520838737, -0.299581677, 0.0851187408, 0.421590179, -0.000357198151, -0.137643069, 0.265922517, 0.589778304, -0.378528804, -0.48755154, 0.0439289063, -0.321332425, 0.544090688, 0.137066811, 0.543534696, -0.255616188, 0.372064203, 0.663651586, -0.145207122, 0.273775429, -0.0870097503, 0.350871831, 0.0539871305, -0.533744931, 0.103844009, 0.377239048, 0.00178911572, -0.395451963, 0.10688059, -0.21926406, 0.28005594, -0.0560048521, -0.550526142, 0.315734684, -0.206094548, 0.194811746, 0.42997098, 0.0698076487, -0.285626858, -0.0581300259, 0.347150683]), 30: np.array([0.0, 0.0, 0.0, 0.0, 0.0, -0.0439861678, -0.456974387, 0.0, 0.0, 0.0, 0.0, 0.277531505, -0.0328340828, 0.175088868, -0.507892549, 0.0, 0.0, 0.0, 0.0, -0.272543788, 0.062342044, 0.42664957, 0.0, 0.0, 0.0, 0.0, 0.0, 0.373958498, -0.232912779, -0.600991726, 0.0707822591, -0.0505504943, 0.410006732, 0.0896479785, -0.887961149, -0.341517508, -0.00258788746]), 31: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0439862497, 0.456974387, 0.0, 0.0, 0.0, 0.0, -0.277531475, 0.0328342058, -0.175089046, 0.507892609, 0.0, 0.0, 0.0, 0.0, 0.272543848, -0.0623419546, -0.42664957, 0.0, 0.0, 0.0, 0.0, 0.0, -0.373958558, 0.232912794, 0.600992024, -0.0707822442, 0.0505504906, -0.410006762, -0.0896479487, 0.887961149, 0.341517538, 0.00258787978]), 32: np.array([0.0, 0.0, 0.0, 0.396987259, -0.0907279179, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.408343524, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.243511036, -0.265783787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.204135865, -0.291665107, 0.122288086, 0.61380589, 0.0, 0.305138409, -0.212285385, -0.0961119905, -0.942675948, 0.260176986, -0.133074164, -0.183101505, 0.00430941256, 0.0750499666, -0.201645419, 0.436974466, 0.0127333691, -0.399118662, -0.110750593, -0.280177087, 0.181106895]), 33: np.array([0.0, 0.0, 0.0, -0.39698723, 0.0907279477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.408343494, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.243511021, 0.265783966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.204134539, 0.291665077, -0.122287713, -0.613806069, 0.0, -0.305138469, 0.212285325, 0.0961120427, 0.942676067, -0.260176986, 0.133074194, 0.18310152, -0.00430938369, -0.0750499517, 0.201645494, -0.436974823, -0.0127333356, 0.399118632, 0.110750273, 0.280177087, -0.181108564]), 34: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.337411642, 0.0, 0.0, -0.161036938, 0.214618042, 0.0, 0.00650073076, 0.124956153, 0.0, 0.0, 0.492898166, 0.0, 0.0, 0.0, 0.0, 0.237433687, 0.0, 0.0, 0.0, -0.692361832, 0.0, -0.0480535328, 0.0, -0.499796093, 0.0, 0.266948909, -0.262454003, 0.303578019, 0.0, 0.580565751, 0.0110135768, 0.444064975, -0.0119791487, 0.0, 0.0, 0.152895659, -0.222130567, 0.236619785, -0.16439946, 0.265437543, -0.223858282, -0.157023191, 0.28034392, -0.598787904, -0.148835763, -0.246127576, -0.0297061559, -0.270023733, 0.0812630728, 0.00132619368, 0.225412488, 0.203527018, -0.210572198]), 35: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.337411582, 0.0, 0.0, 0.161036789, -0.214618087, 0.0, -0.00650092587, -0.124956004, 0.0, 0.0, -0.492898077, 0.0, 0.0, 0.0, 0.0, -0.237433344, 0.0, 0.0, 0.0, 0.692361832, 0.0, 0.0480534509, 0.0, 0.499796093, 0.0, -0.266948879, 0.262453914, -0.30357793, 0.0, -0.580565751, -0.0110135572, -0.444064885, 0.0119792474, 0.0, 0.0, -0.152895689, 0.222130537, -0.236619711, 0.16439943, -0.265437573, 0.223858312, 0.157023266, -0.280344099, 0.598787963, 0.148835734, 0.24612768, 0.0297060348, 0.270023733, -0.0812629387, -0.00132620148, -0.225412488, -0.203526974, 0.210572258]), 36: np.array([0.0, 0.0, 0.0, 0.112739109, 0.0, 0.0, 0.0, -0.0106375981, -0.383455575, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.300070465, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.156825751, 0.30538848, 0.0605651252, 0.0, 0.0, 0.457467645, 0.0, 0.0, 0.0532757267, 0.495776772, 0.0364342779, -0.137447596, -0.498790294, 0.0958290771, 0.277389199, -0.1507328, 0.188228652, -0.458383024, 0.0609926134, 0.54284507, -0.0112349503, -0.464499652, -0.0494381376, 0.334258676, -0.105423734, -0.477769196, 0.490662128, -0.0220829491]), 37: np.array([0.0, 0.0, 0.0, -0.112739109, 0.0, 0.0, 0.0, 0.0106376503, 0.383455515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.300070435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.156825781, -0.305388421, -0.0605650693, 0.0, 0.0, -0.457467556, 0.0, 0.0, -0.0532757305, -0.495776802, -0.0364342779, 0.137447655, 0.498790294, -0.0958289951, -0.277389109, 0.15073289, -0.188228756, 0.458383143, -0.0609926395, -0.542844832, 0.011234886, 0.464499652, 0.0494381562, -0.334258646, 0.105423741, 0.477769196, -0.490662068, 0.0220829751]), 38: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0609337129, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.140960068, 0.0, 0.00761019299, -0.544435143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.337881774, -0.0333692022, 0.0, 0.0, 0.0, 0.0, -0.961547017, -0.27608037, -0.0734833404, 0.0, 0.0, 0.0, 0.0, 0.492342979, 0.0, 0.0, 0.0, -0.513308048, 0.0, 0.0, 0.0818592459, -0.140592739, -0.49188149, 0.0255315732, 0.10682068, -0.265422881, -0.16197817, 0.226591378, -0.302951217, 0.260255545, 0.223071143, -0.30560711, 0.0843898058, 0.581035018, 0.0226725638, 0.178748012, 0.0410371386, -0.19030644, -0.0195354167, -0.420560807, -0.27452758, 0.0513538644, 0.354839891, -0.00549719762, 0.173128366, -0.195405126, -0.060146194, 0.530522585, 0.193152457, -0.144410536]), 39: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0609337389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.140960038, 0.0, -0.00761021348, 0.544435322, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.337881774, 0.0333694518, 0.0, 0.0, 0.0, 0.0, 0.961547077, 0.27608043, 0.0734833479, 0.0, 0.0, 0.0, 0.0, -0.492342979, 0.0, 0.0, 0.0, 0.513307989, 0.0, 0.0, -0.0818592384, 0.140592813, 0.49188146, -0.0255315881, -0.106820606, 0.265422851, 0.16197814, -0.226591378, 0.302951306, -0.260255545, -0.223071069, 0.30560714, -0.0843898579, -0.581035078, -0.0226725657, -0.178748012, -0.041037105, 0.190306455, 0.0195354298, 0.420560807, 0.27452752, -0.0513539165, -0.354839861, 0.00549716409, -0.173128307, 0.195405126, 0.0601462275, -0.530522585, -0.193152517, 0.144410625]), 40: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.563319445, 0.0, 0.0, 0.0, 0.0, -0.111069061, -0.513311803, -0.137560412, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.418764204, 0.0, 0.154956296, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.254306138, 0.0, 0.0654268861, 0.375451744, 0.0, -0.0177291501, 0.0, 0.0, -0.189917982, 0.192666978, -0.00804307312, -0.388893038, 0.0975090861, 0.372376949, -0.211136803, 0.116641112, -0.0368053243, 0.219343752, -0.373030573, -0.0469855256, 0.155421853, 0.729824305, 0.153866902, -0.124533735, -0.0341522284, 0.181705683, 0.113915876, -0.160657138, 0.0395088755, -0.275479496, 0.682721257, 0.0314165018, 0.107608959, -0.363603979, 0.209162578, 0.740787745, 0.313508391, -0.049668178, -0.328881174, 0.0753388032]), 41: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.563319385, 0.0, 0.0, 0.0, 0.0, 0.111069061, 0.513311863, 0.137560487, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.418764144, 0.0, -0.154956371, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.254306078, 0.0, -0.0654270127, -0.375451684, 0.0, 0.0177291855, 0.0, 0.0, 0.189917833, -0.192666918, 0.00804301072, 0.388893276, -0.0975091159, -0.372376978, 0.211136937, -0.116641127, 0.036805436, -0.219343737, 0.373030573, 0.0469854586, -0.155421838, -0.729823887, -0.153866902, 0.12453375, 0.034152247, -0.181705728, -0.113915861, 0.160657182, -0.0395088829, 0.275479525, -0.682721019, -0.0314159393, -0.107609019, 0.363603979, -0.209162518, -0.740787804, -0.313508391, 0.0496682115, 0.328881174, -0.0753385127]), 42: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.382088304, -0.396436214, 0.0, 0.0, 0.0, 0.718392372, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.352949172, 0.0, -0.480870545, -0.15850383, 0.342940569, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0738356784, -0.338798851, -0.354252458, 0.0551643595, 0.0, 0.0, -0.257772595, 0.140648901, -0.283819258, 0.022178743, -0.836486697, -0.361889482, 0.486039132, -0.106851153, 0.272944659, 0.0496283583, -0.213222802, 0.26135999, -0.146806225, 0.113413058, 0.244558543, -0.298037201, 0.173294082, -0.190161213, 0.141991645, 0.00601024972, -0.000284985756, -0.301511168, -0.0390918143, 0.25777334, 0.0135101154, 0.47753334, 0.242455199, -0.311558455]), 43: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.382088363, 0.396436214, 0.0, 0.0, 0.0, -0.71839267, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.352949202, 0.0, 0.480870485, 0.158503935, -0.34294048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0738358572, 0.338798881, 0.354252458, -0.055164434, 0.0, 0.0, 0.257772744, -0.140648901, 0.283819377, -0.0221787114, 0.836487114, 0.361889243, -0.486039132, 0.106851175, -0.272944629, -0.0496283583, 0.213222802, -0.2613599, 0.14680624, -0.113413036, -0.244558528, 0.298037201, -0.173294112, 0.190161273, -0.141991526, -0.0060101985, 0.000284983253, 0.301511139, 0.0390917063, -0.257773399, -0.0135100475, -0.477533191, -0.242455199, 0.311558694]), 44: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.462814033, 0.0664856136, 0.0, 0.0, 0.0, 0.33267653, 0.0, 0.0, 0.0, 0.0, -0.17934595, 0.0884558037, 0.0, 0.0, 0.0, 0.0, 0.193577796, -0.189905748, -0.151510924, 0.306874871, -0.0930350497, -0.436866999, 0.147017151, -0.239464477, 0.114254296, 0.411409676, 0.0, 0.0, 0.0, 0.0, -0.0313279964, 0.0, 0.0, 0.0, 0.0445686914, 0.397434026, -0.243271276, -0.0115433196, -0.0923093036, 0.302213967, -0.00976161472, -0.396252573, 0.034487132, 0.354148328, 0.149399877, -0.0407798551, -0.105696835, 0.0799811408]), 45: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.462813973, -0.0664855316, 0.0, 0.0, 0.0, -0.332676589, 0.0, 0.0, 0.0, 0.0, 0.17934595, -0.0884558782, 0.0, 0.0, 0.0, 0.0, -0.193577588, 0.189905718, 0.151511058, -0.306874871, 0.0930350721, 0.436867148, -0.147017196, 0.239464372, -0.114254475, -0.411409706, 0.0, 0.0, 0.0, 0.0, 0.031328097, 0.0, 0.0, 0.0, -0.0445687138, -0.397434056, 0.243271261, 0.0115432935, 0.0923093259, -0.302213967, 0.00976163428, 0.396252602, -0.0344871208, -0.354148299, -0.149399906, 0.0407799073, 0.105696872, -0.0799811035]), 46: np.array([0.0, 0.0, 0.0, 0.0, 0.619371474, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0552410372, -0.363300532, 0.222765207, 0.0, 0.159822285, 0.0, -0.344067872, 0.182915241, 0.685506046, 0.0, 0.215657383, -0.162623376, 0.451252639, 0.00501940353, 0.0, 0.0, -0.145114183, 0.0, 0.209890798, -0.237901375, 0.16208005, 0.0555857643, 0.0598711818, -0.304319918, 0.14955619, -0.284035504, -0.227362022, -0.0314548872, 0.291126549, -0.0191861335, -0.271781266, 0.0843472108, -0.00229300256, -0.363046765, 0.258644283, -0.272787988, 0.359251469, -0.0355725735, 0.08894822, -0.300993323, 0.0426505283, 0.344902009]), 47: np.array([0.0, 0.0, 0.0, 0.0, -0.619371533, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0552409403, 0.363300562, -0.222765177, 0.0, -0.159822136, 0.0, 0.344067931, -0.182914898, -0.685506046, 0.0, -0.215657279, 0.162623316, -0.451252431, -0.00501946965, 0.0, 0.0, 0.145114273, 0.0, -0.209890708, 0.237901315, -0.16207999, -0.0555857755, -0.0598711111, 0.304319859, -0.14955613, 0.284035534, 0.227362022, 0.0314548574, -0.291126549, 0.0191861372, 0.271781266, -0.0843473151, 0.00229276204, 0.363046795, -0.258643985, 0.272787958, -0.35925141, 0.0355725475, -0.0889480785, 0.300993651, -0.0426502787, -0.344902217]), 48: np.array([0.0, 0.0, 0.0, 0.0, 0.427430809, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.363769501, 0.0, -0.295097619, 0.0, 0.0, 0.00200204621, 0.276715308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.178975552, 0.0, 0.0, -0.289609373, 0.146585166, 0.0, 0.0, 0.0, 0.0, 0.0, -0.354864448, 0.358965963, 0.0, 0.159385875, -0.173844248, -0.0494252481, 0.359133303, -0.181682035, 0.0757741705, -0.278454065, -0.00875445176, 0.066177994, -0.41296494, 0.297968268, -0.121462122, 0.0275270753, -0.0910027027, -0.158959746, 0.239009902, -0.306066424, -0.0217026602]), 49: np.array([0.0, 0.0, 0.0, 0.0, -0.427430749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.36376974, 0.0, 0.295097619, 0.0, 0.0, -0.00200208277, -0.276715308, 0.0, 0.0, 0.0, 0.0, 0.0, -0.178975567, 0.0, 0.0, 0.289609432, -0.146585017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.354864448, -0.358965874, 0.0, -0.159385875, 0.173844174, 0.0494252332, -0.359133244, 0.181682006, -0.0757742971, 0.278454185, 0.00875447877, -0.0661780164, 0.41296497, -0.297968209, 0.121462226, -0.0275270715, 0.0910028443, 0.158959582, -0.23901023, 0.306066364, 0.0217027571])}
right_children_dict = {0: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, -1, 67, 69, 71, 73, 75, -1, -1, -1, 77, 79, 81, -1, 83, 85, 87, -1, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 1: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, -1, 67, 69, 71, 73, 75, -1, -1, -1, 77, 79, 81, -1, 83, 85, 87, -1, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 2: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, -1, -1, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, -1, 67, 69, 71, 73, 75, 77, 79, -1, 81, -1, 83, 85, 87, 89, 91, 93, 95, -1, 97, 99, 101, 103, 105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 3: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, -1, -1, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, -1, 67, 69, 71, 73, 75, 77, 79, -1, 81, -1, 83, 85, 87, 89, 91, 93, 95, -1, 97, 99, 101, 103, 105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 4: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, -1, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, -1, -1, -1, 79, 81, 83, 85, 87, 89, -1, 91, -1, 93, 95, 97, -1, 99, 101, 103, -1, 105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 5: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, -1, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, -1, -1, -1, 79, 81, 83, 85, 87, 89, -1, 91, -1, 93, 95, 97, -1, 99, 101, 103, -1, 105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 6: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, -1, -1, 63, 65, 67, 69, 71, 73, -1, -1, -1, -1, 75, 77, 79, 81, -1, 83, 85, 87, 89, 91, 93, 95, 97, -1, 99, -1, -1, -1, -1, 101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 7: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, -1, -1, 63, 65, 67, 69, 71, 73, -1, -1, -1, -1, 75, 77, 79, 81, -1, 83, 85, 87, 89, 91, 93, 95, 97, -1, 99, -1, -1, -1, -1, 101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 8: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, -1, -1, 63, 65, 67, 69, 71, 73, -1, -1, 75, 77, 79, -1, 81, 83, 85, 87, 89, 91, 93, 95, -1, 97, -1, -1, -1, -1, -1, 99, 101, 103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 9: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, -1, -1, 63, 65, 67, 69, 71, 73, -1, -1, 75, 77, 79, -1, 81, 83, 85, 87, 89, 91, 93, 95, -1, 97, -1, -1, -1, -1, -1, 99, 101, 103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 10: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, -1, -1, 35, 37, 39, 41, 43, 45, 47, -1, -1, 49, -1, -1, 51, 53, -1, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, -1, -1, -1, -1, 75, 77, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 11: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, -1, -1, 35, 37, 39, 41, 43, 45, 47, -1, -1, 49, -1, -1, 51, 53, -1, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, -1, -1, -1, -1, 75, 77, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 12: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, -1, -1, 31, -1, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, -1, 57, -1, 59, 61, 63, 65, 67, 69, 71, -1, -1, 73, -1, -1, 75, 77, -1, 79, 81, 83, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 13: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, -1, -1, 31, -1, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, -1, 57, -1, 59, 61, 63, 65, 67, 69, 71, -1, -1, 73, -1, -1, 75, 77, -1, 79, 81, 83, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 14: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, -1, 31, 33, 35, -1, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, -1, 71, 73, -1, -1, 75, 77, 79, 81, 83, 85, -1, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 15: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, -1, 31, 33, 35, -1, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, -1, 71, 73, -1, -1, 75, 77, 79, 81, 83, 85, -1, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 16: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, -1, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, -1, -1, 49, 51, -1, -1, -1, -1, 53, -1, 55, 57, 59, 61, -1, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 17: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, -1, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, -1, -1, 49, 51, -1, -1, -1, -1, 53, -1, 55, 57, 59, 61, -1, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 18: np.array([1, 3, 5, 7, 9, 11, -1, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, -1, 47, 49, -1, 51, 53, 55, -1, 57, 59, -1, -1, -1, 61, 63, 65, 67, -1, -1, -1, 69, 71, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 19: np.array([1, 3, 5, 7, 9, 11, -1, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, -1, 47, 49, -1, 51, 53, 55, -1, 57, 59, -1, -1, -1, 61, 63, 65, 67, -1, -1, -1, 69, 71, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 20: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, -1, -1, 19, 21, -1, 23, 25, 27, 29, 31, 33, 35, 37, 39, -1, 41, -1, -1, 43, -1, -1, 45, 47, 49, -1, -1, 51, -1, 53, 55, 57, 59, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 21: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, -1, -1, 19, 21, -1, 23, 25, 27, 29, 31, 33, 35, 37, 39, -1, 41, -1, -1, 43, -1, -1, 45, 47, 49, -1, -1, 51, -1, 53, 55, 57, 59, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 22: np.array([1, 3, 5, 7, -1, 9, 11, -1, -1, 13, 15, 17, 19, 21, 23, 25, 27, -1, 29, 31, 33, 35, -1, 37, 39, -1, -1, 41, 43, -1, 45, -1, 47, 49, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 23: np.array([1, 3, 5, 7, -1, 9, 11, -1, -1, 13, 15, 17, 19, 21, 23, 25, 27, -1, 29, 31, 33, 35, -1, 37, 39, -1, -1, 41, 43, -1, 45, -1, 47, 49, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 24: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, -1, -1, 31, -1, 33, 35, 37, 39, -1, -1, -1, -1, 41, 43, 45, 47, -1, -1, -1, 49, -1, 51, 53, 55, 57, 59, -1, 61, -1, -1, -1, -1, 63, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 25: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, -1, -1, 31, -1, 33, 35, 37, 39, -1, -1, -1, -1, 41, 43, 45, 47, -1, -1, -1, 49, -1, 51, 53, 55, 57, 59, -1, 61, -1, -1, -1, -1, 63, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 26: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, -1, -1, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, -1, 59, 61, 63, -1, -1, -1, 65, -1, 67, -1, 69, 71, -1, 73, -1, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 27: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, -1, -1, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, -1, 59, 61, 63, -1, -1, -1, 65, -1, 67, -1, 69, 71, -1, 73, -1, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 28: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, -1, 55, -1, 57, 59, 61, -1, 63, -1, -1, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, -1, 85, 87, 89, -1, 91, 93, 95, 97, 99, 101, 103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 29: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, -1, 55, -1, 57, 59, 61, -1, 63, -1, -1, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, -1, 85, 87, 89, -1, 91, 93, 95, 97, 99, 101, 103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 30: np.array([1, 3, 5, 7, 9, -1, -1, 11, 13, 15, 17, -1, -1, -1, -1, 19, 21, 23, 25, -1, -1, -1, 27, 29, 31, 33, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 31: np.array([1, 3, 5, 7, 9, -1, -1, 11, 13, 15, 17, -1, -1, -1, -1, 19, 21, 23, 25, -1, -1, -1, 27, 29, 31, 33, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 32: np.array([1, 3, 5, -1, -1, 7, 9, 11, 13, 15, 17, 19, -1, 21, 23, 25, 27, 29, 31, -1, -1, 33, 35, 37, 39, 41, 43, 45, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 33: np.array([1, 3, 5, -1, -1, 7, 9, 11, 13, 15, 17, 19, -1, 21, 23, 25, 27, 29, 31, -1, -1, 33, 35, 37, 39, 41, 43, 45, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 34: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, -1, 33, 35, -1, -1, 37, -1, -1, 39, 41, -1, 43, 45, 47, 49, -1, 51, 53, 55, -1, 57, -1, 59, -1, 61, -1, -1, -1, 63, -1, -1, -1, -1, 65, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 35: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, -1, 33, 35, -1, -1, 37, -1, -1, 39, 41, -1, 43, 45, 47, 49, -1, 51, 53, 55, -1, 57, -1, 59, -1, 61, -1, -1, -1, 63, -1, -1, -1, -1, 65, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 36: np.array([1, 3, 5, -1, 7, 9, 11, -1, -1, 13, 15, 17, 19, 21, 23, -1, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, -1, -1, -1, 47, 49, -1, 51, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 37: np.array([1, 3, 5, -1, 7, 9, 11, -1, -1, 13, 15, 17, 19, 21, 23, -1, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, -1, -1, -1, 47, 49, -1, 51, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 38: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, -1, 19, 21, 23, 25, 27, 29, 31, 33, 35, -1, 37, -1, -1, 39, 41, 43, 45, 47, 49, 51, 53, -1, -1, 55, 57, 59, 61, -1, -1, -1, 63, 65, 67, 69, -1, 71, 73, 75, -1, 77, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 39: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, -1, 19, 21, 23, 25, 27, 29, 31, 33, 35, -1, 37, -1, -1, 39, 41, 43, 45, 47, 49, 51, 53, -1, -1, 55, 57, 59, 61, -1, -1, -1, 63, 65, 67, 69, -1, 71, 73, 75, -1, 77, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 40: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, -1, 25, 27, 29, 31, -1, -1, -1, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, -1, 61, -1, 63, 65, 67, 69, 71, 73, -1, 75, -1, -1, 77, -1, 79, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 41: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, -1, 25, 27, 29, 31, -1, -1, -1, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, -1, 61, -1, 63, 65, 67, 69, 71, 73, -1, 75, -1, -1, 77, -1, 79, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 42: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, -1, -1, 25, 27, 29, -1, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, -1, 59, -1, -1, -1, 61, 63, 65, 67, 69, 71, -1, -1, -1, -1, 73, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 43: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, -1, -1, 25, 27, 29, -1, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, -1, 59, -1, -1, -1, 61, 63, 65, 67, 69, 71, -1, -1, -1, -1, 73, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 44: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, -1, -1, 23, 25, 27, -1, 29, 31, 33, 35, -1, -1, 37, 39, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 47, 49, 51, -1, 53, 55, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 45: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, -1, -1, 23, 25, 27, -1, 29, 31, 33, 35, -1, -1, 37, 39, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 47, 49, 51, -1, 53, 55, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 46: np.array([1, 3, 5, 7, -1, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, -1, -1, -1, 61, -1, 63, -1, -1, -1, 65, -1, -1, -1, -1, 67, 69, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 47: np.array([1, 3, 5, 7, -1, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, -1, -1, -1, 61, -1, 63, -1, -1, -1, 65, -1, -1, -1, -1, 67, 69, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 48: np.array([1, 3, 5, 7, -1, 9, 11, 13, 15, 17, 19, 21, -1, 23, -1, 25, 27, -1, -1, 29, 31, 33, 35, 37, -1, 39, 41, -1, -1, 43, 45, 47, 49, 51, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 49: np.array([1, 3, 5, 7, -1, 9, 11, 13, 15, 17, 19, 21, -1, 23, -1, 25, 27, -1, -1, 29, 31, 33, 35, 37, -1, 39, 41, -1, -1, 43, 45, 47, 49, 51, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])}
split_feats_dict = {0: np.array([5, 89, 59, 96, 64, 0, 96, 0, 89, 106, 88, 89, 29, 5, 29, 40, 57, 88, 3, 2, 98, 57, 104, 60, 92, 117, 90, 100, 29, 65, 3, 58, 24, 0, 0, 89, 0, 60, 56, 0, 0, 0, 101, 64, 66, 0, 27, 106, 96, 0, 112, 96, 26, 58, 64, 102, 89, 116, 57, 102, 9, 114, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 1: np.array([5, 89, 59, 96, 64, 0, 96, 0, 89, 106, 88, 89, 29, 5, 29, 40, 57, 88, 3, 2, 98, 57, 104, 60, 92, 117, 90, 100, 29, 65, 3, 58, 24, 0, 0, 89, 0, 60, 56, 0, 0, 0, 101, 64, 66, 0, 27, 106, 96, 0, 112, 96, 26, 58, 64, 102, 89, 116, 57, 102, 9, 114, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 2: np.array([0, 96, 64, 89, 29, 13, 89, 5, 95, 57, 90, 116, 56, 0, 58, 89, 60, 88, 56, 0, 0, 58, 61, 104, 12, 68, 90, 96, 58, 116, 5, 5, 10, 97, 69, 0, 104, 5, 25, 72, 61, 0, 3, 0, 19, 0, 56, 97, 101, 73, 27, 96, 88, 0, 96, 10, 2, 96, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 3: np.array([0, 96, 64, 89, 29, 13, 89, 5, 95, 57, 90, 116, 56, 0, 58, 89, 60, 88, 56, 0, 0, 58, 61, 104, 12, 68, 90, 96, 58, 116, 5, 5, 10, 97, 69, 0, 104, 5, 25, 72, 61, 0, 3, 0, 19, 0, 56, 97, 101, 73, 27, 96, 88, 0, 96, 10, 2, 96, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 4: np.array([0, 88, 96, 59, 64, 89, 5, 5, 60, 56, 18, 10, 19, 90, 61, 66, 96, 64, 78, 5, 0, 60, 56, 116, 116, 96, 92, 90, 113, 64, 92, 104, 0, 100, 102, 27, 78, 3, 68, 14, 0, 0, 0, 61, 96, 68, 58, 108, 5, 0, 74, 0, 106, 2, 5, 0, 56, 116, 110, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 5: np.array([0, 88, 96, 59, 64, 89, 5, 5, 60, 56, 18, 10, 19, 90, 61, 66, 96, 64, 78, 5, 0, 60, 56, 116, 116, 96, 92, 90, 113, 64, 92, 104, 0, 100, 102, 27, 78, 3, 68, 14, 0, 0, 0, 61, 96, 68, 58, 108, 5, 0, 74, 0, 106, 2, 5, 0, 56, 116, 110, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 6: np.array([3, 89, 96, 97, 56, 4, 90, 101, 113, 106, 95, 58, 5, 89, 108, 88, 64, 68, 5, 61, 3, 5, 105, 58, 110, 3, 64, 57, 5, 61, 67, 0, 0, 100, 18, 56, 112, 33, 116, 0, 0, 0, 0, 2, 2, 68, 25, 0, 104, 5, 88, 0, 4, 1, 88, 60, 0, 4, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 7: np.array([3, 89, 96, 97, 56, 4, 90, 101, 113, 106, 95, 58, 5, 89, 108, 88, 64, 68, 5, 61, 3, 5, 105, 58, 110, 3, 64, 57, 5, 61, 67, 0, 0, 100, 18, 56, 112, 33, 116, 0, 0, 0, 0, 2, 2, 68, 25, 0, 104, 5, 88, 0, 4, 1, 88, 60, 0, 4, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 8: np.array([96, 112, 5, 40, 90, 61, 61, 105, 2, 100, 110, 61, 104, 69, 59, 105, 69, 90, 60, 116, 100, 113, 24, 64, 2, 61, 90, 78, 88, 29, 5, 0, 0, 0, 61, 36, 59, 61, 108, 0, 0, 113, 0, 112, 0, 5, 110, 102, 4, 91, 73, 60, 69, 0, 5, 0, 0, 0, 0, 0, 110, 3, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 9: np.array([96, 112, 5, 40, 90, 61, 61, 105, 2, 100, 110, 61, 104, 69, 59, 105, 69, 90, 60, 116, 100, 113, 24, 64, 2, 61, 90, 78, 88, 29, 5, 0, 0, 0, 61, 36, 59, 61, 108, 0, 0, 113, 0, 112, 0, 5, 110, 102, 4, 91, 73, 60, 69, 0, 5, 0, 0, 0, 0, 0, 110, 3, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 10: np.array([89, 105, 97, 59, 10, 4, 5, 30, 5, 52, 18, 5, 116, 104, 20, 116, 5, 0, 0, 117, 30, 4, 68, 5, 0, 61, 0, 0, 25, 0, 0, 0, 0, 0, 8, 66, 102, 60, 116, 56, 2, 104, 29, 56, 0, 0, 0, 0, 61, 64, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 11: np.array([89, 105, 97, 59, 10, 4, 5, 30, 5, 52, 18, 5, 116, 104, 20, 116, 5, 0, 0, 117, 30, 4, 68, 5, 0, 61, 0, 0, 25, 0, 0, 0, 0, 0, 8, 66, 102, 60, 116, 56, 2, 104, 29, 56, 0, 0, 0, 0, 61, 64, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 12: np.array([3, 104, 98, 116, 100, 101, 61, 116, 96, 56, 78, 80, 104, 117, 72, 0, 0, 106, 0, 64, 22, 116, 104, 101, 117, 74, 60, 99, 60, 106, 106, 0, 60, 0, 67, 101, 60, 104, 54, 65, 104, 0, 0, 91, 0, 0, 29, 102, 0, 61, 57, 26, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 13: np.array([3, 104, 98, 116, 100, 101, 61, 116, 96, 56, 78, 80, 104, 117, 72, 0, 0, 106, 0, 64, 22, 116, 104, 101, 117, 74, 60, 99, 60, 106, 106, 0, 60, 0, 67, 101, 60, 104, 54, 65, 104, 0, 0, 91, 0, 0, 29, 102, 0, 61, 57, 26, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 14: np.array([89, 90, 58, 90, 112, 89, 60, 4, 57, 74, 109, 59, 60, 116, 58, 0, 89, 116, 10, 0, 68, 56, 101, 100, 27, 104, 69, 100, 4, 4, 60, 2, 0, 106, 5, 88, 60, 0, 88, 4, 0, 0, 59, 1, 4, 29, 73, 5, 0, 108, 100, 61, 3, 106, 99, 96, 72, 114, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 15: np.array([89, 90, 58, 90, 112, 89, 60, 4, 57, 74, 109, 59, 60, 116, 58, 0, 89, 116, 10, 0, 68, 56, 101, 100, 27, 104, 69, 100, 4, 4, 60, 2, 0, 106, 5, 88, 60, 0, 88, 4, 0, 0, 59, 1, 4, 29, 73, 5, 0, 108, 100, 61, 3, 106, 99, 96, 72, 114, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 16: np.array([3, 3, 96, 61, 80, 60, 93, 112, 2, 0, 46, 66, 104, 4, 5, 89, 61, 88, 2, 58, 26, 68, 60, 100, 66, 0, 0, 2, 58, 0, 0, 0, 0, 88, 0, 2, 24, 60, 5, 0, 111, 65, 78, 2, 58, 108, 98, 69, 89, 4, 60, 67, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 17: np.array([3, 3, 96, 61, 80, 60, 93, 112, 2, 0, 46, 66, 104, 4, 5, 89, 61, 88, 2, 58, 26, 68, 60, 100, 66, 0, 0, 2, 58, 0, 0, 0, 0, 88, 0, 2, 24, 60, 5, 0, 111, 65, 78, 2, 58, 108, 98, 69, 89, 4, 60, 67, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 18: np.array([113, 108, 89, 113, 110, 2, 0, 36, 59, 2, 112, 4, 5, 46, 96, 61, 59, 1, 5, 108, 112, 57, 2, 5, 0, 99, 114, 0, 116, 89, 114, 0, 109, 61, 0, 0, 0, 109, 58, 60, 112, 0, 0, 0, 4, 2, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 19: np.array([113, 108, 89, 113, 110, 2, 0, 36, 59, 2, 112, 4, 5, 46, 96, 61, 59, 1, 5, 108, 112, 57, 2, 5, 0, 99, 114, 0, 116, 89, 114, 0, 109, 61, 0, 0, 0, 109, 58, 60, 112, 0, 0, 0, 4, 2, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 20: np.array([0, 5, 112, 58, 89, 61, 28, 61, 68, 0, 0, 58, 4, 0, 90, 104, 110, 96, 2, 58, 100, 60, 1, 0, 1, 0, 0, 4, 0, 0, 4, 5, 104, 0, 0, 104, 0, 117, 16, 106, 5, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 21: np.array([0, 5, 112, 58, 89, 61, 28, 61, 68, 0, 0, 58, 4, 0, 90, 104, 110, 96, 2, 58, 100, 60, 1, 0, 1, 0, 0, 4, 0, 0, 4, 5, 104, 0, 0, 104, 0, 117, 16, 106, 5, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 22: np.array([74, 64, 68, 56, 0, 68, 68, 0, 0, 4, 96, 69, 3, 68, 3, 102, 60, 0, 58, 61, 72, 60, 0, 69, 0, 0, 0, 69, 102, 0, 3, 0, 100, 110, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 23: np.array([74, 64, 68, 56, 0, 68, 68, 0, 0, 4, 96, 69, 3, 68, 3, 102, 60, 0, 58, 61, 72, 60, 0, 69, 0, 0, 0, 69, 102, 0, 3, 0, 100, 110, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 24: np.array([89, 54, 26, 4, 10, 114, 60, 100, 2, 12, 11, 59, 104, 59, 60, 0, 0, 116, 0, 4, 0, 59, 97, 0, 0, 0, 0, 60, 72, 111, 100, 0, 0, 0, 58, 0, 53, 102, 10, 66, 112, 0, 104, 0, 0, 0, 0, 104, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 25: np.array([89, 54, 26, 4, 10, 114, 60, 100, 2, 12, 11, 59, 104, 59, 60, 0, 0, 116, 0, 4, 0, 59, 97, 0, 0, 0, 0, 60, 72, 111, 100, 0, 0, 0, 58, 0, 53, 102, 10, 66, 112, 0, 104, 0, 0, 0, 0, 104, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 26: np.array([109, 4, 88, 114, 5, 90, 109, 112, 109, 113, 61, 90, 89, 117, 75, 67, 60, 57, 0, 0, 68, 68, 3, 89, 89, 4, 88, 101, 112, 104, 113, 0, 101, 69, 3, 0, 0, 0, 112, 0, 98, 0, 108, 2, 0, 61, 0, 89, 58, 88, 114, 96, 29, 112, 114, 69, 101, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 27: np.array([109, 4, 88, 114, 5, 90, 109, 112, 109, 113, 61, 90, 89, 117, 75, 67, 60, 57, 0, 0, 68, 68, 3, 89, 89, 4, 88, 101, 112, 104, 113, 0, 101, 69, 3, 0, 0, 0, 112, 0, 98, 0, 108, 2, 0, 61, 0, 89, 58, 88, 114, 96, 29, 112, 114, 69, 101, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 28: np.array([96, 116, 5, 68, 69, 104, 4, 69, 68, 69, 57, 100, 108, 67, 4, 104, 106, 58, 0, 66, 30, 69, 58, 100, 102, 104, 26, 0, 114, 0, 89, 116, 104, 0, 58, 0, 0, 91, 4, 61, 59, 88, 26, 67, 59, 36, 60, 0, 116, 108, 91, 0, 93, 56, 2, 104, 89, 4, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 29: np.array([96, 116, 5, 68, 69, 104, 4, 69, 68, 69, 57, 100, 108, 67, 4, 104, 106, 58, 0, 66, 30, 69, 58, 100, 102, 104, 26, 0, 114, 0, 89, 116, 104, 0, 58, 0, 0, 91, 4, 61, 59, 88, 26, 67, 59, 36, 60, 0, 116, 108, 91, 0, 93, 56, 2, 104, 89, 4, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 30: np.array([32, 113, 96, 106, 98, 0, 0, 113, 3, 61, 25, 0, 0, 0, 0, 96, 5, 27, 25, 0, 0, 0, 58, 4, 48, 69, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 31: np.array([32, 113, 96, 106, 98, 0, 0, 113, 3, 61, 25, 0, 0, 0, 0, 96, 5, 27, 25, 0, 0, 0, 58, 4, 48, 69, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 32: np.array([93, 0, 89, 0, 0, 2, 25, 4, 2, 56, 61, 16, 0, 61, 4, 59, 112, 5, 3, 0, 0, 117, 4, 24, 4, 106, 112, 58, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 33: np.array([93, 0, 89, 0, 0, 2, 25, 4, 2, 56, 61, 16, 0, 61, 4, 59, 112, 5, 3, 0, 0, 117, 4, 24, 4, 106, 112, 58, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 34: np.array([106, 100, 104, 29, 68, 100, 106, 100, 61, 106, 65, 64, 68, 102, 104, 0, 0, 60, 58, 0, 0, 104, 0, 0, 5, 2, 0, 59, 30, 59, 5, 0, 104, 5, 112, 0, 109, 0, 100, 0, 104, 0, 0, 0, 60, 0, 0, 0, 0, 4, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 35: np.array([106, 100, 104, 29, 68, 100, 106, 100, 61, 106, 65, 64, 68, 102, 104, 0, 0, 60, 58, 0, 0, 104, 0, 0, 5, 2, 0, 59, 30, 59, 5, 0, 104, 5, 112, 0, 109, 0, 100, 0, 104, 0, 0, 0, 60, 0, 0, 0, 0, 4, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 36: np.array([54, 4, 58, 0, 104, 60, 61, 0, 0, 28, 4, 4, 2, 5, 28, 0, 67, 4, 68, 2, 2, 4, 58, 61, 29, 69, 110, 0, 0, 0, 89, 40, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 37: np.array([54, 4, 58, 0, 104, 60, 61, 0, 0, 28, 4, 4, 2, 5, 28, 0, 67, 4, 68, 2, 2, 4, 58, 61, 29, 69, 110, 0, 0, 0, 89, 40, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 38: np.array([60, 60, 96, 102, 59, 59, 5, 116, 104, 0, 3, 60, 58, 5, 5, 100, 0, 105, 3, 0, 5, 0, 0, 65, 0, 2, 2, 4, 3, 56, 67, 0, 0, 2, 59, 100, 57, 0, 0, 0, 98, 3, 57, 2, 0, 57, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 39: np.array([60, 60, 96, 102, 59, 59, 5, 116, 104, 0, 3, 60, 58, 5, 5, 100, 0, 105, 3, 0, 5, 0, 0, 65, 0, 2, 2, 4, 3, 56, 67, 0, 0, 2, 59, 100, 57, 0, 0, 0, 98, 3, 57, 2, 0, 57, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 40: np.array([90, 106, 108, 68, 68, 110, 3, 68, 102, 100, 104, 57, 0, 4, 108, 68, 69, 0, 0, 0, 88, 108, 58, 101, 0, 2, 2, 112, 5, 74, 106, 88, 56, 104, 0, 60, 0, 1, 5, 101, 58, 2, 4, 0, 100, 0, 0, 113, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 41: np.array([90, 106, 108, 68, 68, 110, 3, 68, 102, 100, 104, 57, 0, 4, 108, 68, 69, 0, 0, 0, 88, 108, 58, 101, 0, 2, 2, 112, 5, 74, 106, 88, 56, 104, 0, 60, 0, 1, 5, 101, 58, 2, 4, 0, 100, 0, 0, 113, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 42: np.array([89, 3, 101, 2, 2, 100, 101, 4, 2, 29, 57, 58, 0, 0, 4, 5, 4, 0, 4, 40, 4, 66, 98, 60, 100, 5, 2, 90, 60, 2, 104, 58, 0, 5, 0, 0, 0, 68, 42, 68, 100, 61, 104, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 43: np.array([89, 3, 101, 2, 2, 100, 101, 4, 2, 29, 57, 58, 0, 0, 4, 5, 4, 0, 4, 40, 4, 66, 98, 60, 100, 5, 2, 90, 60, 2, 104, 58, 0, 5, 0, 0, 0, 68, 42, 68, 100, 61, 104, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 44: np.array([96, 96, 96, 101, 109, 3, 100, 106, 96, 66, 2, 0, 0, 106, 102, 104, 0, 100, 60, 68, 2, 0, 0, 2, 100, 104, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 78, 100, 56, 0, 64, 61, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 45: np.array([96, 96, 96, 101, 109, 3, 100, 106, 96, 66, 2, 0, 0, 106, 102, 104, 0, 100, 60, 68, 2, 0, 0, 2, 100, 104, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 78, 100, 56, 0, 64, 61, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 46: np.array([3, 3, 4, 96, 0, 61, 4, 40, 5, 59, 4, 58, 57, 29, 112, 4, 90, 58, 106, 113, 5, 2, 61, 106, 109, 2, 66, 56, 0, 58, 2, 0, 0, 0, 58, 0, 96, 0, 0, 0, 58, 0, 0, 0, 0, 2, 96, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 47: np.array([3, 3, 4, 96, 0, 61, 4, 40, 5, 59, 4, 58, 57, 29, 112, 4, 90, 58, 106, 113, 5, 2, 61, 106, 109, 2, 66, 56, 0, 58, 2, 0, 0, 0, 58, 0, 96, 0, 0, 0, 58, 0, 0, 0, 0, 2, 96, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 48: np.array([26, 69, 89, 27, 0, 112, 109, 100, 108, 1, 61, 2, 0, 60, 0, 69, 59, 0, 0, 61, 61, 2, 2, 61, 0, 68, 58, 0, 0, 28, 58, 4, 2, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 49: np.array([26, 69, 89, 27, 0, 112, 109, 100, 108, 1, 61, 2, 0, 60, 0, 69, 59, 0, 0, 61, 61, 2, 2, 61, 0, 68, 58, 0, 0, 28, 58, 4, 2, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])}
split_vals_dict = {0: np.array([0.232717499, 0.904545486, 0.577022016, 0.895591974, 0.585714519, 0.774999976, 0.224999994, 0.708333492, 0.713636518, 0.228758007, 0.75, 0.904545486, 0.222277999, 0.594117522, 0.283482015, 0.363179505, 0.196428508, 1.50000005e-06, 0.072474502, 0.242550492, 0.224999994, 0.633333504, 0.980740547, 0.316430986, 0.277227491, 0.999975502, 0.39338249, 0.999232531, 0.520270467, 0.563492537, 0.277604997, 0.82219851, 0.652561486, 0.0, 0.875, 0.2363635, 0.416666508, 0.968245983, 0.585714519, 0.0, 0.0, 0.0, 0.611111522, 0.916666508, 0.938094974, 0.0, 0.0703375041, 0.215277493, 0.895591974, 0.0, 0.980710983, 0.645591974, 0.484573007, 0.473715007, 0.645833492, 0.276190519, 0.784808517, 0.999991, 0.866071463, 0.181985497, 0.800000012, 0.275252521, 0.895591974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 1: np.array([0.232717499, 0.904545486, 0.577022016, 0.895591974, 0.585714519, 0.774999976, 0.224999994, 0.708333492, 0.713636518, 0.228758007, 0.75, 0.904545486, 0.222277999, 0.594117522, 0.283482015, 0.363179505, 0.196428508, 1.50000005e-06, 0.072474502, 0.242550492, 0.224999994, 0.633333504, 0.980740547, 0.316430986, 0.277227491, 0.999975502, 0.39338249, 0.999232531, 0.520270467, 0.563492537, 0.277604997, 0.82219851, 0.652561486, 0.0, 0.875, 0.2363635, 0.416666508, 0.968245983, 0.585714519, 0.0, 0.0, 0.0, 0.611111522, 0.916666508, 0.938094974, 0.0, 0.0703375041, 0.215277493, 0.895591974, 0.0, 0.980710983, 0.645591974, 0.484573007, 0.473715007, 0.645833492, 0.276190519, 0.784808517, 0.999991, 0.866071463, 0.181985497, 0.800000012, 0.275252521, 0.895591974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 2: np.array([0.645833492, 0.895591974, 0.78888905, 0.904545486, 0.298148006, 0.0477275029, 0.809090972, 0.4240385, 1.5, 0.354166508, 0.585714519, 0.99652952, 0.630681992, 0.873016, 0.509884477, 0.809090972, 0.8228755, 0.0168465003, 0.585714519, 0.0, 0.0, 0.765909493, 0.362852514, 0.877763987, 0.0669644997, 0.573214531, 0.514706016, 0.895591974, 0.479242504, 0.999741495, 0.38379699, 0.234313503, 0.894444466, 0.708333492, 0.886752009, 0.0, 0.995618999, 0.34166649, 0.620330989, 0.957862496, 0.91833353, 0.166666493, 0.2188835, 0.0, 0.145454496, 0.0, 0.291666508, 0.414285481, 0.472222, 0.956658006, 0.258928478, 0.562258482, 8.99999941e-06, 0.0, 0.266666502, 0.158333004, 0.737764478, 0.121428505, 0.204166502, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 3: np.array([0.645833492, 0.895591974, 0.78888905, 0.904545486, 0.298148006, 0.0477275029, 0.809090972, 0.4240385, 1.5, 0.354166508, 0.585714519, 0.99652952, 0.630681992, 0.873016, 0.509884477, 0.809090972, 0.8228755, 0.0168465003, 0.585714519, 0.0, 0.0, 0.765909493, 0.362852514, 0.877763987, 0.0669644997, 0.573214531, 0.514706016, 0.895591974, 0.479242504, 0.999741495, 0.38379699, 0.234313503, 0.894444466, 0.708333492, 0.886752009, 0.0, 0.995618999, 0.34166649, 0.620330989, 0.957862496, 0.91833353, 0.166666493, 0.2188835, 0.0, 0.145454496, 0.0, 0.291666508, 0.414285481, 0.472222, 0.956658006, 0.258928478, 0.562258482, 8.99999941e-06, 0.0, 0.266666502, 0.158333004, 0.737764478, 0.121428505, 0.204166502, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 4: np.array([0.414285481, 0.831244469, 0.895591974, 0.575054526, 0.633333504, 0.904545486, 0.313392997, 0.316985488, 0.686607003, 0.535714507, 0.5, 0.904545486, 0.535714507, 0.313725471, 0.339166522, 0.235082, 0.0327955, 0.949999988, 1.5, 0.230701506, 0.0, 0.725338459, 0.366666496, 0.999999523, 0.999073982, 0.126984, 0.281161487, 0.211111009, 0.452991009, 0.791666508, 0.0078344997, 0.986972988, 0.224999994, 0.998543024, 0.193749994, 0.643622518, 1.5, 0.387499988, 0.978945017, 1.5, 0.0, 0.0, 0.0, 0.231546998, 0.133928508, 0.37617898, 0.578632474, 0.969889998, 0.754999995, 0.0, 0.774999976, 0.0, 0.228758007, 0.348484486, 0.25357151, 0.0, 0.585714519, 0.998870015, 0.256578982, 0.0, 0.279440522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 5: np.array([0.414285481, 0.831244469, 0.895591974, 0.575054526, 0.633333504, 0.904545486, 0.313392997, 0.316985488, 0.686607003, 0.535714507, 0.5, 0.904545486, 0.535714507, 0.313725471, 0.339166522, 0.235082, 0.0327955, 0.949999988, 1.5, 0.230701506, 0.0, 0.725338459, 0.366666496, 0.999999523, 0.999073982, 0.126984, 0.281161487, 0.211111009, 0.452991009, 0.791666508, 0.0078344997, 0.986972988, 0.224999994, 0.998543024, 0.193749994, 0.643622518, 1.5, 0.387499988, 0.978945017, 1.5, 0.0, 0.0, 0.0, 0.231546998, 0.133928508, 0.37617898, 0.578632474, 0.969889998, 0.754999995, 0.0, 0.774999976, 0.0, 0.228758007, 0.348484486, 0.25357151, 0.0, 0.585714519, 0.998870015, 0.256578982, 0.0, 0.279440522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 6: np.array([0.554630041, 0.871171951, 0.895591974, 0.732143044, 0.309523493, 0.515640497, 0.343136996, 0.277777493, 0.449494481, 0.228758007, 1.5, 0.28914398, 0.554093957, 0.522727489, 0.9761765, 0.345133483, 0.354166508, 0.309018493, 0.119524002, 0.223179996, 0.412500024, 0.0693664998, 0.649999976, 0.207341, 0.131182492, 0.618407011, 0.585714519, 0.949999988, 0.641428471, 0.561249971, 0.390873015, 0.0, 0.0, 0.999248505, 0.100000001, 0.224999994, 0.999928951, 0.739542961, 0.999725461, 0.0, 0.0, 0.0, 0.0, 0.193195999, 0.287301481, 0.637983501, 0.661997497, 0.0, 0.999053478, 0.471101999, 6.50000038e-06, 0.585714519, 0.572948515, 0.928571463, 0.00922199991, 0.5438025, 0.0, 0.612500012, 0.0, 0.0, 0.0, 0.0, 0.279440522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 7: np.array([0.554630041, 0.871171951, 0.895591974, 0.732143044, 0.309523493, 0.515640497, 0.343136996, 0.277777493, 0.449494481, 0.228758007, 1.5, 0.28914398, 0.554093957, 0.522727489, 0.9761765, 0.345133483, 0.354166508, 0.309018493, 0.119524002, 0.223179996, 0.412500024, 0.0693664998, 0.649999976, 0.207341, 0.131182492, 0.618407011, 0.585714519, 0.949999988, 0.641428471, 0.561249971, 0.390873015, 0.0, 0.0, 0.999248505, 0.100000001, 0.224999994, 0.999928951, 0.739542961, 0.999725461, 0.0, 0.0, 0.0, 0.0, 0.193195999, 0.287301481, 0.637983501, 0.661997497, 0.0, 0.999053478, 0.471101999, 6.50000038e-06, 0.585714519, 0.572948515, 0.928571463, 0.00922199991, 0.5438025, 0.0, 0.612500012, 0.0, 0.0, 0.0, 0.0, 0.279440522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 8: np.array([0.895591974, 0.999530494, 0.320714504, 0.363179505, 0.653846502, 0.919459522, 0.339166522, 0.394444525, 0.731745958, 0.996953011, 0.188988, 0.440338999, 0.999999523, 0.394857496, 0.94689852, 0.316666484, 0.370342493, 0.514706016, 0.987805009, 0.999981523, 0.999907017, 0.64102602, 0.816666484, 0.944444537, 0.045408003, 0.937472999, 0.116882995, 1.5, 0.0474464968, 0.279440522, 0.56458354, 0.0, 0.0, 0.416666508, 0.438520998, 0.493902504, 0.714550495, 0.509819031, 0.979196012, 0.0, 0.0, 0.71111095, 0.416666508, 0.999957502, 0.0, 0.169540495, 0.256578982, 0.224999994, 0.283482015, 1.5, 0.956658006, 0.92206502, 0.812015533, 0.0, 0.0701975003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.310095996, 0.633333504, 4.99999999e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 9: np.array([0.895591974, 0.999530494, 0.320714504, 0.363179505, 0.653846502, 0.919459522, 0.339166522, 0.394444525, 0.731745958, 0.996953011, 0.188988, 0.440338999, 0.999999523, 0.394857496, 0.94689852, 0.316666484, 0.370342493, 0.514706016, 0.987805009, 0.999981523, 0.999907017, 0.64102602, 0.816666484, 0.944444537, 0.045408003, 0.937472999, 0.116882995, 1.5, 0.0474464968, 0.279440522, 0.56458354, 0.0, 0.0, 0.416666508, 0.438520998, 0.493902504, 0.714550495, 0.509819031, 0.979196012, 0.0, 0.0, 0.71111095, 0.416666508, 0.999957502, 0.0, 0.169540495, 0.256578982, 0.224999994, 0.283482015, 1.5, 0.956658006, 0.92206502, 0.812015533, 0.0, 0.0701975003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.310095996, 0.633333504, 4.99999999e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 10: np.array([0.91287899, 0.394444525, 0.774999976, 0.68838799, 0.883822501, 0.975000024, 0.271498501, 1.5, 0.261363506, 0.2366945, 0.708333492, 0.417636007, 0.999994516, 0.972461462, 0.535714507, 0.999953032, 0.379262984, 0.0, 0.0, 0.984259486, 1.5, 0.241279006, 0.369395494, 0.348076999, 0.633333504, 0.228789002, 0.0, 0.0, 0.928571463, 0.0, 0.0, 0.875, 0.791666508, 0.0, 0.5, 0.236725509, 0.181985497, 0.424620986, 0.999949515, 0.708333492, 0.522727489, 0.997568488, 0.895644546, 0.585714519, 0.0, 0.0, 0.0, 0.0, 0.377568007, 0.866071463, 0.0404080003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 11: np.array([0.91287899, 0.394444525, 0.774999976, 0.68838799, 0.883822501, 0.975000024, 0.271498501, 1.5, 0.261363506, 0.2366945, 0.708333492, 0.417636007, 0.999994516, 0.972461462, 0.535714507, 0.999953032, 0.379262984, 0.0, 0.0, 0.984259486, 1.5, 0.241279006, 0.369395494, 0.348076999, 0.633333504, 0.228789002, 0.0, 0.0, 0.928571463, 0.0, 0.0, 0.875, 0.791666508, 0.0, 0.5, 0.236725509, 0.181985497, 0.424620986, 0.999949515, 0.708333492, 0.522727489, 0.997568488, 0.895644546, 0.585714519, 0.0, 0.0, 0.0, 0.0, 0.377568007, 0.866071463, 0.0404080003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 12: np.array([0.751984, 0.976917982, 0.292856991, 0.1120665, 0.982381463, 0.472222, 0.508782983, 0.0955249965, 0.895591974, 0.354166508, 1.5, 0.999879003, 0.997573972, 0.997877002, 0.25, 0.0, 0.0, 0.228758007, 0.0, 0.464285493, 1.5, 0.99998951, 0.999840498, 0.409722, 0.999993503, 0.733333468, 0.918845534, 1.5, 0.676209509, 0.242646992, 0.179144502, 0.0, 0.336879492, 0.0, 0.469596982, 0.527778029, 0.478636503, 0.983954012, 1.5, 0.297059, 0.999942541, 0.0, 0.0, 1.5, 0.0, 0.0, 0.128127992, 0.370878994, 0.0, 0.189494491, 0.236111, 0.191918999, 0.0, 0.0, 0.0, 0.0, 0.939975977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 13: np.array([0.751984, 0.976917982, 0.292856991, 0.1120665, 0.982381463, 0.472222, 0.508782983, 0.0955249965, 0.895591974, 0.354166508, 1.5, 0.999879003, 0.997573972, 0.997877002, 0.25, 0.0, 0.0, 0.228758007, 0.0, 0.464285493, 1.5, 0.99998951, 0.999840498, 0.409722, 0.999993503, 0.733333468, 0.918845534, 1.5, 0.676209509, 0.242646992, 0.179144502, 0.0, 0.336879492, 0.0, 0.469596982, 0.527778029, 0.478636503, 0.983954012, 1.5, 0.297059, 0.999942541, 0.0, 0.0, 1.5, 0.0, 0.0, 0.128127992, 0.370878994, 0.0, 0.189494491, 0.236111, 0.191918999, 0.0, 0.0, 0.0, 0.0, 0.939975977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 14: np.array([0.809090972, 0.285947978, 0.603606462, 0.0710785016, 0.999084473, 0.871171951, 0.624094009, 0.120605998, 0.707143009, 0.449999988, 0.577777982, 0.096910499, 0.472953022, 0.99999845, 0.872467518, 0.0, 0.150000006, 0.999986529, 0.9000265, 0.0, 0.303846002, 0.866071463, 0.527778029, 0.99891001, 0.232323006, 0.99437952, 0.526013494, 0.997385025, 0.153009996, 0.693979979, 0.897697508, 0.640178502, 0.449999988, 0.289915979, 0.697826028, 7.49999981e-06, 0.940971971, 0.0, 8.49999997e-05, 0.255410999, 0.0, 0.0, 0.921538472, 0.366666496, 0.387141496, 0.026671499, 0.956658006, 0.43739152, 0.0, 0.997244, 0.999078989, 0.390567005, 0.558441997, 0.387499988, 1.5, 0.0127395, 0.25, 0.343136996, 0.353571504, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 15: np.array([0.809090972, 0.285947978, 0.603606462, 0.0710785016, 0.999084473, 0.871171951, 0.624094009, 0.120605998, 0.707143009, 0.449999988, 0.577777982, 0.096910499, 0.472953022, 0.99999845, 0.872467518, 0.0, 0.150000006, 0.999986529, 0.9000265, 0.0, 0.303846002, 0.866071463, 0.527778029, 0.99891001, 0.232323006, 0.99437952, 0.526013494, 0.997385025, 0.153009996, 0.693979979, 0.897697508, 0.640178502, 0.449999988, 0.289915979, 0.697826028, 7.49999981e-06, 0.940971971, 0.0, 8.49999997e-05, 0.255410999, 0.0, 0.0, 0.921538472, 0.366666496, 0.387141496, 0.026671499, 0.956658006, 0.43739152, 0.0, 0.997244, 0.999078989, 0.390567005, 0.558441997, 0.387499988, 1.5, 0.0127395, 0.25, 0.343136996, 0.353571504, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 16: np.array([0.035292998, 0.0197325014, 0.895591974, 0.457979977, 0.999879003, 0.75582695, 0.663636506, 0.998025537, 0.065555498, 0.0, 1.5, 0.787243009, 0.999944448, 0.352778018, 0.183014497, 0.904545486, 0.202484995, 0.831244469, 0.219246, 0.929629505, 0.677783012, 0.606601954, 0.438809991, 0.99763, 0.91287899, 0.0, 0.0, 0.369940519, 0.567260027, 0.0, 0.0, 0.0, 0.0, 4.99999999e-07, 0.0, 0.214971498, 0.916666508, 0.606951952, 0.0339080021, 0.0, 1.5, 0.449494481, 1.5, 0.391355008, 0.803045511, 0.997159481, 0.464285493, 0.848076999, 0.871171951, 0.381962508, 0.85355401, 0.543838501, 0.550000012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 17: np.array([0.035292998, 0.0197325014, 0.895591974, 0.457979977, 0.999879003, 0.75582695, 0.663636506, 0.998025537, 0.065555498, 0.0, 1.5, 0.787243009, 0.999944448, 0.352778018, 0.183014497, 0.904545486, 0.202484995, 0.831244469, 0.219246, 0.929629505, 0.677783012, 0.606601954, 0.438809991, 0.99763, 0.91287899, 0.0, 0.0, 0.369940519, 0.567260027, 0.0, 0.0, 0.0, 0.0, 4.99999999e-07, 0.0, 0.214971498, 0.916666508, 0.606951952, 0.0339080021, 0.0, 1.5, 0.449494481, 1.5, 0.391355008, 0.803045511, 0.997159481, 0.464285493, 0.848076999, 0.871171951, 0.381962508, 0.85355401, 0.543838501, 0.550000012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 18: np.array([0.949999988, 0.999541521, 0.871171951, 0.655501485, 0.269697011, 0.186012, 0.0, 0.873333454, 0.819805503, 0.550518036, 0.999632478, 0.127717495, 0.532562971, 1.5, 0.166666508, 0.7473405, 0.836666465, 0.183333501, 0.473505497, 0.999614477, 0.99998951, 0.84523797, 0.147916496, 0.289198518, 0.0, 1.5, 0.343136996, 0.0, 0.999629498, 0.875717521, 0.370878994, 0.0, 0.406592995, 0.764245033, 0.0, 0.0, 0.0, 0.563492537, 0.772321522, 0.734013498, 0.999991536, 0.0, 0.0, 0.0, 0.147515506, 0.274747491, 0.352983505, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 19: np.array([0.949999988, 0.999541521, 0.871171951, 0.655501485, 0.269697011, 0.186012, 0.0, 0.873333454, 0.819805503, 0.550518036, 0.999632478, 0.127717495, 0.532562971, 1.5, 0.166666508, 0.7473405, 0.836666465, 0.183333501, 0.473505497, 0.999614477, 0.99998951, 0.84523797, 0.147916496, 0.289198518, 0.0, 1.5, 0.343136996, 0.0, 0.999629498, 0.875717521, 0.370878994, 0.0, 0.406592995, 0.764245033, 0.0, 0.0, 0.0, 0.563492537, 0.772321522, 0.734013498, 0.999991536, 0.0, 0.0, 0.0, 0.147515506, 0.274747491, 0.352983505, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 20: np.array([0.866071463, 0.673573017, 0.999642015, 0.348845482, 0.825757504, 0.0747210011, 0.245689496, 0.015749, 0.387426019, 0.0, 0.0, 0.233461499, 0.313392997, 0.0, 0.270467997, 0.991650999, 0.449494481, 0.238094985, 0.703606009, 0.191096991, 0.995620966, 0.987805009, 0.354166508, 0.0, 0.267857015, 0.0, 0.0, 0.116962999, 0.0, 0.0, 0.514719009, 0.457737982, 0.997459531, 0.0, 0.0, 0.982827008, 0.0, 0.999984503, 0.894441485, 0.218254, 0.369395494, 0.895591974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 21: np.array([0.866071463, 0.673573017, 0.999642015, 0.348845482, 0.825757504, 0.0747210011, 0.245689496, 0.015749, 0.387426019, 0.0, 0.0, 0.233461499, 0.313392997, 0.0, 0.270467997, 0.991650999, 0.449494481, 0.238094985, 0.703606009, 0.191096991, 0.995620966, 0.987805009, 0.354166508, 0.0, 0.267857015, 0.0, 0.0, 0.116962999, 0.0, 0.0, 0.514719009, 0.457737982, 0.997459531, 0.0, 0.0, 0.982827008, 0.0, 0.999984503, 0.894441485, 0.218254, 0.369395494, 0.895591974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 22: np.array([0.566666484, 0.414285481, 0.860232472, 0.309523493, 0.0, 0.718623519, 0.914590001, 0.0, 0.0, 0.112373501, 0.0137015004, 0.74246347, 0.136700496, 0.707825005, 0.174079001, 0.309523493, 0.772078037, 0.0, 0.643077016, 0.445626497, 0.957862496, 0.525794029, 0.0, 0.134664997, 0.267857015, 0.0, 0.0, 0.638114452, 0.269697011, 0.0, 0.0258335005, 0.0, 0.999036491, 0.406417489, 0.585714519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 23: np.array([0.566666484, 0.414285481, 0.860232472, 0.309523493, 0.0, 0.718623519, 0.914590001, 0.0, 0.0, 0.112373501, 0.0137015004, 0.74246347, 0.136700496, 0.707825005, 0.174079001, 0.309523493, 0.772078037, 0.0, 0.643077016, 0.445626497, 0.957862496, 0.525794029, 0.0, 0.134664997, 0.267857015, 0.0, 0.0, 0.638114452, 0.269697011, 0.0, 0.0258335005, 0.0, 0.999036491, 0.406417489, 0.585714519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 24: np.array([0.91287899, 1.5, 0.493403018, 0.183501497, 0.320436507, 0.303308994, 0.712698519, 0.997597456, 0.510714531, 0.0801279992, 0.449494481, 0.376825988, 0.995944977, 0.350970984, 0.730249524, 0.0, 0.0, 0.999974966, 0.0, 0.215838492, 0.875, 0.647042036, 0.414285481, 0.0, 0.0, 0.0, 0.0, 0.344951987, 0.25, 1.5, 0.999943495, 0.0, 0.0, 0.0, 0.511242032, 0.0, 0.0896684974, 0.181985497, 0.563492537, 0.928205013, 0.980185032, 0.0, 0.994138002, 0.0, 0.0, 0.0, 0.0, 0.999949455, 0.958333492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 25: np.array([0.91287899, 1.5, 0.493403018, 0.183501497, 0.320436507, 0.303308994, 0.712698519, 0.997597456, 0.510714531, 0.0801279992, 0.449494481, 0.376825988, 0.995944977, 0.350970984, 0.730249524, 0.0, 0.0, 0.999974966, 0.0, 0.215838492, 0.875, 0.647042036, 0.414285481, 0.0, 0.0, 0.0, 0.0, 0.344951987, 0.25, 1.5, 0.999943495, 0.0, 0.0, 0.0, 0.511242032, 0.0, 0.0896684974, 0.181985497, 0.563492537, 0.928205013, 0.980185032, 0.0, 0.994138002, 0.0, 0.0, 0.0, 0.0, 0.999949455, 0.958333492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 26: np.array([0.464102507, 0.514719009, 0.00641050003, 0.414216012, 0.556623995, 0.0930735022, 0.516666532, 0.989043951, 0.436507493, 0.386752009, 0.509339511, 0.0694444999, 0.522727489, 0.999984503, 0.690476537, 0.397736996, 0.330303013, 0.816666484, 0.0, 0.0, 0.364744991, 0.415230006, 0.741666496, 0.25, 0.390151501, 0.102631502, 8.50000015e-06, 0.422222018, 0.998442531, 0.993045509, 0.59166652, 0.0, 0.472222, 0.326292992, 0.0162700005, 0.0, 0.0, 0.0, 0.999791503, 0.0, 0.267857015, 0.0, 0.983219028, 0.645833492, 0.0, 0.784855962, 0.0, 0.435606003, 0.755872965, 6.50000038e-06, 0.433312476, 0.645591974, 0.0674244985, 0.997473955, 0.343136996, 0.387112498, 0.527778029, 0.268415004, 0.667593002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 27: np.array([0.464102507, 0.514719009, 0.00641050003, 0.414216012, 0.556623995, 0.0930735022, 0.516666532, 0.989043951, 0.436507493, 0.386752009, 0.509339511, 0.0694444999, 0.522727489, 0.999984503, 0.690476537, 0.397736996, 0.330303013, 0.816666484, 0.0, 0.0, 0.364744991, 0.415230006, 0.741666496, 0.25, 0.390151501, 0.102631502, 8.50000015e-06, 0.422222018, 0.998442531, 0.993045509, 0.59166652, 0.0, 0.472222, 0.326292992, 0.0162700005, 0.0, 0.0, 0.0, 0.999791503, 0.0, 0.267857015, 0.0, 0.983219028, 0.645833492, 0.0, 0.784855962, 0.0, 0.435606003, 0.755872965, 6.50000038e-06, 0.433312476, 0.645591974, 0.0674244985, 0.997473955, 0.343136996, 0.387112498, 0.527778029, 0.268415004, 0.667593002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 28: np.array([0.895591974, 0.999651551, 0.311422497, 0.465316504, 0.490381002, 0.999961495, 0.480740488, 0.313113004, 0.513899982, 0.382843018, 0.483333498, 0.997195482, 0.999990463, 0.6045205, 0.505318999, 0.98607254, 0.207143009, 0.487887502, 0.690476537, 0.546142519, 1.5, 0.984375, 0.886309505, 0.991719007, 0.370878994, 0.999979496, 0.919642985, 0.0, 0.34166649, 0.0, 0.564393997, 0.941529036, 0.992749989, 0.0, 0.323703498, 0.0, 0.0, 1.5, 0.921052456, 0.221404999, 0.164481491, 0.831244469, 0.396155, 0.887301505, 0.496077478, 0.345804513, 0.950609982, 0.0, 0.999943495, 0.981153965, 1.5, 0.0, 0.663636506, 0.816666484, 0.186012, 0.999953032, 0.809090972, 0.729020953, 0.957862496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 29: np.array([0.895591974, 0.999651551, 0.311422497, 0.465316504, 0.490381002, 0.999961495, 0.480740488, 0.313113004, 0.513899982, 0.382843018, 0.483333498, 0.997195482, 0.999990463, 0.6045205, 0.505318999, 0.98607254, 0.207143009, 0.487887502, 0.690476537, 0.546142519, 1.5, 0.984375, 0.886309505, 0.991719007, 0.370878994, 0.999979496, 0.919642985, 0.0, 0.34166649, 0.0, 0.564393997, 0.941529036, 0.992749989, 0.0, 0.323703498, 0.0, 0.0, 1.5, 0.921052456, 0.221404999, 0.164481491, 0.831244469, 0.396155, 0.887301505, 0.496077478, 0.345804513, 0.950609982, 0.0, 0.999943495, 0.981153965, 1.5, 0.0, 0.663636506, 0.816666484, 0.186012, 0.999953032, 0.809090972, 0.729020953, 0.957862496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 30: np.array([0.85164845, 0.386752009, 0.113095, 0.231283501, 0.211111009, 0.0, 0.0, 0.320512474, 0.28619051, 0.282291502, 0.154762, 0.0, 0.0, 0.0, 0.0, 3.04999994e-05, 0.439337999, 0.0307030007, 0.183333501, 0.0, 0.0, 0.0, 0.518483043, 0.102631502, 0.976264477, 0.403740495, 0.566666484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 31: np.array([0.85164845, 0.386752009, 0.113095, 0.231283501, 0.211111009, 0.0, 0.0, 0.320512474, 0.28619051, 0.282291502, 0.154762, 0.0, 0.0, 0.0, 0.0, 3.04999994e-05, 0.439337999, 0.0307030007, 0.183333501, 0.0, 0.0, 0.0, 0.518483043, 0.102631502, 0.976264477, 0.403740495, 0.566666484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 32: np.array([0.713636518, 0.916666508, 0.91287899, 0.0, 0.0, 0.0577379987, 0.944444537, 0.0465370007, 0.0917519927, 0.585714519, 0.912500024, 0.894441485, 0.0, 0.63213551, 0.0983870029, 0.535363972, 0.999994516, 0.026013501, 0.0130719999, 0.0, 0.0, 0.999906003, 0.134183004, 0.816666484, 0.134233996, 0.228758007, 0.997188985, 0.856904984, 0.0, 0.0, 0.0, 0.0, 0.190908998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 33: np.array([0.713636518, 0.916666508, 0.91287899, 0.0, 0.0, 0.0577379987, 0.944444537, 0.0465370007, 0.0917519927, 0.585714519, 0.912500024, 0.894441485, 0.0, 0.63213551, 0.0983870029, 0.535363972, 0.999994516, 0.026013501, 0.0130719999, 0.0, 0.0, 0.999906003, 0.134183004, 0.816666484, 0.134233996, 0.228758007, 0.997188985, 0.856904984, 0.0, 0.0, 0.0, 0.0, 0.190908998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 34: np.array([0.2366945, 0.998865008, 0.995086491, 0.393182009, 0.559028029, 0.993825555, 0.269697011, 0.988804996, 0.360015512, 0.218254, 0.84523797, 0.527778029, 0.565909028, 0.215838492, 0.995998979, 0.791666508, 0.0, 0.304716498, 0.476851493, 0.0, 0.0, 0.996778011, 0.0, 0.0, 0.492424011, 0.616667032, 0.0, 0.412132502, 1.5, 0.648786545, 0.64644599, 0.0, 0.984818518, 0.234431997, 0.998756051, 0.0, 0.707143009, 0.0, 0.999715447, 0.0, 0.993658483, 0.0, 0.0, 0.0, 0.549901009, 0.0, 0.0, 0.0, 0.0, 0.578362465, 0.998116016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 35: np.array([0.2366945, 0.998865008, 0.995086491, 0.393182009, 0.559028029, 0.993825555, 0.269697011, 0.988804996, 0.360015512, 0.218254, 0.84523797, 0.527778029, 0.565909028, 0.215838492, 0.995998979, 0.791666508, 0.0, 0.304716498, 0.476851493, 0.0, 0.0, 0.996778011, 0.0, 0.0, 0.492424011, 0.616667032, 0.0, 0.412132502, 1.5, 0.648786545, 0.64644599, 0.0, 0.984818518, 0.234431997, 0.998756051, 0.0, 0.707143009, 0.0, 0.999715447, 0.0, 0.993658483, 0.0, 0.0, 0.0, 0.549901009, 0.0, 0.0, 0.0, 0.0, 0.578362465, 0.998116016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 36: np.array([1.5, 0.183501497, 0.916980028, 0.0, 0.979179978, 0.893236995, 0.915780485, 0.0, 0.0, 0.666395485, 0.106203005, 0.131182492, 0.142039001, 0.145644009, 0.729020953, 0.0, 0.870833516, 0.102631502, 0.896634519, 0.115625001, 0.190136001, 0.301163018, 0.696816981, 0.775252521, 0.741338015, 0.881652474, 0.390391499, 0.0, 0.0, 0.0, 0.572727501, 0.863179505, 0.0, 0.171693504, 0.205902994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 37: np.array([1.5, 0.183501497, 0.916980028, 0.0, 0.979179978, 0.893236995, 0.915780485, 0.0, 0.0, 0.666395485, 0.106203005, 0.131182492, 0.142039001, 0.145644009, 0.729020953, 0.0, 0.870833516, 0.102631502, 0.896634519, 0.115625001, 0.190136001, 0.301163018, 0.696816981, 0.775252521, 0.741338015, 0.881652474, 0.390391499, 0.0, 0.0, 0.0, 0.572727501, 0.863179505, 0.0, 0.171693504, 0.205902994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 38: np.array([0.469069004, 0.457737982, 0.895591974, 0.184659004, 0.346837997, 0.320046008, 0.0493905023, 0.999974489, 0.999773026, 0.0, 0.316483498, 0.513899982, 0.514243484, 0.026671499, 0.0705979988, 0.991803527, 0.875, 0.472222, 0.360652983, 0.0, 0.242646992, 0.0, 0.0, 0.292856991, 0.873016, 0.309565485, 0.158680499, 0.179144502, 0.136700496, 0.236111, 0.60769248, 0.0, 0.0, 0.641666532, 0.143650502, 0.999999523, 0.133928508, 0.0, 0.0, 0.0, 0.267857015, 0.333638489, 0.630681992, 0.236678004, 0.0, 0.954545498, 0.29795, 0.248611495, 0.0, 0.364286005, 0.358752996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 39: np.array([0.469069004, 0.457737982, 0.895591974, 0.184659004, 0.346837997, 0.320046008, 0.0493905023, 0.999974489, 0.999773026, 0.0, 0.316483498, 0.513899982, 0.514243484, 0.026671499, 0.0705979988, 0.991803527, 0.875, 0.472222, 0.360652983, 0.0, 0.242646992, 0.0, 0.0, 0.292856991, 0.873016, 0.309565485, 0.158680499, 0.179144502, 0.136700496, 0.236111, 0.60769248, 0.0, 0.0, 0.641666532, 0.143650502, 0.999999523, 0.133928508, 0.0, 0.0, 0.0, 0.267857015, 0.333638489, 0.630681992, 0.236678004, 0.0, 0.954545498, 0.29795, 0.248611495, 0.0, 0.364286005, 0.358752996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 40: np.array([0.723809481, 0.310095996, 0.999215007, 0.94519496, 0.942016482, 0.398083985, 0.0180709995, 0.648398519, 0.258333504, 0.993831038, 0.999921501, 0.894444466, 0.0, 0.229020998, 0.999397993, 0.522233009, 0.762531519, 0.0, 0.0, 0.0, 4.99999999e-07, 0.989442468, 0.801282048, 0.683333516, 0.449999988, 0.0858840048, 0.227316007, 0.999256492, 0.295206994, 0.708333492, 0.279220521, 4.99999999e-07, 0.763889015, 0.999889016, 0.0, 0.782516956, 0.0, 0.585714519, 0.119429499, 0.605555534, 0.506713986, 0.334693491, 0.482119977, 0.0, 0.999931514, 0.0, 0.0, 0.613247991, 0.0, 0.895591974, 0.633333504, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 41: np.array([0.723809481, 0.310095996, 0.999215007, 0.94519496, 0.942016482, 0.398083985, 0.0180709995, 0.648398519, 0.258333504, 0.993831038, 0.999921501, 0.894444466, 0.0, 0.229020998, 0.999397993, 0.522233009, 0.762531519, 0.0, 0.0, 0.0, 4.99999999e-07, 0.989442468, 0.801282048, 0.683333516, 0.449999988, 0.0858840048, 0.227316007, 0.999256492, 0.295206994, 0.708333492, 0.279220521, 4.99999999e-07, 0.763889015, 0.999889016, 0.0, 0.782516956, 0.0, 0.585714519, 0.119429499, 0.605555534, 0.506713986, 0.334693491, 0.482119977, 0.0, 0.999931514, 0.0, 0.0, 0.613247991, 0.0, 0.895591974, 0.633333504, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 42: np.array([0.904545486, 0.284807503, 0.618055463, 0.240094006, 0.411706001, 0.999879003, 0.763889015, 0.191392004, 0.245360002, 0.591246963, 0.269697011, 0.769464016, 0.0, 0.0, 0.164728999, 0.0289914999, 0.201851994, 0.0, 0.492424011, 0.863179505, 0.264912486, 0.599768519, 0.464285493, 0.462476492, 0.997426033, 0.129166499, 0.205357, 0.102631502, 0.579796016, 0.16198951, 0.99990797, 0.790343046, 0.0, 0.404545486, 0.0, 0.0, 0.0, 0.324662, 0.607143044, 0.674709499, 0.999397993, 0.160882503, 0.998861492, 0.0, 0.0, 0.0, 0.0, 0.199206501, 0.191392004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 43: np.array([0.904545486, 0.284807503, 0.618055463, 0.240094006, 0.411706001, 0.999879003, 0.763889015, 0.191392004, 0.245360002, 0.591246963, 0.269697011, 0.769464016, 0.0, 0.0, 0.164728999, 0.0289914999, 0.201851994, 0.0, 0.492424011, 0.863179505, 0.264912486, 0.599768519, 0.464285493, 0.462476492, 0.997426033, 0.129166499, 0.205357, 0.102631502, 0.579796016, 0.16198951, 0.99990797, 0.790343046, 0.0, 0.404545486, 0.0, 0.0, 0.0, 0.324662, 0.607143044, 0.674709499, 0.999397993, 0.160882503, 0.998861492, 0.0, 0.0, 0.0, 0.0, 0.199206501, 0.191392004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 44: np.array([0.0606620014, 0.0152685, 0.0690480024, 0.472222, 0.616439998, 0.341269493, 0.997298002, 0.258333504, 0.00985250063, 0.551302493, 0.507143021, 0.0, 0.0, 0.184659004, 0.205263004, 0.99457252, 0.0, 0.999369502, 0.397916496, 0.559558034, 0.175462991, 0.0, 0.0, 0.811253488, 0.995769024, 0.994921505, 0.872283995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.974727035, 1.5, 0.995067954, 0.585714519, 0.0, 0.690476537, 0.242395997, 0.281746, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 45: np.array([0.0606620014, 0.0152685, 0.0690480024, 0.472222, 0.616439998, 0.341269493, 0.997298002, 0.258333504, 0.00985250063, 0.551302493, 0.507143021, 0.0, 0.0, 0.184659004, 0.205263004, 0.99457252, 0.0, 0.999369502, 0.397916496, 0.559558034, 0.175462991, 0.0, 0.0, 0.811253488, 0.995769024, 0.994921505, 0.872283995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.974727035, 1.5, 0.995067954, 0.585714519, 0.0, 0.690476537, 0.242395997, 0.281746, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 46: np.array([0.630952001, 0.612182975, 0.587595999, 0.895591974, 0.0, 0.691392004, 0.634848475, 0.863179505, 0.313392997, 0.256578982, 0.480740488, 0.560930967, 0.866071463, 0.336879492, 0.998503506, 0.158492997, 0.585714519, 0.294318497, 0.181985497, 0.763889015, 0.520869493, 0.745370507, 0.718623519, 0.345238, 0.440972, 0.343700498, 0.81101203, 0.683333516, 0.535714507, 0.913187027, 0.182900488, 0.0, 0.0, 0.0, 0.363247991, 0.0, 0.0550595, 0.0, 0.0, 0.0, 0.815145493, 0.0, 0.0, 0.0, 0.0, 0.720899463, 0.291666508, 0.0, 0.353571504, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 47: np.array([0.630952001, 0.612182975, 0.587595999, 0.895591974, 0.0, 0.691392004, 0.634848475, 0.863179505, 0.313392997, 0.256578982, 0.480740488, 0.560930967, 0.866071463, 0.336879492, 0.998503506, 0.158492997, 0.585714519, 0.294318497, 0.181985497, 0.763889015, 0.520869493, 0.745370507, 0.718623519, 0.345238, 0.440972, 0.343700498, 0.81101203, 0.683333516, 0.535714507, 0.913187027, 0.182900488, 0.0, 0.0, 0.0, 0.363247991, 0.0, 0.0550595, 0.0, 0.0, 0.0, 0.815145493, 0.0, 0.0, 0.0, 0.0, 0.720899463, 0.291666508, 0.0, 0.353571504, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 48: np.array([0.499350488, 0.880475998, 0.871171951, 0.0307030007, 0.0, 0.980185032, 0.78888905, 0.998975992, 0.997912526, 0.224999994, 0.672901988, 0.198696494, 0.0, 0.528342485, 0.0, 0.522233009, 0.426021516, 0.0, 0.0, 0.63944447, 0.747727513, 0.121648505, 0.204880998, 0.186342508, 0.0, 0.336021483, 0.594097018, 0.0, 0.0, 0.395651996, 0.709354043, 0.420203984, 0.56299603, 0.113248006, 0.0, 0.0, 0.0645834953, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 49: np.array([0.499350488, 0.880475998, 0.871171951, 0.0307030007, 0.0, 0.980185032, 0.78888905, 0.998975992, 0.997912526, 0.224999994, 0.672901988, 0.198696494, 0.0, 0.528342485, 0.0, 0.522233009, 0.426021516, 0.0, 0.0, 0.63944447, 0.747727513, 0.121648505, 0.204880998, 0.186342508, 0.0, 0.336021483, 0.594097018, 0.0, 0.0, 0.395651996, 0.709354043, 0.420203984, 0.56299603, 0.113248006, 0.0, 0.0, 0.0645834953, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])}


class PredictorError(Exception):

    def __init__(self, msg, code):
        self.msg = msg
        self.code = code

    def __str__(self):
        return self.msg

def __convert(cell):
    value = str(cell)
    try:
        result = int(value)
        return result
    except ValueError:
        try:
            result = float(value)
            if math.isnan(result):
                raise PredictorError('NaN value found. Aborting.', code=1)
            return result
        except ValueError:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            return result
        except Exception as e:
            raise e


def __get_key(val, dictionary):
    if dictionary == {}:
        return val
    for key, value in dictionary.items():
        if val == value:
            return key
    if val not in dictionary.values():
        raise PredictorError(f"Label {val} key does not exist", code=2)


def __confusion_matrix(y_true, y_pred, json):
    stats = {}
    labels = np.array(list(mapping.keys()))
    sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
    for class_i in range(n_classes):
        class_i_label = __get_key(class_i, mapping)
        stats[int(class_i)] = {}
        class_i_indices = np.argwhere(y_true == class_i_label)
        not_class_i_indices = np.argwhere(y_true != class_i_label)
        # None represents N/A in this case
        stats[int(class_i)]['TP'] = TP = int(np.sum(y_pred[class_i_indices] == class_i_label)) if class_i_indices.size > 0 else None
        stats[int(class_i)]['FN'] = FN = int(np.sum(y_pred[class_i_indices] != class_i_label)) if class_i_indices.size > 0 else None
        stats[int(class_i)]['TN'] = TN = int(np.sum(y_pred[not_class_i_indices] != class_i_label)) if not_class_i_indices.size > 0 else None
        stats[int(class_i)]['FP'] = FP = int(np.sum(y_pred[not_class_i_indices] == class_i_label)) if not_class_i_indices.size > 0 else None
        if TP is None or FN is None or (TP + FN == 0):
            stats[int(class_i)]['TPR'] = None
        else:
            stats[int(class_i)]['TPR'] = (TP / (TP + FN))
        if TN is None or FP is None or (TN + FP == 0):
            stats[int(class_i)]['TNR'] = None
        else:
            stats[int(class_i)]['TNR'] = (TN / (TN + FP))
        if TP is None or FP is None or (TP + FP == 0):
            stats[int(class_i)]['PPV'] = None
        else:
            stats[int(class_i)]['PPV'] = (TP / (TP + FP))
        if TN is None or FN is None or (TN + FN == 0):
            stats[int(class_i)]['NPV'] = None
        else:
            stats[int(class_i)]['NPV'] = (TN / (TN + FN))
        if TP is None or FP is None or FN is None or (TP + FP + FN == 0):
            stats[int(class_i)]['F1'] = None
        else:
            stats[int(class_i)]['F1'] = ((2 * TP) / (2 * TP + FP + FN))
        if TP is None or FP is None or FN is None or (TP + FP + FN == 0):
            stats[int(class_i)]['TS'] = None
        else:
            stats[int(class_i)]['TS'] = (TP / (TP + FP + FN))

    if not report_cmat:
        return np.array([]), stats

    label_to_ind = {label: i for i, label in enumerate(labels)}
    y_pred = np.array([label_to_ind.get(x, n_classes + 1) for x in y_pred])
    y_true = np.array([label_to_ind.get(x, n_classes + 1) for x in y_true])

    ind = np.logical_and(y_pred < n_classes, y_true < n_classes)
    y_pred = y_pred[ind]
    y_true = y_true[ind]
    sample_weight = sample_weight[ind]

    cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_classes, n_classes), dtype=np.int64).toarray()
    with np.errstate(all='ignore'):
        cm = np.nan_to_num(cm)

    return cm, stats


def __preprocess_and_clean_in_memory(arr):
    clean_arr = np.zeros((len(arr), len(important_idxs)))
    for i, row in enumerate(arr):
        try:
            row_used_cols_only = [row[i] for i in important_idxs]
        except IndexError:
            error_str = f"The input has shape ({len(arr)}, {len(row)}) but the expected shape is (*, {len(ignorecolumns) + len(important_idxs)})."
            if len(arr) == num_attr and len(arr[0]) != num_attr:
                error_str += "\n\nNote: You may have passed an input directly to 'preprocess_and_clean_in_memory' or 'predict_in_memory' "
                error_str += "rather than as an element of a list. Make sure that even single instances "
                error_str += "are enclosed in a list. Example: predict_in_memory(0) is invalid but "
                error_str += "predict_in_memory([0]) is valid."
            raise PredictorError(error_str, 3)
        clean_arr[i] = [float(__convert(field)) for field in row_used_cols_only]
    return clean_arr


def __evaluate_tree(xs, split_vals, split_feats, right_children, logits):
    if xs is None:
        xs = np.frombuffer(var_dict['X']).reshape(var_dict['X_shape'])

    current_node_per_row = np.zeros(xs.shape[0]).astype('int')
    values = np.empty(xs.shape[0])
    values.fill(np.nan)

    while np.isnan(values).any():

        row_idxs_at_leaf = np.argwhere(np.logical_and(right_children[current_node_per_row] == -1, np.isnan(values))).reshape(-1)
        row_idxs_at_branch = np.argwhere(right_children[current_node_per_row] != -1).reshape(-1)

        if row_idxs_at_leaf.shape[0] > 0:

            values[row_idxs_at_leaf] = logits[current_node_per_row[row_idxs_at_leaf]].reshape(-1)
            current_node_per_row[row_idxs_at_leaf] = -1

        if row_idxs_at_branch.shape[0] > 0:

            split_values_per_row = split_vals[current_node_per_row[row_idxs_at_branch]].astype('float64')
            split_features_per_row = split_feats[current_node_per_row[row_idxs_at_branch]].astype('int')
            feature_val_per_row = xs[row_idxs_at_branch, split_features_per_row].reshape(-1)

            branch_nodes = current_node_per_row[row_idxs_at_branch]
            current_node_per_row[row_idxs_at_branch] = np.where(feature_val_per_row < split_values_per_row,
                                                                right_children[branch_nodes].astype('int'),
                                                                (right_children[branch_nodes] + 1).astype('int'))

    return values


def __build_logit_func(n_trees, clss):

    def __logit_func(xs, serial, data_shape, pool=None):
        if serial:
            sum_of_leaf_values = np.zeros(xs.shape[0])
            for booster_index in range(clss, n_trees, n_classes):
                sum_of_leaf_values += __evaluate_tree(
                    xs, split_vals_dict[booster_index], split_feats_dict[booster_index],
                    right_children_dict[booster_index], logits_dict[booster_index])
        else:
            sum_of_leaf_values = np.sum(
                list(pool.starmap(__evaluate_tree,
                                  [(None, split_vals_dict[booster_index], split_feats_dict[booster_index],
                                    right_children_dict[booster_index], logits_dict[booster_index])
                                   for booster_index in range(clss, n_trees, n_classes)])), axis=0)
        return sum_of_leaf_values

    return __logit_func


def __init_worker(X, X_shape):
    var_dict['X'] = X
    var_dict['X_shape'] = X_shape

def __classify(rows, return_probabilities=False, force_serial=False):
    if force_serial:
        serial = True
    else:
        serial = default_to_serial
    if isinstance(rows, list):
        rows = np.array(rows)

    logits = [__build_logit_func(50, clss) for clss in range(n_classes)]

    if serial:
        o = np.array([logits[class_index](rows, True, rows.shape) for class_index in range(n_classes)]).T
    else:
        shared_arr = multiprocessing.RawArray('d', rows.shape[0] * rows.shape[1])
        shared_arr_np = np.frombuffer(shared_arr, dtype=rows.dtype).reshape(rows.shape)
        np.copyto(shared_arr_np, rows)

        procs = multiprocessing.cpu_count()
        pool = multiprocessing.Pool(processes=procs, initializer=__init_worker, initargs=(shared_arr, rows.shape))
        o = np.array([logits[class_index](None, False, rows.shape, pool) for class_index in range(n_classes)]).T

    if return_probabilities:

        argument = o[:, 0] - o[:, 1]
        p0 = 1.0 / (1.0 + np.exp(-argument)).reshape(-1, 1)
        p1 = 1.0 - p0
        output = np.concatenate((p0, p1), axis=1)

    else:
        output = np.argmax(o, axis=1)
    return output



def __validate_kwargs(kwargs):
    for key in kwargs:

        if key not in ['return_probabilities', 'force_serial']:
            raise PredictorError(f'{key} is not a keyword argument for Brainome\'s {classifier_type} predictor. Please see the documentation.', 4)


def __validate_data(row_or_arr, validate, row_num=None):
    if validate:
        expected_columns = len(important_idxs) + len(ignore_idxs) + 1
    else:
        expected_columns = len(important_idxs) + len(ignore_idxs)

    input_is_array = isinstance(row_or_arr, np.ndarray)
    n_cols = row_or_arr.shape[1] if input_is_array else len(row_or_arr)

    if n_cols != expected_columns:

        if row_num is None:
            err_str = f"Your data contains {n_cols} columns but {expected_columns} are required."
        else:
            err_str = f"At row {row_num}, your data contains {n_cols} columns but {expected_columns} are required."

        if validate:
            err_str += " The predictor's validate() method works on data that has the same columns in the same order as were present in the training CSV."
            err_str += " This includes the target column and features that are not used by the model but existed in the training CSV."
            if n_cols == 1 + len(important_idxs):
                err_str += f" We suggest confirming that the {len(ignore_idxs)} unused features are present in the data."
            elif n_cols == len(important_idxs):
                err_str += f" We suggest confirming that the {len(ignore_idxs)} unused features are present in the data as well as the target column. "
            elif n_cols == len(important_idxs) + len(ignore_idxs):
                err_str += " We suggest confirming that the target column present in the data. "
            err_str += " To make predictions, see the predictor's predict() method."
        else:
            err_str += " The predictor's predict() method works on data that has the same feature columns in the same relative order as were present in the training CSV."
            err_str += " This DOES NOT include the target column but DOES include features that are not used by the model but existed in the training CSV."
            if n_cols == 1 + len(important_idxs):
                err_str += f" We suggest confirming that the {len(ignore_idxs)} unused features are present in the data and that the target column is not present."
            elif n_cols == len(important_idxs):
                err_str += f" We suggest confirming that the {len(ignore_idxs)} unused features are present in the data."
            elif n_cols == 1 + len(important_idxs) + len(ignore_idxs):
                err_str += " We suggest confirming that the target column is not present."
            err_str += " To receive a performance summary, instead of make predictions, see the predictor's validate() method."

        raise PredictorError(err_str, 5)

    else:

        if not input_is_array:
            return row_or_arr


def __write_predictions(arr, header, headerless, trim, outfile=None):
    predictions = predict(arr)

    if not headerless:
        if trim:
            header = ','.join([x for i, x in enumerate(header) if i in important_idxs] + ['Prediction'])
        else:
            header = ','.join(header.tolist() + ['Prediction'])
        if outfile is None:
            print(header)
        else:
            print(header, file=outfile)

    for row, prediction in zip(arr, predictions):
        if trim:
            row = ['"' + field + '"' if ',' in field else field for i, field in enumerate(row) if i in important_idxs]
        else:
            row = ['"' + field + '"' if ',' in field else field for field in row]
        row.append(prediction)
        if outfile is None:
            print(','.join(row))
        else:
            print(','.join(row), file=outfile)


def load_data(csvfile, headerless, validate):
    """
    Parameters
    ----------
    csvfile : str
        The path to the CSV file containing the data.

    headerless : bool
        True if the CSV does not contain a header.

    validate : bool
        True if the data should be loaded to be used by the predictor's validate() method.
        False if the data should be loaded to be used by the predictor's predict() method.

    Returns
    -------
    arr : np.ndarray
        The data (observations and labels) found in the CSV without any header.

    data : np.ndarray or NoneType
        None if validate is False, otherwise the observations (data without the labels) found in the CSV.

    labels : np.ndarray or NoneType
        None if the validate is False, otherwise the labels found in the CSV.

    header : np.ndarray or NoneType
        None if the CSV is headerless, otherwise the header.
    """

    with open(csvfile, 'r', encoding='utf-8') as csvinput:
        arr = np.array([__validate_data(row, validate, row_num=i) for i, row in enumerate(csv.reader(csvinput)) if row != []], dtype=str)
    if headerless:
        header = None
    else:
        header = arr[0]
        arr = arr[1:]
    if validate:
        labels = arr[:, target_column]
        feature_columns = [i for i in range(arr.shape[1]) if i != target_column]
        data = arr[:, feature_columns]
    else:
        data, labels = None, None

    if validate and ignorelabels != []:
        idxs_to_keep = np.argwhere(np.logical_not(np.isin(labels, ignorelabels))).reshape(-1)
        labels = labels[idxs_to_keep]
        data = data[idxs_to_keep]

    return arr, data, labels, header


def predict(arr, remap=True, **kwargs):
    """
    Parameters
    ----------
    arr : list[list]
        An array of inputs to be cleaned by 'preprocess_and_clean_in_memory'. This
        should contain all the features that were present in the training data,
        regardless of whether or not they are used by the model, with the same
        relative order as in the training data. There should be no target column.


    remap : bool
        If True and 'return_probs' is False, remaps the output to the original class
        label. If 'return_probs' is True this instead adds a header indicating which
        original class label each column of output corresponds to.

    **kwargs :
        return_probabilities : bool
            If true, return class membership probabilities instead of classifications.

    **kwargs :
        force_serial : bool
            If true, model inference is done in serial rather than in parallel. This is
            useful if calling "predict" repeatedly inside a for-loop.

    Returns
    -------
    output : np.ndarray

        A numpy array of
            1. Class predictions if 'return_probabilities' is False.
            2. Class probabilities if 'return_probabilities' is True.

    """
    if not isinstance(arr, np.ndarray) and not isinstance(arr, list):
        raise PredictorError(f'Data must be provided to \'predict\' and \'validate\' as a list or np.ndarray, but an input of type {type(arr).__name__} was found.', 6)
    if isinstance(arr, list):
        arr = np.array(arr, dtype=str)

    kwargs = kwargs or {}
    __validate_kwargs(kwargs)
    __validate_data(arr, False)
    remove_bad_chars = lambda x: str(x).replace('"', '').replace(',', '').replace('(', '').replace(')', '').replace("'", '')
    arr = [[remove_bad_chars(field) for field in row] for row in arr]
    arr = __preprocess_and_clean_in_memory(arr)

    output = __classify(arr, **kwargs)

    if remap:
        if kwargs.get('return_probabilities'):
            header = np.array([__get_key(i, mapping) for i in range(output.shape[1])], dtype=str).reshape(1, -1)
            output = np.concatenate((header, output), axis=0)
        else:
            output = np.array([__get_key(prediction, mapping) for prediction in output])

    return output


def validate(arr, labels):
    """
    Parameters
    ----------
    cleanarr : np.ndarray
        An array of float values that has undergone each pre-
        prediction step.

    Returns
    -------
    count : int
        A count of the number of instances in cleanarr.

    correct_count : int
        A count of the number of correctly classified instances in
        cleanarr.

    numeachclass : dict
        A dictionary mapping each class to its number of instances.

    outputs : np.ndarray
        The output of the predictor's '__classify' method on cleanarr.
    """
    predictions = predict(arr)
    correct_count = int(np.sum(predictions.reshape(-1) == labels.reshape(-1)))
    count = predictions.shape[0]
    
    class_0, class_1 = __get_key(0, mapping), __get_key(1, mapping)
    num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0
    num_TP = int(np.sum(np.logical_and(predictions.reshape(-1) == class_1, labels.reshape(-1) == class_1)))
    num_TN = int(np.sum(np.logical_and(predictions.reshape(-1) == class_0, labels.reshape(-1) == class_0)))
    num_FN = int(np.sum(np.logical_and(predictions.reshape(-1) == class_0, labels.reshape(-1) == class_1)))
    num_FP = int(np.sum(np.logical_and(predictions.reshape(-1) == class_1, labels.reshape(-1) == class_0)))
    num_class_0 = int(np.sum(labels.reshape(-1) == class_0))
    num_class_1 = int(np.sum(labels.reshape(-1) == class_1))
    return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, predictions


def __main():
    parser = argparse.ArgumentParser(description='Predictor trained on ' + str(TRAINFILE))
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    parser.add_argument('-json', action="store_true", default=False, help="report measurements as json")
    parser.add_argument('-trim', action="store_true", help="If true, the prediction will not output ignored columns.")
    args = parser.parse_args()
    faulthandler.enable()

    arr, data, labels, header = load_data(csvfile=args.csvfile, headerless=args.headerless, validate=args.validate)

    if not args.validate:
        __write_predictions(arr, header, args.headerless, args.trim)
    else:

        count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, preds = validate(data, labels)

        classcounts = np.bincount(np.array([mapping[label] for label in labels], dtype='int32')).reshape(-1)
        class_balance = (classcounts[np.argwhere(classcounts > 0)] / arr.shape[0]).reshape(-1).tolist()
        best_guess = round(100.0 * np.max(class_balance), 2)
        H = float(-1.0 * sum([class_balance[i] * math.log(class_balance[i]) / math.log(2) for i in range(len(class_balance))]))
        modelacc = int(float(correct_count * 10000) / count) / 100.0
        mtrx, stats = __confusion_matrix(np.array(labels).reshape(-1), np.array(preds).reshape(-1), args.json)

        if args.json:
            json_dict = {'instance_count': count,
                         'classifier_type': classifier_type,
                         'classes': n_classes,
                         'number_correct': correct_count,
                         'accuracy': {
                             'best_guess': (best_guess/100),
                             'improvement': (modelacc - best_guess)/100,
                              'model_accuracy': (modelacc/100),
                         },
                         'model_capacity': model_cap,
                         'generalization_ratio': int(float(correct_count * 100) / model_cap) / 100.0 * H,
                         'model_efficiency': int(100 * (modelacc - best_guess) / model_cap) / 100.0,
                         'shannon_entropy_of_labels': H,
                         'class_balance': class_balance,
                         'confusion_matrix': mtrx.tolist(),
                         'multiclass_stats': stats}

            print(json.dumps(json_dict))
        else:
            pad = lambda s, length, pad_right: str(s) + ' ' * max(0, length - len(str(s))) if pad_right else ' ' * max(0, length - len(str(s))) + str(s)
            labels = np.array(list(mapping.keys())).reshape(-1, 1)
            max_class_name_len = max([len(clss) for clss in mapping.keys()] + [7])

            max_TP_len = max([len(str(stats[key]['TP'])) for key in stats.keys()] + [2])
            max_FP_len = max([len(str(stats[key]['FP'])) for key in stats.keys()] + [2])
            max_TN_len = max([len(str(stats[key]['TN'])) for key in stats.keys()] + [2])
            max_FN_len = max([len(str(stats[key]['FN'])) for key in stats.keys()] + [2])

            cmat_template_1 = "    {} | {}"
            cmat_template_2 = "    {} | " + " {} " * n_classes
            acc_by_class_template_1 = "    {} | {}  {}  {}  {}  {}  {}  {}  {}  {}  {}"

            acc_by_class_lengths = [max_class_name_len, max_TP_len, max_FP_len, max_TN_len, max_FN_len, 7, 7, 7, 7, 7, 7]
            acc_by_class_header_fields = ['target', 'TP', 'FP', 'TN', 'FN', 'TPR', 'TNR', 'PPV', 'NPV', 'F1', 'TS']
            print("Classifier Type:                    Random Forest")

            print(f"System Type:                        {n_classes}-way classifier\n")

            print("Accuracy:")
            print("    Best-guess accuracy:            {:.2f}%".format(best_guess))
            print("    Model accuracy:                 {:.2f}%".format(modelacc) + " (" + str(int(correct_count)) + "/" + str(count) + " correct)")
            print("    Improvement over best guess:    {:.2f}%".format(modelacc - best_guess) + " (of possible " + str(round(100 - best_guess, 2)) + "%)\n")

            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(correct_count * 100) / model_cap) / 100.0 * H) + " bits/bit")

            if report_cmat:
                max_cmat_entry_len = len(str(int(np.max(mtrx))))
                mtrx = np.concatenate((labels, mtrx.astype('str')), axis=1).astype('str')
                max_pred_len = (mtrx.shape[1] - 1) * max_cmat_entry_len + n_classes * 2 - 1
                print("\nConfusion Matrix:\n")
                print(cmat_template_1.format(pad("Actual", max_class_name_len, False), "Predicted"))
                print(cmat_template_1.format("-" * max_class_name_len, "-" * max(max_pred_len, 9)))
                for row in mtrx:
                    print(cmat_template_2.format(
                        *[pad(field, max_class_name_len if i == 0 else max_cmat_entry_len, False) for i, field in enumerate(row)]))

            print("\nAccuracy by Class:\n")
            print(acc_by_class_template_1.format(
                *[pad(header_field, length, False) for i, (header_field, length) in enumerate(zip(acc_by_class_header_fields, acc_by_class_lengths))]))
            print(acc_by_class_template_1.format(
                *["-" * length for length in acc_by_class_lengths]))

            pct_format_string = "{:8.2%}"      # width = 8, decimals = 2
            for raw_class in mapping.keys():
                class_stats = stats[int(mapping[raw_class])]
                TP, FP, TN, FN = class_stats.get('TP', None), class_stats.get('FP', None), class_stats.get('TN', None), class_stats.get('FN', None)
                TPR = pct_format_string.format(class_stats['TPR']) if class_stats['TPR'] is not None else 'N/A'
                TNR = pct_format_string.format(class_stats['TNR']) if class_stats['TNR'] is not None else 'N/A'
                PPV = pct_format_string.format(class_stats['PPV']) if class_stats['PPV'] is not None else 'N/A'
                NPV = pct_format_string.format(class_stats['NPV']) if class_stats['NPV'] is not None else 'N/A'
                F1 = pct_format_string.format(class_stats['F1']) if class_stats['F1'] is not None else 'N/A'
                TS = pct_format_string.format(class_stats['TS']) if class_stats['TS'] is not None else 'N/A'
                line_fields = [raw_class, TP, FP, TN, FN, TPR, TNR, PPV, NPV, F1, TS]
                print(acc_by_class_template_1.format(
                    *[pad(field, length, False) for i, (field, length) in enumerate(zip(line_fields, acc_by_class_lengths))]))


if __name__ == "__main__":
    try:
        __main()
    except PredictorError as e:
        print(e, file=sys.stderr)
        sys.exit(e.code)
    except Exception as e:
        print(f"An unknown exception of type {type(e).__name__} occurred.", file=sys.stderr)
        sys.exit(-1)
