#!/usr/bin/env python3
#
# This code has been produced by an enterprise version of Brainome(tm) licensed to: andy Stevko.
# Portions of this code copyright (c) 2019-2022 by Brainome, Inc. All Rights Reserved.
# Distribution and use of this code or commercial use is permitted within the license terms
# set forth in a written contractual agreement between Brainome, Inc and brainome-user.
# Please contact support@brainome.ai with any questions.
# Use of predictions results at your own risk.
#
# Output of Brainome v1.8-120-prod.
# Invocation: brainome TRAIN_TEST_SPLITS/phpMawTba-clean-train.csv -f RF -y -split 70 -modelonly -q -o btc-runs/RF/adult.py -json btc-runs/RF/adult.json
# Total compiler execution time: 0:00:13.15. Finished on: Feb-26-2022 18:36:26.
# This source code requires Python 3.
#
"""

[01;1mPredictor:[0m                        btc-runs/RF/adult.py
    Classifier Type:              Random Forest
    System Type:                  Binary classifier
    Training / Validation Split:  70% : 30%
    Accuracy:
      Best-guess accuracy:        76.07%
      Training accuracy:          88.82% (21256/23931 correct)
      Validation Accuracy:        87.16% (8941/10258 correct)
      Combined Model Accuracy:    88.32% (30197/34189 correct)


    Model Capacity (MEC):        360    bits
    Generalization Ratio:         46.87 bits/bit
    Percent of Data Memorized:     4.65%
    Resilience to Noise:          -1.77 dB







    Training Confusion Matrix:
              Actual | Predicted
              ------ | ---------
                   1 |   3861   1865 
                   0 |    810  17395 

    Validation Confusion Matrix:
              Actual | Predicted
              ------ | ---------
                   1 |   1589    866 
                   0 |    451   7352 

    Training Accuracy by Class:
               class |     TP     FP     TN     FN     TPR      TNR      PPV      NPV       F1       TS 
               ----- | ------ ------ ------ ------ -------- -------- -------- -------- -------- --------
                   1 |   3861    810  17395   1865   67.43%   95.55%   82.66%   90.32%   74.27%   59.07%
                   0 |  17395   1865   3861    810   95.55%   67.43%   90.32%   82.66%   92.86%   86.67%

    Validation Accuracy by Class:
               class |     TP     FP     TN     FN     TPR      TNR      PPV      NPV       F1       TS 
               ----- | ------ ------ ------ ------ -------- -------- -------- -------- -------- --------
                   1 |   1589    451   7352    866   64.73%   94.22%   77.89%   89.46%   70.70%   54.68%
                   0 |   7352    866   1589    451   94.22%   64.73%   89.46%   77.89%   91.78%   84.81%


    Attribute Ranking:
                                      Feature | Relative Importance
                                 relationship :   0.2836
                               marital_status :   0.2203
                                 capital_gain :   0.1478
                                education_num :   0.1290
                                 capital_loss :   0.0506
                                          age :   0.0293
                                   occupation :   0.0260
                               hours_per_week :   0.0228
                                          sex :   0.0190
                                    workclass :   0.0175
                                         race :   0.0169
                               native_country :   0.0154
                                       fnlwgt :   0.0124
                                    education :   0.0096
         

"""

import sys
import math
import argparse
import csv
import binascii
import faulthandler
import json
try:
    import numpy as np  # For numpy see: http://numpy.org
except ImportError as e:
    print("This predictor requires the Numpy library. Please run 'python3 -m pip install numpy'.", file=sys.stderr)
    raise e
try:
    from scipy.sparse import coo_matrix
    report_cmat = True
except ImportError:
    print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix. Try 'python3 -m pip install scipy'.", file=sys.stderr)
    report_cmat = False
try:
    import multiprocessing
    var_dict = {}
    default_to_serial = False
except:
    default_to_serial = True

IOBUF = 100000000
sys.setrecursionlimit(1000000)
TRAINFILE = ['TRAIN_TEST_SPLITS/phpMawTba-clean-train.csv']
mapping = {'1': 0, '0': 1}
ignorelabels = []
ignorecolumns = []
target = ''
target_column = 14
important_idxs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
ignore_idxs = []
classifier_type = 'RF'
num_attr = 14
n_classes = 2
model_cap = 360
logits_dict = {0: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.323973954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.316851199, 0.0, 0.166549996, -0.222066671, 0.0, 0.327700198, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.237928569, 0.0, 0.0, 0.0, 0.0, 0.0, 0.166549996, 0.0, 0.0, 0.296088874, -0.249825001, 0.166549996, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.166549996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.272536367, 0.288686663, -0.199860007, 0.0, 0.0, 0.0, 0.199860007, 0.0, 0.0, -0.267302454, -0.0832749978, -0.149992391, -0.0, -0.318389982, 0.222066671, 0.142757148, -0.222066671, -0.284726232, -0.076869227, -0.241766125, -0.140131712, -0.217004359, -0.0923668593, 0.311609656, -0.178446412, 0.0666199997, -0.252619445, -0.0928311422, 0.112856038, 0.33021602, 0.192173064, -0.250256479, -0.0666199997, 0.222066671, -0.0, -0.208187491, -0.330419689, -0.312458962, -0.267940462, -0.315660208, -0.137158826, -0.252511293, -0.12126682, 0.190342858, -0.185055554, -0.299580514, -0.0475857146, -0.166549996, 0.111033335, -0.190940157, 0.166549996, 0.0691339597, -0.142757148, -0.0, 0.199860007]), 1: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.323973954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.316851199, 0.0, -0.166549996, 0.222066671, 0.0, -0.327700198, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.237928569, 0.0, 0.0, 0.0, 0.0, 0.0, -0.166549996, 0.0, 0.0, -0.296088874, 0.249825001, -0.166549996, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.166549996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.272536367, -0.288686663, 0.199860007, 0.0, 0.0, 0.0, -0.199860007, 0.0, 0.0, 0.267302454, 0.0832749978, 0.149992391, -0.0, 0.318389982, -0.222066671, -0.142757148, 0.222066671, 0.284726232, 0.076869227, 0.241766125, 0.140131712, 0.217004359, 0.0923668593, -0.311609656, 0.178446412, -0.0666199997, 0.252619445, 0.0928311422, -0.112856038, -0.33021602, -0.192173064, 0.250256479, 0.0666199997, -0.222066671, -0.0, 0.208187491, 0.330419689, 0.312458962, 0.267940462, 0.315660208, 0.137158826, 0.252511293, 0.12126682, -0.190342858, 0.185055554, 0.299580514, 0.0475857146, 0.166549996, -0.111033335, 0.190940157, -0.166549996, -0.0691339597, 0.142757148, -0.0, -0.199860007]), 2: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.250617296, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.251835018, 0.0, 0.0, 0.0, 0.0, 0.0604224987, -0.160798788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.248269245, 0.175165012, 0.0, 0.0, 0.0, 0.189755484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.26654923, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.18635802, 0.0320146419, 0.251684099, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0481247678, -0.164266616, 0.231574774, 0.0466941856, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0404401533, 0.0, 0.199497044, 0.0, 0.0, -0.183235377, -0.0243703146, -0.197872847, -0.0237975512, -0.238488242, 0.17925258, -0.138395861, 0.17741935, -0.161676779, 0.0627823472, -0.0787146688, 0.125589952, -0.162114128, -0.0851148963, -0.162097797, 0.00819278043, 0.172719046, -0.0344317332, -0.231619686, -0.160080358, -0.125512645, 0.210424989, -0.253497034, -0.0648800805, -0.0168006551, 0.112050906, -0.175208047, 0.113896713, 0.166221559, -0.0182816442, -0.248522207, -0.103514716, 0.0476927385, -0.146857694, -0.234875739, -0.20491761, 0.0202124938, -0.164273992, -0.23884058, -0.189217836, -0.0453129336, 0.160394996, -0.230101541, 0.0250018481, -0.131063312, -0.0426777191, -0.233374551, -0.115262903, -0.0186776519, -0.197509989, -0.151969716, -0.0558036752, 0.0703612939, -0.134798288]), 3: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.250617266, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.251835018, 0.0, 0.0, 0.0, 0.0, -0.0604225062, 0.160798773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.248269275, -0.175165012, 0.0, 0.0, 0.0, -0.189755514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.26654923, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.186358035, -0.0320146382, -0.251684099, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0481247641, 0.164266631, -0.231574789, -0.0466942005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0404401645, 0.0, -0.199497044, 0.0, 0.0, 0.183235377, 0.0243703201, 0.197872847, 0.0237975512, 0.238488242, -0.17925261, 0.138395831, -0.177419379, 0.161676779, -0.0627823547, 0.0787146688, -0.125589952, 0.162114114, 0.0851148739, 0.162097782, -0.0081927916, -0.172719046, 0.0344317406, 0.231619641, 0.160080343, 0.12551263, -0.210424989, 0.253497034, 0.064880088, 0.0168006606, -0.112050898, 0.175208002, -0.113896735, -0.166221574, 0.0182816219, 0.248522192, 0.103514723, -0.047692731, 0.146857694, 0.234875709, 0.204917595, -0.0202124771, 0.164274007, 0.238840565, 0.189217836, 0.0453129448, -0.160394996, 0.230101541, -0.0250018463, 0.131063297, 0.0426777005, 0.233374566, 0.115262926, 0.018677678, 0.197510004, 0.151969731, 0.055803664, -0.070361279, 0.134798318]), 4: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.345384359, 0.0, -0.100440308, 0.215468884, 0.0, 0.0, 0.0, 0.0, 0.219030544, 0.0, 0.0, 0.212162942, 0.0, 0.0, 0.0, -0.182325676, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.210489914, -0.234355927, 0.0, 0.0, -0.215128347, 0.0, 0.0, 0.0, 0.206090972, 0.0, 0.0, 0.39643079, 0.0, 0.0, 0.199234575, 0.0, 0.216947556, -0.159569502, 0.0, -0.204226762, -0.0319262519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.245642498, 0.0, -0.0975077525, 0.263439476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.296128362, -0.159845442, 0.141160727, -0.195987657, 0.170754939, -0.197016746, -0.132547393, 0.136054844, -0.134597361, -0.18197076, 0.207923457, -0.205936611, -0.0774235576, -0.159135327, 0.0954089761, -0.209144518, 0.051132489, -0.210863382, -0.108640701, 0.0479963273, -0.102362201, -0.0288572218, 0.20516476, -0.210108876, -0.114356659, -0.194857076, -0.0907462239, -0.106654048, -0.195042491, -0.11608316, -0.0256096181, -0.154798254, -0.0448610038, 0.0315737501, -0.236079082, -0.306773454, 0.180764452, -0.199556664, -0.0268324036, -0.101070777, -0.181962773, -0.207410201, -0.118475296, 0.244322017, 0.0381794833, 0.0278516691, -0.177720681, -0.166482359, 0.0938976184, 0.0420210212, 0.185299531]), 5: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.345384359, 0.0, 0.100440308, -0.215468898, 0.0, 0.0, 0.0, 0.0, -0.219030544, 0.0, 0.0, -0.212162957, 0.0, 0.0, 0.0, 0.182325676, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.210489914, 0.234355912, 0.0, 0.0, 0.215128347, 0.0, 0.0, 0.0, -0.206091002, 0.0, 0.0, -0.39643079, 0.0, 0.0, -0.199234575, 0.0, -0.216947526, 0.159569502, 0.0, 0.204226762, 0.0319262519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.245642483, 0.0, 0.0975077525, -0.263439476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.296128362, 0.159845442, -0.141160727, 0.195987657, -0.170754939, 0.197016761, 0.132547408, -0.136054859, 0.134597391, 0.18197076, -0.207923457, 0.205936611, 0.0774235651, 0.159135342, -0.0954089537, 0.209144518, -0.051132489, 0.210863382, 0.108640701, -0.0479962975, 0.102362216, 0.0288572237, -0.205164775, 0.210108876, 0.11435663, 0.194857076, 0.0907462165, 0.10665407, 0.195042491, 0.116083145, 0.0256096255, 0.154798254, 0.0448610038, -0.0315737687, 0.236079067, 0.306773484, -0.180764422, 0.199556664, 0.0268324111, 0.101070791, 0.181962773, 0.207410201, 0.118475296, -0.244322017, -0.0381794833, -0.0278516766, 0.177720681, 0.166482359, -0.0938976258, -0.0420209989, -0.185299531]), 6: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.250522196, 0.0, -0.0803447142, 0.196068749, 0.0, 0.0, 0.0, 0.181218833, 0.0, 0.198385999, 0.0, 0.0, 0.0, 0.0, 0.0, -0.155872434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19877556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.168293744, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.175754398, -0.188625231, 0.0, 0.138094798, -0.0706339553, 0.0, 0.0, 0.0, 0.0, -0.145396218, 0.0, -0.179292783, -0.0241789278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.165664628, 0.0, 0.0, -0.118407518, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.172442809, 0.128225803, -0.197031274, -0.175859794, -0.176906079, -0.115318105, -0.195613161, -0.102297299, -0.142808214, 0.171721548, -0.167848542, -0.018269239, -0.165353462, -0.0532922409, -0.118199408, -0.0421732813, -0.042508617, -0.22114566, 0.236785039, -0.0304757804, -0.0118776402, 0.171068236, -0.147126541, -0.0757271722, -0.126658544, -0.0340838172, 0.087580353, 0.238534108, -0.199290127, 0.104876682, 0.098376371, -0.220456228, -0.0378988497, 0.202298865, -0.178599283, -0.135520115, 0.316904545, -0.116623417, 0.0842500329, -0.179693967, -0.14183636, -0.0266632922, 0.0529537722, -0.216959491, 0.209441513, 0.0681837276, -0.150443375, -0.0753296763, -0.0712223947, 0.185240448, -0.210249424, -0.047544755, 0.0991695821, -0.0991068333, -0.0243303478, -0.168980494, 0.153071091, -0.124499336]), 7: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.250522196, 0.0, 0.0803447291, -0.196068749, 0.0, 0.0, 0.0, -0.181218833, 0.0, -0.198385999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.155872434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.19877556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.168293744, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.175754398, 0.188625231, 0.0, -0.138094798, 0.0706339702, 0.0, 0.0, 0.0, 0.0, 0.145396233, 0.0, 0.179292783, 0.0241789278, 0.0, 0.0, 0.0, 0.0, 0.0, -0.165664613, 0.0, 0.0, 0.118407518, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.172442794, -0.128225774, 0.197031274, 0.175859794, 0.176906094, 0.11531809, 0.195613191, 0.102297306, 0.142808214, -0.171721548, 0.167848542, 0.0182692595, 0.165353462, 0.0532922484, 0.118199401, 0.0421732627, 0.0425086021, 0.22114566, -0.236785039, 0.0304757617, 0.0118776383, -0.171068221, 0.147126541, 0.0757271871, 0.126658544, 0.0340838246, -0.0875803679, -0.238534123, 0.199290127, -0.10487669, -0.0983763635, 0.220456243, 0.037898846, -0.20229885, 0.178599298, 0.13552013, -0.316904604, 0.116623402, -0.0842500106, 0.179693982, 0.14183639, 0.0266632922, -0.0529537722, 0.216959491, -0.209441513, -0.068183735, 0.15044339, 0.0753296986, 0.0712223947, -0.185240448, 0.210249424, 0.047544755, -0.0991695821, 0.0991068184, 0.0243303515, 0.168980494, -0.153071091, 0.124499351]), 8: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.204559237, 0.0, -0.0646074638, 0.183596641, 0.0, 0.0, 0.188604459, 0.0, 0.0, 0.168431848, 0.0, 0.0, 0.0, -0.00369010726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.175438106, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0630635619, 0.0, 0.0, 0.0, 0.0, -0.189290643, 0.0, 0.0, 0.0, 0.121031821, -0.0571568422, 0.0, 0.0547399744, 0.0, 0.0, -0.162065312, -0.00479259295, 0.113158152, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.195429787, 0.0, 0.0, -0.179352641, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0188181661, 0.0, -0.153198972, 0.0993435085, -0.183462158, -0.0459214635, -0.171546891, -0.0938644335, -0.12669386, 0.157849029, -0.13422665, -0.0556744635, -0.173734516, -0.0881624892, -0.147757649, -0.0150043983, -0.168921277, -0.106257595, -0.0313226841, -0.211234868, -0.051987201, -0.209310234, 0.00551469019, -0.130041197, -0.049673833, -0.216328204, -0.158800676, 0.140949413, -0.0670130923, 0.12360765, -0.114535555, -0.000812629412, 0.00633434299, 0.0711481348, 0.0555303618, -0.325417399, -0.252487063, 0.161271632, 0.014476384, 0.168809399, -0.15839912, 0.0216158163, -0.133677393, 0.11598102, -0.145144895, -0.000181782671, 0.224168211, -0.140709102, 0.0127431033, -0.148685455, -0.0980514139, 0.0380466022, -0.00760875968, -0.134811044, -0.0455434509, 0.0759922862, 0.252973557, 0.136621043]), 9: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.204559237, 0.0, 0.0646074638, -0.183596671, 0.0, 0.0, -0.188604474, 0.0, 0.0, -0.168431848, 0.0, 0.0, 0.0, 0.00369010749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.175438136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0630635545, 0.0, 0.0, 0.0, 0.0, 0.189290643, 0.0, 0.0, 0.0, -0.121031836, 0.0571568348, 0.0, -0.0547399744, 0.0, 0.0, 0.162065312, 0.00479258783, -0.113158174, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.195429772, 0.0, 0.0, 0.179352641, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0188181717, 0.0, 0.153198972, -0.0993435159, 0.183462158, 0.0459214635, 0.171546891, 0.0938644335, 0.12669386, -0.157849029, 0.13422665, 0.0556744672, 0.173734516, 0.0881625116, 0.147757649, 0.0150043992, 0.168921277, 0.10625761, 0.0313226804, 0.211234868, 0.051987201, 0.209310234, -0.00551470229, 0.130041197, 0.0496738367, 0.216328204, 0.158800691, -0.140949413, 0.0670130923, -0.123607665, 0.114535555, 0.000812622486, -0.0063343402, -0.0711481199, -0.0555303581, 0.325417399, 0.252487063, -0.161271617, -0.0144763906, -0.168809399, 0.158399105, -0.0216158051, 0.133677393, -0.11598099, 0.14514491, 0.000181773081, -0.224168181, 0.140709117, -0.0127430912, 0.148685455, 0.0980514139, -0.0380466133, 0.00760876108, 0.134811044, 0.0455434509, -0.0759922862, -0.252973527, -0.136621028]), 10: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.17211841, -0.0669335052, 0.0, 0.0879480988, 0.0, 0.0, 0.0, 0.0, 0.181003481, 0.0, 0.0, 0.156639636, 0.0, 0.172254965, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00745812897, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.164202631, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.136827722, 0.0, 0.0, 0.0, -0.179437727, 0.0, 0.0, 0.0, 0.118262812, -0.0464281105, 0.0, 0.0, 0.0, 0.0, 0.165297136, 0.0446170382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.152560592, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0293025523, 0.0, 0.0, -0.152437776, 0.0686756223, -0.111351319, -0.179437682, -0.158839494, -0.0186321661, -0.00323322299, -0.157748207, 0.115376949, -0.122024111, -0.0527224354, -0.161149532, -0.177752987, -0.000539186411, -0.155057445, -0.0857141614, -0.153869301, -0.059484303, 0.220348939, -0.0472972877, -0.148614526, -0.0520511679, -0.0179126468, -0.193383008, -0.0102394242, 0.148215532, -0.0550466888, 0.102466993, -0.171295151, 0.123518087, -0.166526258, 0.0373627059, -0.025808353, 0.170115098, -0.150391117, 0.0159173757, -0.0111120744, 0.117994346, -0.178826526, 0.00945373811, 0.0106621636, 0.153229982, 0.0285802316, -0.155268565, -0.138734654, -0.0608086176, 0.0399340987, -0.144519836, -0.00285165431, -0.0899709612, -0.0117843077, -0.180758148, 0.0150868334, -0.156338453, -0.1411881, -0.000932729105]), 11: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.172118396, 0.0669335499, 0.0, -0.0879480541, 0.0, 0.0, 0.0, 0.0, -0.181003481, 0.0, 0.0, -0.156639636, 0.0, -0.172254965, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00745807961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.164202631, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.136827692, 0.0, 0.0, 0.0, 0.179437727, 0.0, 0.0, 0.0, -0.118262812, 0.0464281142, 0.0, 0.0, 0.0, 0.0, -0.165297106, -0.0446169935, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.152560592, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0293025412, 0.0, 0.0, 0.152437791, -0.0686756074, 0.111351304, 0.179437682, 0.158839509, 0.0186322052, 0.00323320716, 0.157748207, -0.115376942, 0.122024111, 0.052722428, 0.161149532, 0.177752987, 0.000539176632, 0.15505743, 0.0857141465, 0.153869301, 0.059484303, -0.220348954, 0.0472972803, 0.148614526, 0.0520511717, 0.0179126505, 0.193382993, 0.0102394177, -0.148215517, 0.0550466888, -0.102466986, 0.171295151, -0.123518087, 0.166526273, -0.0373626985, 0.025808353, -0.170115098, 0.150391132, -0.0159173757, 0.0111120781, -0.117994346, 0.178826526, -0.00945373625, -0.0106621608, -0.153229982, -0.0285802223, 0.155268565, 0.138734654, 0.0608086325, -0.0399341062, 0.144519836, 0.00285164034, 0.0899709538, 0.0117843086, 0.180758178, -0.0150868362, 0.156338453, 0.1411881, 0.000932731724]), 12: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.130681217, -0.0669533685, 0.0, 0.0, 0.0, 0.112906098, 0.0, 0.0, 0.0, 0.0, 0.0369043723, 0.175282329, 0.0, 0.160787389, 0.0, 0.0, -0.142673612, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.133061618, 0.0, 0.0, 0.0, 0.0, -0.0273472071, 0.117644854, -0.191464424, 0.0252289046, -0.148453653, 0.159356132, 0.0, 0.0, 0.434731245, 0.0, 0.0, -0.125477359, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.195742995, -0.181754112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.144535929, -0.099591434, 0.0720930547, -0.118681096, -0.176795512, -0.0108654657, -0.112498514, 0.207078397, -0.164424986, -0.0170017201, -0.140335709, -0.0633740202, -0.102450185, 0.0183543116, -0.176669195, 0.0679873675, 0.0306946021, 0.200694993, -0.177181199, -0.0972553715, -0.129403383, 0.0110386405, -0.157919511, -0.00241548684, -0.139196455, -0.0669956133, -0.145502374, 0.0247640908, -0.162566558, -0.0139957508, -0.0406244174, -0.128359944, -0.0682520717, 0.0881344378, -0.0379460305, 0.0193343852, -0.161874503, -0.0525307693, -0.130502194, -0.0537687168, -0.0917093083, 0.195498809, -0.0797635689, 0.211281165, -0.153827399, -0.0910286829, -0.0129232788, -0.136864126, -0.0287044812, 0.215019524]), 13: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.130681217, 0.0669533759, 0.0, 0.0, 0.0, -0.112906091, 0.0, 0.0, 0.0, 0.0, -0.0369043723, -0.175282329, 0.0, -0.160787389, 0.0, 0.0, 0.142673612, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.133061633, 0.0, 0.0, 0.0, 0.0, 0.0273472052, -0.117644869, 0.191464424, -0.0252289101, 0.148453638, -0.159356132, 0.0, 0.0, -0.434731275, 0.0, 0.0, 0.125477359, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.195742995, 0.181754082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.144535914, 0.0995914564, -0.0720930472, 0.118681103, 0.176795512, 0.0108654676, 0.112498499, -0.207078412, 0.164424986, 0.0170017201, 0.140335694, 0.0633740202, 0.102450177, -0.0183543097, 0.176669195, -0.0679873675, -0.0306946021, -0.200695008, 0.177181199, 0.0972553715, 0.129403397, -0.011038648, 0.157919496, 0.00241545984, 0.139196441, 0.0669956207, 0.145502359, -0.0247641038, 0.162566558, 0.0139957303, 0.0406244248, 0.128359944, 0.0682520717, -0.0881344303, 0.0379460268, -0.0193343889, 0.161874503, 0.0525307693, 0.130502194, 0.053768713, 0.0917092934, -0.195498779, 0.0797635764, -0.211281151, 0.153827399, 0.0910286903, 0.0129233086, 0.136864126, 0.0287044849, -0.215019524]), 14: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.116978794, -0.0532851368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.128530174, 0.0, 0.0, 0.0828962848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0228033718, 0.10046763, -0.00291304663, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00518714823, 0.0, 0.0, 0.0, 0.0, 0.0, -0.136197105, 0.0, 0.0, -0.21860072, 0.298793107, 0.0, 0.0, 0.17539835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.457097769, 0.139066875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.238607869, 0.0, 0.0, 0.0, 0.0, 0.0, 0.071011208, -0.113855056, -0.17109631, -0.00890521612, 0.204131186, -0.115108736, -0.00837089308, -0.151688278, -0.186445504, -0.0327388085, -0.0318215825, -0.127068132, -0.0360210687, 0.185891524, 0.0887571201, -0.186477423, -0.0219470393, 0.122926623, -0.173623741, -0.00871930644, -0.0570316613, -0.149168283, 0.196343035, -0.132642478, 0.0461871289, 0.216456339, -0.146846175, -0.0844150335, -0.062783815, 0.124898598, -0.0947210267, 0.100698322, -0.156694397, 0.0443758294, -0.145181328, 0.0125127379, 0.32132116, -0.139974177, 0.100351349, -0.0481772758, -0.0314963199, -0.195194513, -0.038767457, -0.131155968, 0.00879119989, -0.130659759, -0.155923679, -0.0708928555, -0.185722247, -0.013487895, 0.00171936234, 0.136902496, 0.0790184811, -0.088654086, -0.0403051376, 0.238763794, -0.112648703, 0.203456089, 0.000896416197, -0.14991717, -0.0409779511, 0.0741556585, 0.139753953, 0.0142688612, -0.0300358608, 0.264503688, -0.0543455221, 0.0972539708, -0.147117242, 0.0287253316, -0.0939927027, 0.0779311955, -0.136006728, 0.0226142537, -0.0872557387, -0.0104109477, 0.159660533, 0.0425238684, -0.0179032031, -0.331216127, 0.143721074, 0.0495511666]), 15: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.116978794, 0.0532851554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.128530174, 0.0, 0.0, -0.0828962997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0228033643, -0.100467645, 0.00291303033, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00518714497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13619709, 0.0, 0.0, 0.218600705, -0.298793048, 0.0, 0.0, -0.175398365, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.457097769, -0.13906689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.238607839, 0.0, 0.0, 0.0, 0.0, 0.0, -0.071011208, 0.113855056, 0.17109631, 0.00890520494, -0.204131141, 0.115108721, 0.00837082043, 0.151688278, 0.186445504, 0.0327387974, 0.0318215862, 0.127068132, 0.0360210687, -0.185891479, -0.0887570977, 0.186477423, 0.0219470374, -0.122926623, 0.173623741, 0.00871928781, 0.0570316762, 0.149168283, -0.196342975, 0.132642478, -0.0461871326, -0.216456398, 0.14684616, 0.0844150186, 0.0627838224, -0.124898575, 0.0947210118, -0.1006983, 0.156694397, -0.0443758257, 0.145181343, -0.0125127155, -0.32132116, 0.139974177, -0.100351349, 0.0481772758, 0.0314963162, 0.195194498, 0.0387674533, 0.131155968, -0.00879119802, 0.130659744, 0.155923679, 0.0708928481, 0.185722247, 0.013487895, -0.00171937072, -0.136902511, -0.0790184364, 0.0886540934, 0.0403051265, -0.238763839, 0.112648688, -0.203456089, -0.000896417827, 0.14991717, 0.0409779437, -0.0741556659, -0.139753953, -0.0142688723, 0.030035859, -0.264503688, 0.0543455221, -0.0972539783, 0.147117242, -0.0287253223, 0.0939927027, -0.0779312104, 0.136006743, -0.0226142835, 0.0872557387, 0.0104109468, -0.159660548, -0.0425238647, 0.0179031976, 0.331216127, -0.143721074, -0.049551174]), 16: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0702758953, 0.089203991, 0.0, 0.0, 0.0, 0.218526945, 0.0, 0.0, 0.0, 0.131010473, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0265302993, -0.108390734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.24298048, 0.170431778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.140409008, 0.0, 0.0, 0.139944017, -0.11372824, 0.0, 0.0, 0.0, 0.0, 0.271376401, 0.0, -0.161598593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.156048968, 0.0, 0.0, 0.396668643, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.167479113, -0.00729840156, -0.108745635, 0.0271462779, -0.108421855, 0.235972762, -0.1134049, 0.187105998, 0.0437952243, -0.147023901, 0.0228652246, -0.14185442, -0.0748303384, 0.105024844, 0.0460713692, -0.119899064, -0.0797883645, 0.206655115, -0.146699011, 0.0953005105, 0.0343120284, -0.0992706269, -0.127373889, 0.0608636551, -0.0187019594, 0.182131037, -0.0708603114, 0.0970233902, 0.378423154, 0.0133621274, -0.0552901104, 0.126592845, -0.170297116, 0.0101740016, -0.021838313, 0.169386238, -0.0659973994, 0.0252073705, -0.132534266, 0.192914411, -0.160162464, -0.00566411903, 0.0981156528, -0.135569006, -0.165130347, 0.0740658045, 0.00431331899, -0.234974235, 0.065554522, 0.344267577, -0.206150755, 0.0904191658, -0.10902895, 0.0658196285, -0.118486136, 0.0247726385, -0.0104786102, 0.199412718, 0.0556284897, -0.0935298353, 0.0295947529, -0.129881054, 0.202169806, 0.0223273486, -0.116351359, 0.0269398373]), 17: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0702758878, -0.089203991, 0.0, 0.0, 0.0, -0.218526959, 0.0, 0.0, 0.0, -0.131010473, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0265302993, 0.108390726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.24298048, -0.170431778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.140409008, 0.0, 0.0, -0.139944017, 0.113728225, 0.0, 0.0, 0.0, 0.0, -0.271376491, 0.0, 0.161598593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.156048968, 0.0, 0.0, -0.396668643, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.167479113, 0.00729839643, 0.108745635, -0.0271462779, 0.10842184, -0.235972777, 0.113404877, -0.187106013, -0.0437953062, 0.147023901, -0.0228652265, 0.14185442, 0.074830316, -0.105024844, -0.0460713692, 0.119899079, 0.0797883645, -0.2066551, 0.146699026, -0.0953005552, -0.0343120359, 0.0992706195, 0.127373889, -0.0608636551, 0.0187019557, -0.182131022, 0.0708603114, -0.0970233828, -0.378423154, -0.0133621171, 0.0552901141, -0.12659283, 0.170297116, -0.0101739848, 0.0218383074, -0.169386238, 0.0659973845, -0.0252073742, 0.132534251, -0.192914426, 0.160162464, 0.00566412555, -0.0981156453, 0.135569006, 0.165130347, -0.0740658194, -0.00431331666, 0.234974235, -0.0655545294, -0.344267577, 0.206150755, -0.0904191807, 0.109028965, -0.0658196434, 0.118486144, -0.0247726012, 0.0104785981, -0.199412704, -0.0556284748, 0.0935298353, -0.0295947604, 0.129881054, -0.202169836, -0.0223273635, 0.116351351, -0.0269398354]), 18: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0734148324, -0.0548627898, 0.117170386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.283204466, 0.0, 0.0, 0.30596593, 0.0, 0.0, 0.414013684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.033870399, 0.0, -0.220868066, 0.0, 0.080637522, -0.118089005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0174680445, -0.109163582, 0.0, 0.0555811524, -0.150430784, 0.306794435, 0.0, 0.0, 0.0, -0.123866647, 0.0616442375, 0.0, 0.0, 0.0, 0.0, -0.0401224233, 0.0, 0.227521181, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.53902626, 0.138736948, 0.0629781187, -0.239985511, 0.0, -0.18982175, 0.0, 0.0, 0.0, 0.0, -0.0784444287, -0.165257379, -0.152653456, -0.0867419988, -0.160614148, -0.00777209923, 0.167319208, -0.0472527035, -0.176699504, -0.0998335108, 0.261692554, 0.00836502947, -0.1220624, 0.0411505513, -0.182321429, -0.0790324584, 0.146222785, -0.0511418357, 0.117844194, -0.0961996615, -0.14792639, -0.00309624616, -0.157925576, -0.0217990708, -0.091991581, 0.0106544839, 0.102142528, 0.0138747748, 0.106258534, -0.110428296, 0.137728944, -0.0961037278, 0.127783641, -0.134217992, 0.181581438, -0.114867963, 0.198238805, -0.136199981, -0.0568403453, -0.00177100173, 0.16212596, 0.0665777773, 0.198038921, -0.0647350475, 0.14242503, -0.0978292301, 0.191312224, 0.108307615, -0.140067264, 0.120068245, 0.206574589, -0.0242259912]), 19: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0734148324, 0.0548627786, -0.117170386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.283204466, 0.0, 0.0, -0.30596593, 0.0, 0.0, -0.414013684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0338704139, 0.0, 0.220868066, 0.0, -0.0806375742, 0.118089005, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0174680501, 0.109163575, 0.0, -0.0555811636, 0.150430784, -0.306794405, 0.0, 0.0, 0.0, 0.123866647, -0.0616442524, 0.0, 0.0, 0.0, 0.0, 0.0401224457, 0.0, -0.227521166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.53902626, -0.138736948, -0.0629781187, 0.239985511, 0.0, 0.18982175, 0.0, 0.0, 0.0, 0.0, 0.0784443542, 0.165257379, 0.152653471, 0.0867419839, 0.160614148, 0.00777208945, -0.167319238, 0.0472526923, 0.176699504, 0.0998335108, -0.261692494, -0.00836503599, 0.1220624, -0.0411505513, 0.182321429, 0.0790324509, -0.1462228, 0.0511418357, -0.117844164, 0.0961996615, 0.14792639, 0.00309628202, 0.157925576, 0.0217990782, 0.091991581, -0.0106544783, -0.102142528, -0.0138747804, -0.106258519, 0.110428296, -0.137728944, 0.0961037278, -0.127783641, 0.134217992, -0.181581438, 0.114867955, -0.19823882, 0.136199981, 0.0568403453, 0.00177099952, -0.162125975, -0.0665777773, -0.198038921, 0.0647350624, -0.142425045, 0.0978292599, -0.191312224, -0.108307607, 0.140067264, -0.120068245, -0.206574589, 0.0242259875]), 20: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.149569735, 0.0, 0.0519567169, 0.0, 0.0, 0.0, 0.00923700724, 0.0, 0.060645137, 0.308588743, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.148021668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.200983226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.178751752, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.189003825, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.088310726, 0.0727581009, -0.143289059, 0.0, 0.0, 0.0, 0.0, 0.460108399, 0.0, -0.165453523, 0.0, -0.17287907, 0.0, -0.139830962, 0.0689999089, -0.133134559, 0.0, -0.110115975, 0.0, -0.173306569, 0.0, 0.39415279, -0.103247099, 0.0538230613, -0.172239885, 0.254668504, -0.119984299, 0.0555353165, 0.210648894, -0.141905516, 0.0116170552, -0.111813441, 0.0736304671, 0.156463131, -0.0702071488, -0.103065491, -0.0109654963, -0.19068487, -0.0481477268, 0.196904197, -0.202693239, 0.231451184, 0.0087680798, 0.0228600707, -0.162816182, 0.0615167394, 0.310190737, -0.0126311658, -0.276788473, 0.0391960815, -0.0702905431, -0.0122120026, 0.0388654396, -0.0714260042, 0.0389006808, 0.0467108153, -0.020388145, -0.0304868091, 0.135813281, -0.00473034149, 0.121488862, 0.0826679766, -0.0630500317, -0.0516235568, -0.118239954, -0.121606395, 0.227979302, -0.166569158, 0.0821723267, -0.0967780873, -0.0195101537, -0.0980076268, 0.226794481, -0.0958762914, 0.237203822, 0.307355613, -0.031926766, -0.16103889, -0.00337578752, -0.0422220081, 0.0466771275, 0.0536569692, -0.163752005, 0.0706827641, -0.108525351, -0.0934000388, 0.0298127681, 0.0935153738, -0.0943706557, 0.0433336236, -0.124780208, 0.179741398, -0.124671414, 0.282825142, 0.0454420373, 0.162001729, -0.146597087]), 21: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.149569616, 0.0, -0.0519567505, 0.0, 0.0, 0.0, -0.00923703704, 0.0, -0.0606451295, -0.308588773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.148021668, 0.0, 0.0, 0.0, 0.0, 0.0, -0.200983286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.178751737, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.189003825, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0883107483, -0.0727580786, 0.143289089, 0.0, 0.0, 0.0, 0.0, -0.460108429, 0.0, 0.165453523, 0.0, 0.17287907, 0.0, 0.139830962, -0.0689998791, 0.133134559, 0.0, 0.110115975, 0.0, 0.173306569, 0.0, -0.39415279, 0.103247114, -0.0538230613, 0.172239885, -0.254668504, 0.119984299, -0.0555353165, -0.210648894, 0.141905531, -0.0116170403, 0.111813441, -0.0736304596, -0.156463116, 0.0702071488, 0.103065491, 0.0109655, 0.19068487, 0.0481477268, -0.196904197, 0.202693239, -0.231451198, -0.00876807794, -0.0228600651, 0.162816182, -0.0615167394, -0.310190737, 0.0126311621, 0.276788443, -0.0391960852, 0.0702905431, 0.0122119989, -0.0388654396, 0.0714260042, -0.0389006808, -0.046710819, 0.0203881469, 0.0304868072, -0.135813281, 0.00473033497, -0.121488862, -0.0826679841, 0.0630500317, 0.0516235605, 0.118239954, 0.121606395, -0.227979317, 0.166569158, -0.0821723342, 0.0967780873, 0.0195101537, 0.0980076268, -0.226794481, 0.0958762765, -0.237203851, -0.307355613, 0.0319267586, 0.16103889, 0.00337578519, 0.0422220379, -0.0466771238, -0.0536569878, 0.163752019, -0.0706827343, 0.108525366, 0.0934000611, -0.0298127849, -0.0935153738, 0.0943706557, -0.043333631, 0.124780215, -0.179741398, 0.124671414, -0.282825172, -0.0454420373, -0.162001714, 0.146597087]), 22: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000993489986, 0.0, 0.0, 0.141170904, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.166312918, 0.0, -0.14105618, 0.0, 0.0964449719, 0.0, 0.0401852056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0467807613, 0.224822029, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0619545802, -0.212472349, 0.0, -0.177544132, 0.19584237, 0.0, -0.0903676301, 0.108014107, -0.215070441, 0.0, 0.0, 0.0, -0.023816172, 0.0877027959, 0.110385068, -0.073385179, 0.0672041252, -0.136040509, 0.0, 0.0, 0.0, 0.0, 0.266841412, -0.0366373323, -0.15605329, 0.00721219182, 0.0737750828, -0.0795598254, -0.166815385, 0.0, 0.0645308569, -0.138466075, -0.110478364, 0.0, 0.0, 0.0, -0.163693756, 0.0, 0.240751415, -0.0936123878, -0.0920774266, -0.0215061549, 0.0377876461, -0.0132466583, 0.0156055409, 0.312911212, 0.235953271, -0.234339252, 0.193852246, -0.0454625636, -0.0611151457, 0.162424341, 0.141459659, 0.0153420344, -0.16039826, 0.123783529, 0.0222950727, 0.15796946, -0.156123817, -0.00279764459, 0.00699595222, -0.00515602482, 0.0419016406, -0.153965995, 0.0572874285, -0.0957845226, 0.0378760174, -0.109622166, 0.377617031, 0.0752517059, -0.0506849661, 0.216083825, -0.158384755, -0.0170319043, 0.101505011, -0.131606519]), 23: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000993463676, 0.0, 0.0, -0.141170904, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.166312918, 0.0, 0.14105618, 0.0, -0.0964449123, 0.0, -0.040185187, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0467806868, -0.224821985, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0619546026, 0.212472349, 0.0, 0.177544132, -0.19584237, 0.0, 0.0903676227, -0.108014107, 0.215070441, 0.0, 0.0, 0.0, 0.0238161888, -0.0877028257, -0.110385068, 0.0733851716, -0.0672041476, 0.136040524, 0.0, 0.0, 0.0, 0.0, -0.266841441, 0.0366372876, 0.156053275, -0.00721216854, -0.0737750903, 0.0795598254, 0.166815385, 0.0, -0.0645308495, 0.138466075, 0.110478364, 0.0, 0.0, 0.0, 0.163693756, 0.0, -0.240751401, 0.0936123803, 0.0920774266, 0.0215061568, -0.0377876461, 0.0132466611, -0.0156055512, -0.312911212, -0.235953242, 0.234339252, -0.193852246, 0.0454625636, 0.0611151345, -0.162424326, -0.141459674, -0.0153420428, 0.16039826, -0.123783544, -0.0222950652, -0.15796946, 0.156123817, 0.00279763807, -0.0069959471, 0.00515604997, -0.0419016518, 0.153965995, -0.0572874509, 0.0957845226, -0.037876036, 0.10962218, -0.377617031, -0.0752517059, 0.0506849661, -0.216083825, 0.15838477, 0.0170318987, -0.101505063, 0.131606519]), 24: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.112854488, -0.104538724, 0.108090892, 0.0, 0.0, 0.0, 0.0, 0.151659742, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0408128761, -0.0352318846, 0.0, -0.103441097, 0.0396675169, -0.14448297, 0.141999006, -0.10476245, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25943768, 0.0, 0.0, -0.00803048722, -0.0943753347, 0.0449307077, 0.0103080571, 0.0756715611, 0.0, 0.0, 0.0, 0.0, -0.118340433, 0.267815173, 0.116184771, 0.0, 0.0, -0.173572585, 0.0917764455, 0.0, 0.0, -0.206141979, 0.0, 0.0, -0.116934344, 0.272857487, 0.0, 0.0754837468, 0.0, 0.1301523, 0.0, 0.0, 0.0, 0.0, -0.0680258796, -0.155469492, -0.0110022342, -0.124379262, 0.00446486985, 0.276065826, 0.0127239982, -0.122888923, 0.216266349, -0.0745581612, -0.11162395, 0.0335135944, -0.028466817, 0.0231995098, -0.0970346183, 0.0584214106, 0.0063123107, 0.205620289, -0.0531496853, 0.0820844397, 0.0518697426, 0.153233066, 0.0363347419, -0.17722854, -0.120235071, 0.0773354992, -0.152257502, 0.0326563455, 0.265705436, 0.0671532899, -0.115077615, 0.00276489346, -0.146902755, -0.0151974]), 25: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.11285457, 0.104538701, -0.108090885, 0.0, 0.0, 0.0, 0.0, -0.151659831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0408128686, 0.0352318995, 0.0, 0.103441127, -0.0396675207, 0.144483, -0.141998976, 0.10476245, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.25943768, 0.0, 0.0, 0.00803047046, 0.0943753198, -0.0449307114, -0.0103080021, -0.0756713897, 0.0, 0.0, 0.0, 0.0, 0.11834044, -0.267815113, -0.116184793, 0.0, 0.0, 0.173572585, -0.0917764455, 0.0, 0.0, 0.206141979, 0.0, 0.0, 0.116934344, -0.272857487, 0.0, -0.0754837394, 0.0, -0.130152315, 0.0, 0.0, 0.0, 0.0, 0.0680257455, 0.155469492, 0.0110022165, 0.124379262, -0.0044649085, -0.276065886, -0.0127239814, 0.122888923, -0.216266334, 0.0745581686, 0.11162395, -0.0335136056, 0.028466817, -0.0231995117, 0.0970346406, -0.0584214106, -0.00631231116, -0.205620289, 0.0531497002, -0.0820844322, -0.0518697426, -0.153233051, -0.0363347381, 0.17722854, 0.120235071, -0.0773354918, 0.152257502, -0.0326563828, -0.265705377, -0.0671532676, 0.115077607, -0.00276488648, 0.146902755, 0.0151974009]), 26: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.142759994, 0.0, 0.0, 0.0, 0.0, 0.0, -0.108697198, 0.106680632, 0.0, -0.000275351427, 0.0, 0.0, 0.0, -0.167830512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.165491462, 0.0, 0.211130321, -0.104977451, -0.148757949, 0.0, -0.130074486, 0.10168729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.274732023, 0.0, 0.0, 0.0, 0.0, -0.181219324, 0.0, 0.0, 0.0, -0.0928865075, 0.1626257, 0.0, 0.0, 0.0, 0.0, 0.0, 0.509873211, -0.171848908, 0.0, 0.0, 0.0, 0.0623888783, -0.196675092, 0.0, -0.160362482, 0.14816685, 0.0, 0.018717112, 0.0, 0.0, 0.0, -0.137288675, 0.0146289263, -0.158901557, 0.0435284786, -0.107890993, 0.119743183, -0.140380785, -0.0136569291, -0.0269062892, -0.131931975, -0.0618589222, 0.0244128201, 0.0751358792, -0.125078291, 0.0713643059, -0.0641613081, -0.0184398908, 0.00611165818, -0.0170300249, 0.0363356285, 0.163881257, -0.0383453034, -0.189548582, 0.0723027959, 0.168802604, 0.0333279409, 0.0916862562, -0.160015523, 0.167948589, -0.0219653174]), 27: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.142760023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.108697169, -0.106680684, 0.0, 0.000275347935, 0.0, 0.0, 0.0, 0.167830542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.165491462, 0.0, -0.211130366, 0.104977421, 0.148757949, 0.0, 0.130074471, -0.101687297, 0.0, 0.0, 0.0, 0.0, 0.0, -0.274732023, 0.0, 0.0, 0.0, 0.0, 0.181219324, 0.0, 0.0, 0.0, 0.0928864852, -0.162625745, 0.0, 0.0, 0.0, 0.0, 0.0, -0.509873152, 0.171848908, 0.0, 0.0, 0.0, -0.0623888746, 0.196675092, 0.0, 0.160362482, -0.14816685, 0.0, -0.0187171195, 0.0, 0.0, 0.0, 0.137288675, -0.0146288862, 0.158901557, -0.0435284711, 0.107891001, -0.119743191, 0.1403808, 0.0136569273, 0.0269062892, 0.131931975, 0.061858926, -0.0244128089, -0.0751358718, 0.125078306, -0.0713642985, 0.0641613156, 0.018439889, -0.00611165818, 0.0170300286, -0.0363356322, -0.163881272, 0.0383453071, 0.189548582, -0.0723027885, -0.168802604, -0.0333279558, -0.0916862413, 0.160015523, -0.167948589, 0.0219653137]), 28: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.161493585, -0.0498990454, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.126411065, 0.207095191, 0.0614382848, 0.0, 0.0116524613, 0.0, 0.120516129, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.298382252, 0.0, -0.186324015, 0.0, 0.0, 0.0, -0.0120533183, -0.158470765, 0.0231999066, -0.118032157, 0.121262468, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.126670256, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.042970255, 0.0, 0.0, 0.165747702, -0.0186284166, 0.0, 0.0, -0.0731461272, 0.231111676, 0.0519416295, -0.121675633, -0.13194935, 0.0688225105, -0.0135923913, 0.174499229, -0.198331922, -0.0310557336, 0.0186421815, -0.0128466198, -0.0492706671, 0.1263192, -0.148456633, -0.0210479349, -0.163526163, 0.0328025073, -0.0453163646, 0.219814435, -0.0924130529, 0.103713699, 0.0120626939, 0.282919973, 0.180514559, -0.0654273331, 0.323887587, 0.0491871238, 0.0835691616, -0.0801514685, 0.116426028, -0.0257447399, 0.0100921392, -0.24552922, -0.0499008223, -0.290875077, -0.182173789, 0.0974907801, 0.0043987548, 0.188868821, -0.0326689705, 0.223434821, 0.110989325, -0.103016108, -0.313492566, 0.161260813, 0.0113488734, 0.13674143, 0.303047031, 0.0482955873]), 29: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.161493614, 0.0498990938, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.126410931, -0.207095131, -0.0614383332, 0.0, -0.0116524417, 0.0, -0.120516077, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.298382252, 0.0, 0.186324015, 0.0, 0.0, 0.0, 0.0120533425, 0.158470765, -0.0231998879, 0.118032165, -0.121262431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.126670271, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0429702699, 0.0, 0.0, -0.165747702, 0.0186284166, 0.0, 0.0, 0.0731461272, -0.231111512, -0.0519414023, 0.121675648, 0.13194935, -0.0688225254, 0.0135923885, -0.174499229, 0.198331937, 0.0310557336, -0.0186421815, 0.0128466161, 0.0492706709, -0.126319215, 0.148456633, 0.021047933, 0.163526177, -0.0328024998, 0.0453163646, -0.21981442, 0.0924130529, -0.103713684, -0.0120626902, -0.282919973, -0.180514589, 0.0654273331, -0.323887557, -0.0491871238, -0.0835691616, 0.0801514685, -0.116426028, 0.0257447343, -0.0100921355, 0.24552922, 0.0499008261, 0.290875047, 0.182173789, -0.0974907726, -0.00439873571, -0.188868821, 0.0326689519, -0.223434821, -0.110989325, 0.103016108, 0.313492566, -0.161260828, -0.0113488669, -0.13674143, -0.303047031, -0.048295591]), 30: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.204808593, 0.0, -0.00163010729, 0.0, 0.0, 0.126503438, 0.0, -0.224754915, 0.429654419, 0.0, 0.0, 0.0, 0.0, 0.163424417, 0.0, -0.126789704, 0.0, 0.0, 0.220256805, 0.0636288896, 0.0, 0.0, -0.195887551, 0.0, -0.0481396504, 0.113806143, 0.093911238, -0.0601518638, 0.0, 0.0, -0.15777576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.178453088, 0.0557264239, -0.0333713107, -0.00944135245, 0.0114996005, -0.150019601, -0.0293087438, -0.0146369608, 0.227223292, 0.118313022, -0.101334535, 0.0942929462, -0.170691863, 0.1825286, -0.0617799349, 0.127632305, -0.126542136]), 31: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.204808593, 0.0, 0.00163010124, 0.0, 0.0, -0.126503453, 0.0, 0.224754915, -0.429654419, 0.0, 0.0, 0.0, 0.0, -0.163424417, 0.0, 0.126789719, 0.0, 0.0, -0.220256805, -0.0636288896, 0.0, 0.0, 0.195887551, 0.0, 0.0481396541, -0.113806114, -0.093911238, 0.0601518266, 0.0, 0.0, 0.157775715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.178453088, -0.0557264276, 0.0333713107, 0.00944135245, -0.0114996005, 0.150019601, 0.0293087643, 0.0146369562, -0.227223292, -0.118313007, 0.101334542, -0.0942929462, 0.170691863, -0.1825286, 0.0617799349, -0.127632305, 0.126542121]), 32: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0566359796, 0.0, 0.0, 0.0, 0.108612478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0395396575, 0.0, 0.0, 0.533989608, 0.0, 0.0, 0.0, -0.16559504, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0052273199, 0.200175911, 0.0, 0.0, 0.0, 0.0, 0.0, -0.150796041, -0.156074971, 0.0457639135, -0.132749692, 0.0, 0.0437097214, -0.155869141, 0.0, 0.0, -0.145144165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.232027635, 0.0, 0.0, 0.0, 0.344410717, 0.0, 0.0, 0.0, 0.0, -0.245847762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.200210035, -0.0104955761, 0.0, 0.269504637, 0.17407158, -0.107280053, -0.0830875561, 0.0173266213, -0.0782119483, 0.299627334, 0.165441945, -0.121373296, -0.131219953, 0.0484594032, 0.0518926792, -0.0920826569, 0.0131539246, -0.0959973484, -0.0138466526, 0.0824701339, 0.113504469, 0.0137268826, 0.550673842, 0.00531043252, -0.124093346, 0.0434681848, -0.138406515, 0.0881475136, 0.225218356, -0.0126886293, -0.00820372254, 0.0154326754, 0.182395697, 0.0153641282, -0.0230752751, -0.0832833797, 0.00392737845, 0.057485573, 0.150273025, -0.117142938, -0.0936521217, 0.105839483, 0.0443645269, -0.0979879722, -0.212448046, -0.066083841, 0.0457970947, -0.294939429, 0.0779918134, -0.145004347, 0.0909242779, 0.199340686, 0.0651865155, -0.111190498, 0.0563259125, -0.105423845, -0.0756977573, -0.009367886, -0.198699623, 0.104882486, 0.0464758836, -0.10322772, 0.128272206, -0.0335315317, -0.151298389, 0.149402454, 0.121425286, 0.0100022312]), 33: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0566359721, 0.0, 0.0, 0.0, -0.108612366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0395396166, 0.0, 0.0, -0.533989549, 0.0, 0.0, 0.0, 0.16559504, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00522732642, -0.200175926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.150796041, 0.156074986, -0.0457638986, 0.132749721, 0.0, -0.0437097773, 0.155869156, 0.0, 0.0, 0.145144179, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.232027635, 0.0, 0.0, 0.0, -0.344410717, 0.0, 0.0, 0.0, 0.0, 0.245847762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.20021008, 0.0104955547, 0.0, -0.269504637, -0.174071595, 0.107280076, 0.0830876157, -0.0173266325, 0.0782119781, -0.299627185, -0.165441751, 0.12137334, 0.131219953, -0.0484594144, -0.0518926866, 0.0920826495, -0.0131539227, 0.0959973484, 0.0138466554, -0.0824701414, -0.113504477, -0.0137268882, -0.550673902, -0.00531045021, 0.124093346, -0.043468181, 0.13840653, -0.0881475136, -0.225218356, 0.0126886414, 0.00820371974, -0.0154326754, -0.182395682, -0.0153641282, 0.0230752751, 0.0832833648, -0.00392737752, -0.0574855693, -0.150273025, 0.117142938, 0.0936521217, -0.105839483, -0.0443645269, 0.0979879647, 0.212448046, 0.0660838261, -0.0457971059, 0.294939429, -0.0779918134, 0.145004347, -0.0909242854, -0.199340716, -0.0651864931, 0.11119049, -0.056325987, 0.105423845, 0.0756977573, 0.00936787855, 0.198699623, -0.104882479, -0.0464758836, 0.10322772, -0.128272191, 0.0335315354, 0.151298389, -0.149402425, -0.121425286, -0.0100022284]), 34: np.array([0.0, 0.0, 0.0, 0.0, 0.0868798271, 0.0, 0.0, -0.00211690296, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0218640938, 0.0, 0.0, -0.196140036, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.215333179, 0.310944736, 0.0, 0.412174612, 0.0, -0.0195373986, 0.0, 0.0, 0.0, -0.190379634, 0.0, -0.0127525637, 0.0, 0.0, 0.116817199, -0.119648501, 0.0220653154, 0.0, 0.0, -0.0546161048, 0.0, 0.253888726, 0.0379600972, 0.0, -0.209849954, 0.00511562172, 0.0, 0.0, 0.0, 0.0063327183, 0.0, 0.0214813277, -0.114356227, 0.0345773511, 0.133002147, -0.0308124125, -0.162570238, 0.247664943, 0.0700126812, -0.0344438851, 0.00100491906, 0.2573888, 0.0531651489, 0.0581834465, 0.243771672, -0.133636862, -0.00238861982, 0.015207787, 0.160648629]), 35: np.array([0.0, 0.0, 0.0, 0.0, -0.0868798122, 0.0, 0.0, 0.00211689854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0218640845, 0.0, 0.0, 0.196140036, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.215333179, -0.310944796, 0.0, -0.412174612, 0.0, 0.0195373949, 0.0, 0.0, 0.0, 0.190379634, 0.0, 0.0127526009, 0.0, 0.0, -0.116817191, 0.119648501, -0.0220653396, 0.0, 0.0, 0.0546160862, 0.0, -0.253888756, -0.0379600972, 0.0, 0.209849954, -0.00511561334, 0.0, 0.0, 0.0, -0.00633269502, 0.0, -0.0214813352, 0.114356242, -0.0345773585, -0.133002177, 0.030812405, 0.162570223, -0.247664943, -0.070012711, 0.0344438925, -0.00100491894, -0.2573888, -0.0531651489, -0.0581834428, -0.243771657, 0.133636877, 0.00238863868, -0.0152077582, -0.160648629]), 36: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.185005531, 0.0498290993, 0.0, -0.147266045, 0.181546912, 0.0, 0.108861975, -0.10062822, -0.192880258, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.195149317, 0.168463379, -0.0250135176, 0.0, 0.0, -0.00740475068, 0.0905792564, 0.0, 0.0, -0.153141826, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0650033727, -0.19887124, -0.127075657, 0.0, 0.0, 0.0, 0.0, 0.0, -0.138904974, 0.097032465, 0.0, 0.0, 0.0, 0.0, 0.181097478, -0.0666801631, -0.11324124, 0.0960078314, -0.0701940954, 0.147041574, -0.141552538, 0.0185951553, -0.163619876, -0.00227909489, 0.186101943, -0.0153821874, 0.00131349161, -0.0561084375, -0.123048417, 0.086196363, 0.149900898, -0.00550560839, -0.0674329698, 0.135387182, 0.287991852, 0.13533558, 0.162453741, -0.138106897, 0.255800873, -0.0102766594, 0.124917418, -0.0488256998, 0.166590378, 0.0533726253, 0.202966332, -0.0587382317, -0.200786024, 0.0859612748]), 37: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.185005531, -0.0498290993, 0.0, 0.14726603, -0.181546926, 0.0, -0.10886196, 0.100628227, 0.192880258, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.195149332, -0.168463394, 0.0250135176, 0.0, 0.0, 0.00740475673, -0.0905792713, 0.0, 0.0, 0.153141826, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0650033951, 0.19887124, 0.127075657, 0.0, 0.0, 0.0, 0.0, 0.0, 0.138904974, -0.097032465, 0.0, 0.0, 0.0, 0.0, -0.181097478, 0.0666801408, 0.113241255, -0.0960078463, 0.0701940507, -0.147041515, 0.141552538, -0.0185951423, 0.163619861, 0.00227909093, -0.186101988, 0.0153821716, -0.00131349056, 0.0561084375, 0.123048417, -0.0861963481, -0.149900913, 0.00550562888, 0.0674329624, -0.135387167, -0.287991852, -0.13533558, -0.162453756, 0.138106897, -0.255800873, 0.0102766436, -0.12491741, 0.0488256924, -0.166590378, -0.053372629, -0.202966332, 0.0587382428, 0.200786024, -0.0859612748]), 38: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.177738279, -0.20976305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.253038228, -0.0460210815, 0.0431960411, -0.117418699, 0.00944633875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.123154148, 0.0466641821, 0.0, -0.0336972699, 0.352855146, 0.0893998519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.133500844, 0.0, 0.0, -0.0198188834, -0.15250361, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0574052334, -0.0859522298, -0.20610401, -0.076452896, 0.228199348, -0.0404451899, 0.00299654854, 0.117851511, 0.0328926034, -0.164738491, -0.191578031, 0.0256222952, 0.0487815365, -0.0932085812, -0.101301178, 0.0990501866, 0.0410161614, 0.211008161, -0.159480348, 0.0548417456, -0.0276690107, -0.174949154, 0.156978279, -0.129947841, -0.118242212, 0.00397158181, -0.151503712, 0.0314387716, 0.133216113, 0.000578945328, 0.119275384, -0.0413809009, -0.158127636, -0.0151763987, -0.0846184269, 0.068859458, 0.0610443391, -0.114246853, -0.107320689, 0.127846092, 0.405698866, 0.0325361714, -0.0239210892, 0.165201485, -0.0400984511, -0.00469328463, 0.11313498, -0.0599597581, -0.0124506243, -0.158918411, -0.111576147, 0.138036862, 0.0178150591, 0.0538913496, -0.0802866891, 0.0109450007, 0.180018142, -0.0675274655, 0.162966639, -0.0165921152]), 39: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.177738249, 0.20976305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.253038228, 0.0460210629, -0.0431960486, 0.117418706, -0.00944633409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.123154148, -0.0466641858, 0.0, 0.0336972438, -0.352855146, -0.0893998593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.133500844, 0.0, 0.0, 0.0198188741, 0.15250361, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0574052334, 0.0859522447, 0.20610401, 0.076452896, -0.228199348, 0.0404452048, -0.0029965525, -0.117851511, -0.0328926034, 0.164738491, 0.191578031, -0.0256222952, -0.0487815291, 0.0932085812, 0.101301178, -0.0990501866, -0.0410161503, -0.211008161, 0.159480348, -0.0548417158, 0.0276690442, 0.174949154, -0.156978309, 0.129947841, 0.118242212, -0.00397157902, 0.151503697, -0.0314387418, -0.133216128, -0.000578953244, -0.119275361, 0.0413809083, 0.158127636, 0.0151763959, 0.0846184194, -0.0688594282, -0.0610443428, 0.114246853, 0.107320681, -0.127846107, -0.405698657, -0.0325361863, 0.0239210874, -0.16520144, 0.0400984511, 0.00469328463, -0.113134995, 0.0599597581, 0.0124506075, 0.158918411, 0.111576162, -0.138036862, -0.0178150591, -0.0538913421, 0.0802866891, -0.0109449979, -0.180018172, 0.0675274655, -0.162966639, 0.0165921208]), 40: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0725811943, 0.0, 0.111296274, 0.0, 0.0, 0.0, 0.0, -0.178441077, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.174030259, 0.0129847452, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12881434, -0.0882700905, 0.0, 0.0, 0.0, -0.0705982521, -0.113784336, 0.0, 0.0, 0.0, 0.0, -0.194153294, 0.0, 0.0, 0.0, 0.0, -0.223449305, 0.0, 0.405131817, 0.0, -0.158266187, 0.0, 0.0, 0.0, 0.171352521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.250135213, 0.0, 0.0, 0.0, -0.381606162, -0.234447926, 0.0, -0.153750613, 0.0, 0.0951149315, 0.0, 0.0106416792, 0.185694456, 0.0, 0.0, -0.0764405504, 0.19556351, 0.0, -0.180896416, 0.132185757, -0.0702862367, -0.0360385142, -0.188980028, -0.163091958, 0.119409695, 0.169001281, -0.0842286125, -0.0431981385, 0.102470532, -0.0919601619, 0.107031114, 0.165670604, 0.0267410912, 0.0972044989, -0.0156848915, -0.153398439, 0.102550514, -0.0589063019, -0.191399559, 0.152370468, -0.0444964841, 0.0611288249, -0.0782156512, -0.0994127169, 0.180428654, -0.0134598427, 0.0196740273, 0.0973808989, 0.00598243345, -0.124767751, 0.0911541581, -0.058401715, 0.0833939314, -0.181851357, 0.0668544844, 0.0718512535, -0.183894798, -0.0429732054, 0.106537506, -0.0355397761, 0.153020754, -0.253013819, -0.0830912888, -0.0914238021, 0.104349032, 0.133469358, -0.0166234225, -0.106153838, 0.0122543769]), 41: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0725812018, 0.0, -0.111296214, 0.0, 0.0, 0.0, 0.0, 0.178441077, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.174030259, -0.0129847499, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.128814325, 0.0882700905, 0.0, 0.0, 0.0, 0.0705982447, 0.113784336, 0.0, 0.0, 0.0, 0.0, 0.194153294, 0.0, 0.0, 0.0, 0.0, 0.22344932, 0.0, -0.405131727, 0.0, 0.158266202, 0.0, 0.0, 0.0, -0.171352535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.250135213, 0.0, 0.0, 0.0, 0.381606162, 0.234447926, 0.0, 0.153750598, 0.0, -0.095114924, 0.0, -0.0106416643, -0.185694456, 0.0, 0.0, 0.0764405429, -0.195563525, 0.0, 0.180896401, -0.132185742, 0.0702862293, 0.0360384844, 0.188980028, 0.163091958, -0.119409718, -0.169001222, 0.0842286125, 0.0431981385, -0.102470532, 0.0919601768, -0.107031122, -0.165670604, -0.026741093, -0.0972044989, 0.0156849008, 0.153398424, -0.102550521, 0.0589063093, 0.191399559, -0.152370498, 0.0444964841, -0.0611288287, 0.0782156363, 0.0994127095, -0.180428654, 0.0134598454, -0.0196740292, -0.0973808989, -0.00598243205, 0.124767751, -0.0911541581, 0.0584017225, -0.0833939463, 0.181851357, -0.0668544769, -0.0718512535, 0.183894798, 0.0429732203, -0.106537506, 0.0355397686, -0.153020754, 0.253013849, 0.0830912814, 0.0914238021, -0.104349025, -0.133469358, 0.0166234132, 0.106153831, -0.0122543713]), 42: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0726936162, 0.0, 0.0, -0.00967666227, 0.0, -0.107879817, 0.121172279, 0.0142870834, 0.0, 0.0, 0.0, 0.0, -0.169569492, 0.15149346, 0.0, -0.194051027, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.105799899, -0.00590575486, 0.0588725172, -0.147063553, 0.0, -0.10209801, 0.0538391583, -0.103160225, 0.0, 0.142143875, 0.0, 0.185141549, 0.0, 0.0, 0.0, 0.0, 0.254665107, 0.027069794, -0.172035426, 0.000375278731, 0.0839998201, -0.045489721, -0.00166856241, 0.201466799, -0.161581919, 0.0190603025, 0.167315751, 0.0821226686, -0.137020484, 0.039831493]), 43: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0726936162, 0.0, 0.0, 0.00967664551, 0.0, 0.107879795, -0.121172279, -0.0142871095, 0.0, 0.0, 0.0, 0.0, 0.169569492, -0.151493445, 0.0, 0.194051027, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.105799876, 0.00590579212, -0.0588725097, 0.147063568, 0.0, 0.102098025, -0.0538391508, 0.103160225, 0.0, -0.14214386, 0.0, -0.185141549, 0.0, 0.0, 0.0, 0.0, -0.254665107, -0.0270698015, 0.172035426, -0.000375274307, -0.0839998275, 0.0454897322, 0.0016685623, -0.201466799, 0.161581919, -0.0190603118, -0.167315736, -0.0821226612, 0.137020484, -0.0398314968]), 44: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.155471966, -0.00335479644, -0.111459039, 0.0, 0.0, 0.0, 0.151435331, 0.0, -0.0162573922, 0.216425806, 0.0, 0.0, -0.180877, 0.0, 0.0, 0.105527334, 0.0, -0.1964017, 0.00466702599, 0.0, 0.0, 0.0, 0.015757421, -0.106446691, 0.0, 0.0, 0.0, 0.0419710726, 0.0, 0.206604511, -0.16207853, 0.0, -0.00845243223, 0.0275715515, -0.0770711973, 0.00104804698, 0.0425801575, 0.218985498, 0.188613802, -0.141582981, 0.214647293, -0.0445400067]), 45: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.155471981, 0.00335481134, 0.111459039, 0.0, 0.0, 0.0, -0.151435331, 0.0, 0.0162573941, -0.216425776, 0.0, 0.0, 0.180876985, 0.0, 0.0, -0.105527356, 0.0, 0.1964017, -0.00466702599, 0.0, 0.0, 0.0, -0.015757421, 0.106446691, 0.0, 0.0, 0.0, -0.0419710763, 0.0, -0.206604496, 0.162078544, 0.0, 0.00845243037, -0.0275715515, 0.0770711973, -0.00104804791, -0.0425801575, -0.218985498, -0.188613802, 0.141582966, -0.214647293, 0.0445399955])}
right_children_dict = {0: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, -1, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, -1, 45, -1, -1, 47, -1, 49, 51, 53, 55, 57, 59, 61, -1, 63, 65, 67, 69, 71, -1, 73, 75, -1, -1, -1, -1, 77, 79, 81, 83, 85, 87, 89, 91, 93, -1, 95, 97, 99, 101, 103, 105, 107, 109, 111, -1, -1, -1, 113, 115, 117, -1, 119, 121, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 1: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, -1, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, -1, 45, -1, -1, 47, -1, 49, 51, 53, 55, 57, 59, 61, -1, 63, 65, 67, 69, 71, -1, 73, 75, -1, -1, -1, -1, 77, 79, 81, 83, 85, 87, 89, 91, 93, -1, 95, 97, 99, 101, 103, 105, 107, 109, 111, -1, -1, -1, 113, 115, 117, -1, 119, 121, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 2: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, -1, 29, 31, 33, 35, 37, 39, 41, -1, 43, 45, 47, 49, -1, -1, 51, 53, 55, 57, 59, 61, -1, -1, 63, 65, 67, -1, 69, 71, 73, 75, 77, 79, 81, 83, 85, -1, 87, 89, 91, 93, 95, 97, 99, 101, -1, -1, -1, 103, 105, 107, 109, 111, 113, 115, -1, -1, -1, -1, 117, 119, 121, 123, 125, 127, 129, 131, 133, -1, 135, -1, 137, 139, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 3: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, -1, 29, 31, 33, 35, 37, 39, 41, -1, 43, 45, 47, 49, -1, -1, 51, 53, 55, 57, 59, 61, -1, -1, 63, 65, 67, -1, 69, 71, 73, 75, 77, 79, 81, 83, 85, -1, 87, 89, 91, 93, 95, 97, 99, 101, -1, -1, -1, 103, 105, 107, 109, 111, 113, 115, -1, -1, -1, -1, 117, 119, 121, 123, 125, 127, 129, 131, 133, -1, 135, -1, 137, 139, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 4: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, -1, 39, -1, -1, 41, 43, 45, 47, -1, 49, 51, -1, 53, 55, 57, -1, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, -1, -1, 89, 91, -1, 93, 95, 97, -1, 99, 101, -1, 103, 105, -1, 107, -1, -1, 109, -1, -1, 111, 113, 115, 117, 119, 121, -1, 123, -1, -1, 125, 127, 129, 131, 133, 135, 137, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 5: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, -1, 39, -1, -1, 41, 43, 45, 47, -1, 49, 51, -1, 53, 55, 57, -1, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, -1, -1, 89, 91, -1, 93, 95, 97, -1, 99, 101, -1, 103, 105, -1, 107, -1, -1, 109, -1, -1, 111, 113, 115, 117, 119, 121, -1, 123, -1, -1, 125, 127, 129, 131, 133, 135, 137, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 6: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, -1, 39, -1, -1, 41, 43, 45, -1, 47, -1, 49, 51, 53, 55, 57, -1, 59, 61, 63, 65, 67, 69, 71, 73, -1, 75, 77, 79, 81, 83, 85, -1, 87, 89, 91, 93, 95, 97, 99, -1, -1, 101, -1, -1, 103, 105, 107, 109, -1, 111, -1, -1, 113, 115, 117, 119, 121, -1, 123, 125, -1, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 7: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, -1, 39, -1, -1, 41, 43, 45, -1, 47, -1, 49, 51, 53, 55, 57, -1, 59, 61, 63, 65, 67, 69, 71, 73, -1, 75, 77, 79, 81, 83, 85, -1, 87, 89, 91, 93, 95, 97, 99, -1, -1, 101, -1, -1, 103, 105, 107, 109, -1, 111, -1, -1, 113, 115, 117, 119, 121, -1, 123, 125, -1, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 8: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, -1, 39, -1, -1, 41, 43, -1, 45, 47, -1, 49, 51, 53, -1, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, -1, 81, 83, 85, 87, 89, -1, 91, 93, 95, 97, -1, 99, 101, 103, -1, -1, 105, -1, 107, 109, -1, -1, -1, 111, 113, 115, 117, 119, 121, 123, -1, 125, 127, -1, 129, 131, 133, 135, 137, 139, 141, 143, -1, 145, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 9: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, -1, 39, -1, -1, 41, 43, -1, 45, 47, -1, 49, 51, 53, -1, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, -1, 81, 83, 85, 87, 89, -1, 91, 93, 95, 97, -1, 99, 101, 103, -1, -1, 105, -1, 107, 109, -1, -1, -1, 111, 113, 115, 117, 119, 121, 123, -1, 125, 127, -1, 129, 131, 133, 135, 137, 139, 141, 143, -1, 145, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 10: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, -1, -1, 35, -1, 37, 39, 41, 43, -1, 45, 47, -1, 49, -1, 51, 53, 55, 57, 59, 61, 63, 65, -1, 67, 69, 71, 73, 75, 77, -1, 79, 81, 83, 85, 87, 89, -1, 91, 93, 95, -1, 97, 99, 101, -1, -1, 103, 105, 107, 109, -1, -1, 111, 113, 115, 117, 119, 121, 123, 125, 127, -1, 129, 131, 133, 135, 137, -1, 139, 141, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 11: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, -1, -1, 35, -1, 37, 39, 41, 43, -1, 45, 47, -1, 49, -1, 51, 53, 55, 57, 59, 61, 63, 65, -1, 67, 69, 71, 73, 75, 77, -1, 79, 81, 83, 85, 87, 89, -1, 91, 93, 95, -1, 97, 99, 101, -1, -1, 103, 105, 107, 109, -1, -1, 111, 113, 115, 117, 119, 121, 123, 125, 127, -1, 129, 131, 133, 135, 137, -1, 139, 141, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 12: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, -1, -1, 35, 37, 39, -1, 41, 43, 45, 47, -1, -1, 49, -1, 51, 53, -1, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, -1, 87, 89, 91, 93, -1, -1, -1, -1, -1, -1, 95, 97, -1, 99, 101, -1, 103, 105, 107, 109, 111, 113, 115, -1, -1, 117, 119, 121, 123, 125, 127, 129, 131, 133, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 13: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, -1, -1, 35, 37, 39, -1, 41, 43, 45, 47, -1, -1, 49, -1, 51, 53, -1, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, -1, 87, 89, 91, 93, -1, -1, -1, -1, -1, -1, 95, 97, -1, 99, 101, -1, 103, 105, 107, 109, 111, 113, 115, -1, -1, 117, 119, 121, 123, 125, 127, 129, 131, 133, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 14: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, -1, -1, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, -1, 63, 65, -1, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, -1, -1, -1, 119, 121, 123, 125, 127, -1, 129, 131, 133, 135, 137, -1, 139, 141, -1, -1, 143, 145, -1, 147, 149, 151, 153, 155, 157, -1, -1, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, -1, 183, 185, 187, 189, 191, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 15: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, -1, -1, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, -1, 63, 65, -1, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, -1, -1, -1, 119, 121, 123, 125, 127, -1, 129, 131, 133, 135, 137, -1, 139, 141, -1, -1, 143, 145, -1, 147, 149, 151, 153, 155, 157, -1, -1, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, -1, 183, 185, 187, 189, 191, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 16: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, -1, -1, 35, 37, 39, -1, 41, 43, 45, -1, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, -1, -1, 71, 73, 75, 77, 79, 81, 83, -1, -1, 85, 87, 89, 91, 93, 95, 97, 99, -1, 101, 103, -1, -1, 105, 107, 109, 111, -1, 113, -1, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, -1, 145, 147, -1, 149, 151, 153, 155, 157, 159, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 17: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, -1, -1, 35, 37, 39, -1, 41, 43, 45, -1, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, -1, -1, 71, 73, 75, 77, 79, 81, 83, -1, -1, 85, 87, 89, 91, 93, 95, 97, 99, -1, 101, 103, -1, -1, 105, 107, 109, 111, -1, 113, -1, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, -1, 145, 147, -1, 149, 151, 153, 155, 157, 159, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 18: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, -1, -1, -1, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, -1, 75, 77, -1, 79, 81, -1, 83, 85, 87, 89, 91, 93, -1, 95, -1, 97, -1, -1, 99, 101, 103, 105, 107, -1, -1, 109, -1, -1, -1, 111, 113, 115, -1, -1, 117, 119, 121, 123, -1, 125, -1, 127, 129, 131, 133, 135, 137, 139, -1, -1, -1, -1, 141, -1, 143, 145, 147, 149, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 19: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, -1, -1, -1, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, -1, 75, 77, -1, 79, 81, -1, 83, 85, 87, 89, 91, 93, -1, 95, -1, 97, -1, -1, 99, 101, 103, 105, 107, -1, -1, 109, -1, -1, -1, 111, 113, 115, -1, -1, 117, 119, 121, 123, -1, 125, -1, 127, 129, 131, 133, 135, 137, 139, -1, -1, -1, -1, 141, -1, 143, 145, 147, 149, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 20: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, -1, 97, -1, 99, 101, 103, -1, 105, -1, -1, 107, 109, 111, 113, 115, 117, 119, -1, 121, 123, 125, 127, 129, -1, 131, 133, 135, 137, 139, 141, -1, 143, 145, 147, 149, 151, 153, 155, -1, 157, 159, 161, 163, 165, 167, 169, -1, -1, -1, 171, 173, 175, 177, -1, 179, -1, 181, -1, 183, -1, -1, -1, 185, -1, 187, -1, 189, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 21: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, -1, 97, -1, 99, 101, 103, -1, 105, -1, -1, 107, 109, 111, 113, 115, 117, 119, -1, 121, 123, 125, 127, 129, -1, 131, 133, 135, 137, 139, 141, -1, 143, 145, 147, 149, 151, 153, 155, -1, 157, 159, 161, 163, 165, 167, 169, -1, -1, -1, 171, 173, 175, 177, -1, 179, -1, 181, -1, 183, -1, -1, -1, 185, -1, 187, -1, 189, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 22: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, -1, 39, 41, -1, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, -1, 77, -1, 79, -1, 81, -1, 83, 85, 87, 89, 91, -1, -1, 93, 95, 97, 99, 101, 103, 105, 107, 109, -1, -1, 111, -1, -1, 113, -1, -1, -1, 115, 117, 119, -1, -1, -1, -1, -1, -1, 121, 123, 125, 127, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, -1, 131, 133, 135, -1, 137, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 23: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, -1, 39, 41, -1, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, -1, 77, -1, 79, -1, 81, -1, 83, 85, 87, 89, 91, -1, -1, 93, 95, 97, 99, 101, 103, 105, 107, 109, -1, -1, 111, -1, -1, 113, -1, -1, -1, 115, 117, 119, -1, -1, -1, -1, -1, -1, 121, 123, 125, 127, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, -1, 131, 133, 135, -1, 137, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 24: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, -1, -1, -1, 35, 37, 39, 41, -1, 43, 45, 47, 49, 51, 53, 55, 57, -1, -1, 59, -1, -1, -1, -1, -1, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, -1, 85, 87, -1, -1, -1, -1, -1, 89, 91, 93, 95, -1, -1, -1, 97, 99, -1, -1, 101, 103, -1, 105, 107, -1, -1, 109, -1, 111, -1, 113, 115, 117, 119, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 25: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, -1, -1, -1, 35, 37, 39, 41, -1, 43, 45, 47, 49, 51, 53, 55, 57, -1, -1, 59, -1, -1, -1, -1, -1, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, -1, 85, 87, -1, -1, -1, -1, -1, 89, 91, 93, 95, -1, -1, -1, 97, 99, -1, -1, 101, 103, -1, 105, 107, -1, -1, 109, -1, 111, -1, 113, 115, 117, 119, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 26: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, -1, 19, 21, 23, 25, 27, -1, -1, 29, -1, 31, 33, 35, -1, 37, 39, 41, 43, 45, 47, -1, 49, -1, -1, -1, 51, -1, -1, 53, 55, 57, 59, 61, -1, 63, 65, 67, 69, -1, 71, 73, 75, -1, -1, 77, 79, 81, 83, 85, -1, -1, 87, 89, 91, -1, -1, 93, -1, -1, 95, -1, 97, 99, 101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 27: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, -1, 19, 21, 23, 25, 27, -1, -1, 29, -1, 31, 33, 35, -1, 37, 39, 41, 43, 45, 47, -1, 49, -1, -1, -1, 51, -1, -1, 53, 55, 57, 59, 61, -1, 63, 65, 67, 69, -1, 71, 73, 75, -1, -1, 77, 79, 81, 83, 85, -1, -1, 87, 89, 91, -1, -1, 93, -1, -1, 95, -1, 97, 99, 101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 28: np.array([1, 3, 5, 7, 9, 11, 13, -1, -1, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, -1, -1, -1, 53, -1, 55, -1, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, -1, 81, -1, 83, 85, 87, -1, -1, -1, -1, -1, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, -1, 109, 111, 113, 115, 117, 119, 121, 123, 125, -1, 127, 129, -1, -1, 131, 133, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 29: np.array([1, 3, 5, 7, 9, 11, 13, -1, -1, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, -1, -1, -1, 53, -1, 55, -1, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, -1, 81, -1, 83, 85, 87, -1, -1, -1, -1, -1, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, -1, 109, 111, 113, 115, 117, 119, 121, 123, 125, -1, 127, 129, -1, -1, 131, 133, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 30: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, -1, 19, -1, 21, 23, -1, 25, -1, -1, 27, 29, 31, 33, -1, 35, -1, 37, 39, -1, -1, 41, 43, -1, 45, -1, -1, -1, -1, 47, 49, -1, 51, 53, 55, 57, 59, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 31: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, -1, 19, -1, 21, 23, -1, 25, -1, -1, 27, 29, 31, 33, -1, 35, -1, 37, 39, -1, -1, 41, 43, -1, 45, -1, -1, -1, -1, 47, 49, -1, 51, 53, 55, 57, 59, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 32: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, -1, 33, 35, 37, -1, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, -1, 59, 61, -1, 63, 65, 67, -1, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, -1, -1, 93, 95, 97, 99, 101, -1, -1, -1, -1, 103, -1, -1, 105, 107, -1, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, -1, 137, 139, 141, -1, 143, 145, 147, 149, -1, 151, 153, 155, 157, 159, 161, 163, -1, -1, 165, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 33: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, -1, 33, 35, 37, -1, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, -1, 59, 61, -1, 63, 65, 67, -1, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, -1, -1, 93, 95, 97, 99, 101, -1, -1, -1, -1, 103, -1, -1, 105, 107, -1, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, -1, 137, 139, 141, -1, 143, 145, 147, 149, -1, 151, 153, 155, 157, 159, 161, 163, -1, -1, 165, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 34: np.array([1, 3, 5, 7, -1, 9, 11, -1, 13, 15, 17, 19, 21, 23, -1, 25, 27, -1, 29, 31, 33, 35, 37, 39, -1, -1, 41, -1, 43, -1, 45, 47, 49, -1, 51, -1, 53, 55, -1, -1, -1, 57, 59, -1, 61, -1, -1, 63, -1, -1, 65, 67, 69, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 35: np.array([1, 3, 5, 7, -1, 9, 11, -1, 13, 15, 17, 19, 21, 23, -1, 25, 27, -1, 29, 31, 33, 35, 37, 39, -1, -1, 41, -1, 43, -1, 45, 47, 49, -1, 51, -1, 53, 55, -1, -1, -1, 57, 59, -1, 61, -1, -1, 63, -1, -1, 65, 67, 69, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 36: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, -1, -1, 39, -1, -1, 41, -1, -1, -1, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, -1, -1, -1, 63, 65, -1, -1, 67, 69, -1, 71, 73, 75, 77, 79, 81, 83, -1, -1, -1, 85, 87, 89, 91, 93, -1, -1, 95, 97, 99, 101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 37: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, -1, -1, 39, -1, -1, 41, -1, -1, -1, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, -1, -1, -1, 63, 65, -1, -1, 67, 69, -1, 71, 73, 75, 77, 79, 81, 83, -1, -1, -1, 85, 87, 89, 91, 93, -1, -1, 95, 97, 99, 101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 38: np.array([1, 3, 5, 7, 9, 11, 13, 15, -1, -1, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, -1, -1, -1, -1, -1, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, -1, -1, 105, -1, -1, -1, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, -1, 127, 129, -1, -1, 131, 133, 135, 137, 139, 141, 143, 145, 147, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 39: np.array([1, 3, 5, 7, 9, 11, 13, 15, -1, -1, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, -1, -1, -1, -1, -1, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, -1, -1, 105, -1, -1, -1, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, -1, 127, 129, -1, -1, 131, 133, 135, 137, 139, 141, 143, 145, 147, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 40: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, -1, 33, -1, 35, 37, 39, 41, -1, 43, 45, 47, 49, 51, 53, 55, -1, -1, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, -1, -1, 85, 87, 89, -1, -1, 91, 93, 95, 97, -1, 99, 101, 103, 105, -1, 107, -1, 109, -1, 111, 113, 115, -1, 117, 119, 121, 123, 125, 127, -1, 129, 131, 133, -1, -1, 135, -1, 137, -1, 139, -1, -1, 141, 143, -1, -1, 145, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 41: np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, -1, 33, -1, 35, 37, 39, 41, -1, 43, 45, 47, 49, 51, 53, 55, -1, -1, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, -1, -1, 85, 87, 89, -1, -1, 91, 93, 95, 97, -1, 99, 101, 103, 105, -1, 107, -1, 109, -1, 111, 113, 115, -1, 117, 119, 121, 123, 125, 127, -1, 129, 131, 133, -1, -1, 135, -1, 137, -1, 139, -1, -1, 141, 143, -1, -1, 145, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 42: np.array([1, 3, 5, 7, 9, 11, 13, 15, -1, 17, 19, -1, 21, -1, -1, -1, 23, 25, 27, 29, -1, -1, 31, -1, 33, 35, 37, 39, 41, 43, 45, -1, -1, -1, -1, 47, -1, -1, -1, 49, -1, 51, -1, 53, 55, 57, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 43: np.array([1, 3, 5, 7, 9, 11, 13, 15, -1, 17, 19, -1, 21, -1, -1, -1, 23, 25, 27, 29, -1, -1, 31, -1, 33, 35, 37, 39, 41, 43, 45, -1, -1, -1, -1, 47, -1, -1, -1, 49, -1, 51, -1, 53, 55, 57, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 44: np.array([1, 3, 5, 7, 9, 11, 13, -1, -1, -1, 15, 17, 19, -1, 21, -1, -1, 23, 25, -1, 27, 29, -1, 31, -1, -1, 33, 35, 37, -1, -1, 39, 41, 43, -1, 45, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), 45: np.array([1, 3, 5, 7, 9, 11, 13, -1, -1, -1, 15, 17, 19, -1, 21, -1, -1, 23, 25, -1, 27, 29, -1, 31, -1, -1, 33, 35, 37, -1, -1, 39, 41, 43, -1, 45, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])}
split_feats_dict = {0: np.array([10, 7, 10, 4, 4, 10, 0, 7, 5, 11, 0, 0, 0, 10, 4, 7, 4, 5, 10, 4, 11, 10, 12, 0, 10, 0, 0, 0, 0, 0, 11, 12, 11, 10, 11, 11, 0, 0, 0, 11, 0, 2, 0, 13, 4, 0, 0, 0, 0, 1, 4, 10, 11, 11, 0, 0, 11, 3, 0, 12, 11, 12, 0, 2, 12, 12, 12, 12, 0, 0, 0, 13, 12, 11, 0, 6, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 1: np.array([10, 7, 10, 4, 4, 10, 0, 7, 5, 11, 0, 0, 0, 10, 4, 7, 4, 5, 10, 4, 11, 10, 12, 0, 10, 0, 0, 0, 0, 0, 11, 12, 11, 10, 11, 11, 0, 0, 0, 11, 0, 2, 0, 13, 4, 0, 0, 0, 0, 1, 4, 10, 11, 11, 0, 0, 11, 3, 0, 12, 11, 12, 0, 2, 12, 12, 12, 12, 0, 0, 0, 13, 12, 11, 0, 6, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 2: np.array([7, 4, 10, 10, 10, 4, 0, 7, 5, 5, 10, 4, 0, 2, 0, 7, 4, 5, 10, 5, 10, 7, 0, 0, 12, 12, 11, 0, 0, 0, 11, 12, 0, 6, 0, 0, 0, 9, 0, 3, 0, 8, 10, 10, 11, 11, 0, 10, 13, 4, 0, 1, 4, 10, 4, 11, 11, 0, 12, 0, 0, 0, 6, 6, 4, 0, 6, 11, 0, 0, 0, 0, 0, 11, 3, 4, 11, 0, 2, 11, 5, 3, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 3: np.array([7, 4, 10, 10, 10, 4, 0, 7, 5, 5, 10, 4, 0, 2, 0, 7, 4, 5, 10, 5, 10, 7, 0, 0, 12, 12, 11, 0, 0, 0, 11, 12, 0, 6, 0, 0, 0, 9, 0, 3, 0, 8, 10, 10, 11, 11, 0, 10, 13, 4, 0, 1, 4, 10, 4, 11, 11, 0, 12, 0, 0, 0, 6, 6, 4, 0, 6, 11, 0, 0, 0, 0, 0, 11, 3, 4, 11, 0, 2, 11, 5, 3, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 4: np.array([5, 10, 10, 4, 10, 5, 5, 11, 0, 10, 0, 4, 4, 0, 10, 0, 11, 11, 4, 0, 10, 0, 0, 4, 11, 7, 12, 0, 10, 12, 0, 2, 12, 11, 0, 12, 11, 11, 11, 0, 2, 4, 12, 0, 11, 6, 12, 10, 9, 10, 0, 0, 10, 2, 0, 6, 3, 5, 0, 3, 13, 0, 11, 12, 0, 0, 0, 0, 6, 0, 0, 12, 0, 7, 0, 0, 10, 0, 11, 0, 0, 11, 3, 6, 0, 1, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 5: np.array([5, 10, 10, 4, 10, 5, 5, 11, 0, 10, 0, 4, 4, 0, 10, 0, 11, 11, 4, 0, 10, 0, 0, 4, 11, 7, 12, 0, 10, 12, 0, 2, 12, 11, 0, 12, 11, 11, 11, 0, 2, 4, 12, 0, 11, 6, 12, 10, 9, 10, 0, 0, 10, 2, 0, 6, 3, 5, 0, 3, 13, 0, 11, 12, 0, 0, 0, 0, 6, 0, 0, 12, 0, 7, 0, 0, 10, 0, 11, 0, 0, 11, 3, 6, 0, 1, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 6: np.array([5, 10, 4, 4, 10, 5, 5, 11, 0, 10, 0, 10, 10, 10, 12, 0, 11, 11, 12, 0, 10, 0, 0, 11, 0, 12, 0, 12, 0, 10, 6, 2, 12, 11, 0, 12, 6, 0, 2, 10, 0, 4, 11, 0, 10, 7, 6, 7, 11, 11, 0, 6, 4, 2, 12, 6, 8, 5, 0, 0, 2, 0, 0, 11, 9, 2, 2, 0, 5, 0, 0, 12, 0, 2, 11, 10, 0, 6, 6, 0, 6, 13, 12, 10, 11, 3, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 7: np.array([5, 10, 4, 4, 10, 5, 5, 11, 0, 10, 0, 10, 10, 10, 12, 0, 11, 11, 12, 0, 10, 0, 0, 11, 0, 12, 0, 12, 0, 10, 6, 2, 12, 11, 0, 12, 6, 0, 2, 10, 0, 4, 11, 0, 10, 7, 6, 7, 11, 11, 0, 6, 4, 2, 12, 6, 8, 5, 0, 0, 2, 0, 0, 11, 9, 2, 2, 0, 5, 0, 0, 12, 0, 2, 11, 10, 0, 6, 6, 0, 6, 13, 12, 10, 11, 3, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 8: np.array([5, 10, 5, 4, 10, 10, 4, 0, 0, 10, 0, 4, 0, 10, 10, 11, 9, 11, 12, 0, 5, 0, 0, 12, 11, 0, 10, 12, 0, 12, 0, 2, 0, 13, 8, 12, 6, 11, 7, 12, 10, 7, 0, 11, 11, 10, 0, 5, 3, 2, 9, 0, 0, 2, 5, 4, 6, 0, 0, 11, 0, 0, 0, 6, 0, 10, 2, 0, 0, 0, 4, 0, 11, 1, 4, 4, 0, 0, 11, 6, 0, 11, 12, 6, 2, 2, 3, 1, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 9: np.array([5, 10, 5, 4, 10, 10, 4, 0, 0, 10, 0, 4, 0, 10, 10, 11, 9, 11, 12, 0, 5, 0, 0, 12, 11, 0, 10, 12, 0, 12, 0, 2, 0, 13, 8, 12, 6, 11, 7, 12, 10, 7, 0, 11, 11, 10, 0, 5, 3, 2, 9, 0, 0, 2, 5, 4, 6, 0, 0, 11, 0, 0, 0, 6, 0, 10, 2, 0, 0, 0, 4, 0, 11, 1, 4, 4, 0, 0, 11, 6, 0, 11, 12, 6, 2, 2, 3, 1, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 10: np.array([5, 4, 5, 10, 0, 10, 4, 0, 10, 10, 10, 12, 0, 10, 10, 12, 9, 0, 0, 11, 0, 6, 8, 6, 6, 0, 10, 12, 0, 12, 0, 2, 13, 13, 8, 0, 6, 13, 12, 0, 0, 6, 3, 6, 6, 10, 0, 9, 6, 0, 1, 3, 3, 0, 3, 2, 2, 0, 7, 7, 2, 0, 0, 0, 6, 2, 10, 0, 0, 0, 11, 8, 0, 0, 2, 6, 6, 6, 0, 7, 4, 2, 3, 8, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 11: np.array([5, 4, 5, 10, 0, 10, 4, 0, 10, 10, 10, 12, 0, 10, 10, 12, 9, 0, 0, 11, 0, 6, 8, 6, 6, 0, 10, 12, 0, 12, 0, 2, 13, 13, 8, 0, 6, 13, 12, 0, 0, 6, 3, 6, 6, 10, 0, 9, 6, 0, 1, 3, 3, 0, 3, 2, 2, 0, 7, 7, 2, 0, 0, 0, 6, 2, 10, 0, 0, 0, 11, 8, 0, 0, 2, 6, 6, 6, 0, 7, 4, 2, 3, 8, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 12: np.array([0, 0, 10, 10, 7, 5, 0, 11, 10, 12, 10, 4, 5, 2, 10, 12, 0, 0, 0, 1, 10, 2, 0, 12, 4, 0, 6, 0, 0, 10, 0, 3, 2, 0, 4, 3, 12, 6, 10, 12, 4, 0, 6, 11, 2, 13, 11, 6, 4, 5, 0, 13, 5, 6, 2, 0, 0, 0, 0, 0, 0, 4, 2, 0, 10, 1, 0, 1, 12, 5, 9, 2, 8, 7, 0, 0, 0, 2, 13, 12, 2, 4, 0, 6, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 13: np.array([0, 0, 10, 10, 7, 5, 0, 11, 10, 12, 10, 4, 5, 2, 10, 12, 0, 0, 0, 1, 10, 2, 0, 12, 4, 0, 6, 0, 0, 10, 0, 3, 2, 0, 4, 3, 12, 6, 10, 12, 4, 0, 6, 11, 2, 13, 11, 6, 4, 5, 0, 13, 5, 6, 2, 0, 0, 0, 0, 0, 0, 4, 2, 0, 10, 1, 0, 1, 12, 5, 9, 2, 8, 7, 0, 0, 0, 2, 13, 12, 2, 4, 0, 6, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 14: np.array([0, 0, 6, 10, 7, 6, 6, 11, 10, 12, 4, 0, 10, 5, 6, 12, 0, 0, 0, 3, 1, 1, 12, 2, 9, 6, 10, 3, 1, 10, 4, 3, 2, 0, 4, 3, 0, 4, 2, 13, 6, 2, 2, 2, 2, 11, 12, 12, 6, 2, 10, 12, 2, 12, 1, 12, 2, 10, 6, 6, 5, 7, 12, 0, 0, 0, 10, 2, 2, 2, 0, 0, 10, 9, 2, 6, 2, 0, 6, 2, 0, 0, 8, 5, 0, 0, 7, 2, 3, 5, 5, 0, 0, 5, 10, 6, 2, 12, 9, 6, 12, 10, 12, 1, 0, 0, 10, 12, 0, 12, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 15: np.array([0, 0, 6, 10, 7, 6, 6, 11, 10, 12, 4, 0, 10, 5, 6, 12, 0, 0, 0, 3, 1, 1, 12, 2, 9, 6, 10, 3, 1, 10, 4, 3, 2, 0, 4, 3, 0, 4, 2, 13, 6, 2, 2, 2, 2, 11, 12, 12, 6, 2, 10, 12, 2, 12, 1, 12, 2, 10, 6, 6, 5, 7, 12, 0, 0, 0, 10, 2, 2, 2, 0, 0, 10, 9, 2, 6, 2, 0, 6, 2, 0, 0, 8, 5, 0, 0, 7, 2, 3, 5, 5, 0, 0, 5, 10, 6, 2, 12, 9, 6, 12, 10, 12, 1, 0, 0, 10, 12, 0, 12, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 16: np.array([0, 0, 5, 10, 11, 7, 5, 12, 4, 6, 2, 9, 11, 10, 4, 1, 2, 0, 0, 12, 3, 2, 0, 4, 6, 6, 0, 10, 0, 2, 9, 11, 3, 2, 2, 10, 4, 2, 5, 0, 0, 13, 2, 6, 6, 2, 2, 10, 0, 0, 10, 1, 10, 3, 1, 5, 4, 0, 0, 5, 7, 0, 0, 2, 4, 2, 2, 0, 2, 0, 2, 10, 0, 11, 3, 5, 1, 0, 4, 3, 12, 3, 2, 10, 6, 0, 10, 2, 0, 11, 2, 2, 0, 2, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 17: np.array([0, 0, 5, 10, 11, 7, 5, 12, 4, 6, 2, 9, 11, 10, 4, 1, 2, 0, 0, 12, 3, 2, 0, 4, 6, 6, 0, 10, 0, 2, 9, 11, 3, 2, 2, 10, 4, 2, 5, 0, 0, 13, 2, 6, 6, 2, 2, 10, 0, 0, 10, 1, 10, 3, 1, 5, 4, 0, 0, 5, 7, 0, 0, 2, 4, 2, 2, 0, 2, 0, 2, 10, 0, 11, 3, 5, 1, 0, 4, 3, 12, 3, 2, 10, 6, 0, 10, 2, 0, 11, 2, 2, 0, 2, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 18: np.array([0, 5, 4, 10, 12, 12, 11, 11, 0, 6, 2, 10, 2, 11, 11, 4, 0, 0, 0, 3, 0, 6, 4, 4, 10, 2, 1, 11, 11, 0, 11, 13, 0, 2, 11, 0, 7, 12, 12, 12, 0, 13, 0, 0, 10, 5, 0, 0, 6, 10, 4, 12, 11, 0, 2, 0, 11, 0, 0, 13, 4, 0, 2, 6, 0, 0, 2, 0, 0, 0, 4, 2, 2, 0, 0, 0, 13, 2, 6, 0, 10, 0, 4, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 19: np.array([0, 5, 4, 10, 12, 12, 11, 11, 0, 6, 2, 10, 2, 11, 11, 4, 0, 0, 0, 3, 0, 6, 4, 4, 10, 2, 1, 11, 11, 0, 11, 13, 0, 2, 11, 0, 7, 12, 12, 12, 0, 13, 0, 0, 10, 5, 0, 0, 6, 10, 4, 12, 11, 0, 2, 0, 11, 0, 0, 13, 4, 0, 2, 6, 0, 0, 2, 0, 0, 0, 4, 2, 2, 0, 0, 0, 13, 2, 6, 0, 10, 0, 4, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 20: np.array([7, 0, 5, 12, 0, 4, 4, 7, 0, 4, 1, 13, 2, 12, 5, 8, 9, 1, 13, 1, 0, 12, 2, 6, 12, 2, 2, 6, 4, 8, 0, 1, 4, 0, 4, 13, 2, 2, 2, 8, 1, 2, 2, 3, 2, 2, 2, 4, 0, 10, 0, 6, 2, 12, 0, 1, 0, 0, 1, 0, 3, 6, 4, 0, 6, 0, 12, 11, 6, 2, 2, 0, 8, 2, 4, 2, 1, 2, 0, 6, 2, 2, 6, 2, 2, 0, 0, 12, 2, 9, 6, 2, 0, 10, 0, 0, 0, 11, 4, 2, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 21: np.array([7, 0, 5, 12, 0, 4, 4, 7, 0, 4, 1, 13, 2, 12, 5, 8, 9, 1, 13, 1, 0, 12, 2, 6, 12, 2, 2, 6, 4, 8, 0, 1, 4, 0, 4, 13, 2, 2, 2, 8, 1, 2, 2, 3, 2, 2, 2, 4, 0, 10, 0, 6, 2, 12, 0, 1, 0, 0, 1, 0, 3, 6, 4, 0, 6, 0, 12, 11, 6, 2, 2, 0, 8, 2, 4, 2, 1, 2, 0, 6, 2, 2, 6, 2, 2, 0, 0, 12, 2, 9, 6, 2, 0, 10, 0, 0, 0, 11, 4, 2, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 22: np.array([7, 10, 5, 11, 0, 4, 4, 11, 11, 2, 10, 13, 2, 12, 5, 11, 11, 7, 11, 0, 3, 10, 0, 6, 12, 2, 12, 6, 12, 6, 0, 6, 2, 12, 11, 6, 3, 0, 4, 9, 0, 7, 0, 3, 0, 10, 0, 6, 2, 2, 0, 1, 0, 0, 4, 0, 2, 6, 4, 5, 6, 6, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 2, 11, 0, 0, 0, 0, 0, 0, 11, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 23: np.array([7, 10, 5, 11, 0, 4, 4, 11, 11, 2, 10, 13, 2, 12, 5, 11, 11, 7, 11, 0, 3, 10, 0, 6, 12, 2, 12, 6, 12, 6, 0, 6, 2, 12, 11, 6, 3, 0, 4, 9, 0, 7, 0, 3, 0, 10, 0, 6, 2, 2, 0, 1, 0, 0, 4, 0, 2, 6, 4, 5, 6, 6, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 2, 11, 0, 0, 0, 0, 0, 0, 11, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 24: np.array([0, 12, 5, 1, 3, 4, 5, 10, 6, 12, 2, 0, 2, 13, 6, 11, 3, 0, 0, 0, 2, 2, 2, 2, 0, 7, 7, 10, 4, 0, 7, 5, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 2, 10, 12, 1, 3, 5, 1, 0, 12, 13, 0, 0, 0, 0, 0, 2, 6, 13, 2, 0, 0, 0, 0, 0, 0, 0, 10, 10, 0, 4, 6, 0, 0, 0, 0, 10, 0, 12, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 25: np.array([0, 12, 5, 1, 3, 4, 5, 10, 6, 12, 2, 0, 2, 13, 6, 11, 3, 0, 0, 0, 2, 2, 2, 2, 0, 7, 7, 10, 4, 0, 7, 5, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 2, 10, 12, 1, 3, 5, 1, 0, 12, 13, 0, 0, 0, 0, 0, 2, 6, 13, 2, 0, 0, 0, 0, 0, 0, 0, 10, 10, 0, 4, 6, 0, 0, 0, 0, 10, 0, 12, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 26: np.array([0, 12, 4, 13, 7, 12, 11, 13, 10, 0, 4, 12, 1, 11, 11, 0, 0, 0, 0, 6, 6, 4, 0, 0, 2, 11, 11, 2, 11, 0, 3, 0, 0, 0, 5, 0, 0, 2, 4, 2, 2, 6, 0, 12, 11, 6, 0, 0, 11, 12, 11, 0, 0, 12, 2, 2, 2, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 27: np.array([0, 12, 4, 13, 7, 12, 11, 13, 10, 0, 4, 12, 1, 11, 11, 0, 0, 0, 0, 6, 6, 4, 0, 0, 2, 11, 11, 2, 11, 0, 3, 0, 0, 0, 5, 0, 0, 2, 4, 2, 2, 6, 0, 12, 11, 6, 0, 0, 11, 12, 11, 0, 0, 12, 2, 2, 2, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 28: np.array([0, 12, 1, 6, 3, 1, 0, 0, 0, 1, 12, 8, 2, 2, 0, 2, 2, 11, 3, 0, 13, 13, 1, 4, 0, 4, 0, 8, 0, 0, 0, 7, 0, 2, 0, 2, 2, 0, 0, 2, 7, 6, 6, 0, 5, 3, 2, 0, 2, 0, 7, 2, 12, 0, 0, 0, 0, 0, 11, 1, 2, 7, 11, 13, 2, 2, 11, 6, 0, 2, 0, 0, 7, 2, 4, 12, 2, 12, 0, 6, 6, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 29: np.array([0, 12, 1, 6, 3, 1, 0, 0, 0, 1, 12, 8, 2, 2, 0, 2, 2, 11, 3, 0, 13, 13, 1, 4, 0, 4, 0, 8, 0, 0, 0, 7, 0, 2, 0, 2, 2, 0, 0, 2, 7, 6, 6, 0, 5, 3, 2, 0, 2, 0, 7, 2, 12, 0, 0, 0, 0, 0, 11, 1, 2, 7, 11, 13, 2, 2, 11, 6, 0, 2, 0, 0, 7, 2, 4, 12, 2, 12, 0, 6, 6, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 30: np.array([10, 10, 0, 10, 10, 0, 10, 10, 4, 0, 10, 0, 7, 10, 0, 7, 0, 0, 3, 4, 10, 10, 0, 7, 0, 2, 0, 0, 0, 12, 10, 0, 10, 0, 0, 0, 0, 2, 4, 0, 8, 8, 2, 10, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 31: np.array([10, 10, 0, 10, 10, 0, 10, 10, 4, 0, 10, 0, 7, 10, 0, 7, 0, 0, 3, 4, 10, 10, 0, 7, 0, 2, 0, 0, 0, 12, 10, 0, 10, 0, 0, 0, 0, 2, 4, 0, 8, 8, 2, 10, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 32: np.array([5, 4, 5, 9, 12, 2, 9, 12, 6, 11, 9, 1, 12, 7, 0, 13, 0, 5, 6, 2, 0, 0, 2, 1, 2, 2, 12, 6, 12, 2, 2, 0, 13, 0, 0, 3, 3, 2, 0, 2, 2, 2, 6, 2, 0, 2, 12, 2, 2, 4, 13, 0, 0, 4, 2, 2, 2, 2, 0, 0, 0, 0, 12, 0, 0, 0, 12, 0, 9, 11, 6, 0, 1, 7, 3, 0, 2, 6, 0, 8, 12, 6, 0, 13, 2, 0, 0, 4, 1, 0, 2, 0, 0, 12, 2, 4, 1, 3, 11, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 33: np.array([5, 4, 5, 9, 12, 2, 9, 12, 6, 11, 9, 1, 12, 7, 0, 13, 0, 5, 6, 2, 0, 0, 2, 1, 2, 2, 12, 6, 12, 2, 2, 0, 13, 0, 0, 3, 3, 2, 0, 2, 2, 2, 6, 2, 0, 2, 12, 2, 2, 4, 13, 0, 0, 4, 2, 2, 2, 2, 0, 0, 0, 0, 12, 0, 0, 0, 12, 0, 9, 11, 6, 0, 1, 7, 3, 0, 2, 6, 0, 8, 12, 6, 0, 13, 2, 0, 0, 4, 1, 0, 2, 0, 0, 12, 2, 4, 1, 3, 11, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 34: np.array([13, 4, 13, 12, 0, 2, 10, 0, 6, 2, 2, 10, 0, 2, 0, 0, 2, 0, 0, 10, 10, 2, 10, 3, 0, 0, 2, 0, 2, 0, 2, 10, 12, 0, 10, 0, 12, 10, 0, 0, 0, 2, 2, 0, 7, 0, 0, 4, 0, 0, 3, 10, 10, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 35: np.array([13, 4, 13, 12, 0, 2, 10, 0, 6, 2, 2, 10, 0, 2, 0, 0, 2, 0, 0, 10, 10, 2, 10, 3, 0, 0, 2, 0, 2, 0, 2, 10, 12, 0, 10, 0, 12, 10, 0, 0, 0, 2, 2, 0, 7, 0, 0, 4, 0, 0, 3, 10, 10, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 36: np.array([11, 11, 11, 11, 11, 7, 11, 0, 2, 2, 11, 6, 9, 0, 11, 12, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 11, 6, 2, 2, 12, 2, 2, 2, 6, 0, 0, 0, 4, 6, 0, 0, 11, 0, 0, 11, 2, 10, 12, 2, 0, 5, 0, 0, 0, 1, 3, 11, 9, 3, 0, 0, 11, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 37: np.array([11, 11, 11, 11, 11, 7, 11, 0, 2, 2, 11, 6, 9, 0, 11, 12, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 11, 6, 2, 2, 12, 2, 2, 2, 6, 0, 0, 0, 4, 6, 0, 0, 11, 0, 0, 11, 2, 10, 12, 2, 0, 5, 0, 0, 0, 1, 3, 11, 9, 3, 0, 0, 11, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 38: np.array([7, 12, 12, 13, 4, 6, 9, 2, 0, 0, 2, 2, 0, 6, 0, 2, 2, 0, 2, 12, 0, 6, 3, 0, 6, 2, 12, 2, 12, 2, 0, 2, 6, 0, 0, 0, 0, 0, 2, 12, 3, 6, 6, 6, 2, 0, 4, 12, 0, 6, 3, 0, 6, 2, 6, 0, 1, 2, 4, 0, 0, 6, 0, 0, 0, 13, 1, 0, 1, 0, 2, 0, 0, 3, 2, 0, 5, 4, 0, 0, 13, 2, 12, 4, 6, 6, 6, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 39: np.array([7, 12, 12, 13, 4, 6, 9, 2, 0, 0, 2, 2, 0, 6, 0, 2, 2, 0, 2, 12, 0, 6, 3, 0, 6, 2, 12, 2, 12, 2, 0, 2, 6, 0, 0, 0, 0, 0, 2, 12, 3, 6, 6, 6, 2, 0, 4, 12, 0, 6, 3, 0, 6, 2, 6, 0, 1, 2, 4, 0, 0, 6, 0, 0, 0, 13, 1, 0, 1, 0, 2, 0, 0, 3, 2, 0, 5, 4, 0, 0, 13, 2, 12, 4, 6, 6, 6, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 40: np.array([4, 8, 1, 7, 6, 2, 0, 6, 2, 2, 6, 0, 2, 2, 0, 2, 0, 2, 0, 2, 2, 12, 2, 0, 0, 0, 0, 3, 12, 12, 12, 0, 0, 0, 12, 3, 0, 9, 2, 2, 12, 0, 12, 2, 7, 0, 2, 0, 0, 6, 0, 12, 0, 0, 9, 3, 2, 1, 0, 12, 2, 2, 2, 0, 4, 0, 3, 0, 7, 0, 0, 0, 13, 1, 2, 6, 2, 0, 0, 2, 12, 2, 0, 0, 5, 0, 0, 0, 12, 0, 0, 3, 10, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 41: np.array([4, 8, 1, 7, 6, 2, 0, 6, 2, 2, 6, 0, 2, 2, 0, 2, 0, 2, 0, 2, 2, 12, 2, 0, 0, 0, 0, 3, 12, 12, 12, 0, 0, 0, 12, 3, 0, 9, 2, 2, 12, 0, 12, 2, 7, 0, 2, 0, 0, 6, 0, 12, 0, 0, 9, 3, 2, 1, 0, 12, 2, 2, 2, 0, 4, 0, 3, 0, 7, 0, 0, 0, 13, 1, 2, 6, 2, 0, 0, 2, 12, 2, 0, 0, 5, 0, 0, 0, 12, 0, 0, 3, 10, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 42: np.array([10, 13, 5, 4, 13, 12, 10, 12, 0, 4, 13, 0, 0, 0, 0, 0, 6, 6, 0, 11, 0, 0, 6, 0, 2, 3, 0, 1, 2, 11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 2, 0, 11, 11, 6, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 43: np.array([10, 13, 5, 4, 13, 12, 10, 12, 0, 4, 13, 0, 0, 0, 0, 0, 6, 6, 0, 11, 0, 0, 6, 0, 2, 3, 0, 1, 2, 11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 2, 0, 11, 11, 6, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 44: np.array([0, 12, 10, 10, 2, 10, 0, 0, 0, 0, 3, 10, 10, 0, 10, 0, 0, 10, 12, 0, 10, 10, 0, 6, 0, 0, 3, 0, 10, 0, 0, 6, 6, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 45: np.array([0, 12, 10, 10, 2, 10, 0, 0, 0, 0, 3, 10, 10, 0, 10, 0, 0, 10, 12, 0, 10, 10, 0, 6, 0, 0, 3, 0, 10, 0, 0, 6, 6, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])}
split_vals_dict = {0: np.array([5119.0, 1899908220.0, 7073.5, 12.5, 13.5, 5316.5, 20.5, 1271012740.0, 2579633410.0, 2218.5, 32.5, 0.0, 61.0, 24559.5, 4.5, 604422656.0, 8.5, 1981155070.0, 3430.5, 12.5, 2391.5, 4718.5, 41.0, 0.0, 6667.5, 0.0, 0.0, 59.0, 0.0, 29.5, 2218.5, 43.5, 1846.0, 3955.5, 1782.5, 2174.0, 0.0, 29.5, 29.5, 2310.5, 59.0, 400966.5, 0.0, 4108092160.0, 14.5, 0.0, 0.0, 0.0, 0.0, 3143431420.0, 9.5, 4899.5, 3387.0, 1794.0, 43.5, 31.5, 1989.5, 2719663620.0, 0.0, 34.5, 1989.5, 55.5, 50.0, 23840.0, 47.5, 62.0, 47.5, 46.5, 0.0, 0.0, 0.0, 4052052990.0, 45.0, 2266.5, 0.0, 2985530370.0, 51.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 1: np.array([5119.0, 1899908220.0, 7073.5, 12.5, 13.5, 5316.5, 20.5, 1271012740.0, 2579633410.0, 2218.5, 32.5, 0.0, 61.0, 24559.5, 4.5, 604422656.0, 8.5, 1981155070.0, 3430.5, 12.5, 2391.5, 4718.5, 41.0, 0.0, 6667.5, 0.0, 0.0, 59.0, 0.0, 29.5, 2218.5, 43.5, 1846.0, 3955.5, 1782.5, 2174.0, 0.0, 29.5, 29.5, 2310.5, 59.0, 400966.5, 0.0, 4108092160.0, 14.5, 0.0, 0.0, 0.0, 0.0, 3143431420.0, 9.5, 4899.5, 3387.0, 1794.0, 43.5, 31.5, 1989.5, 2719663620.0, 0.0, 34.5, 1989.5, 55.5, 50.0, 23840.0, 47.5, 62.0, 47.5, 46.5, 0.0, 0.0, 0.0, 4052052990.0, 45.0, 2266.5, 0.0, 2985530370.0, 51.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 2: np.array([1899908220.0, 12.5, 8296.0, 5095.5, 5095.5, 13.5, 20.5, 1271012740.0, 2913640960.0, 2579633410.0, 7032.5, 11.5, 32.5, 224695.0, 0.0, 604422656.0, 9.5, 1981155070.0, 8028.5, 1981155070.0, 3430.5, 1271012740.0, 0.0, 33.5, 42.5, 54.5, 2336.5, 0.0, 0.0, 33.5, 2218.5, 40.5, 32.5, 1643620350.0, 62.5, 0.0, 0.0, 3237087230.0, 28.5, 3517857540.0, 0.0, 3821399040.0, 6466.0, 5954.5, 2231.5, 2218.5, 27.5, 2386.5, 2264190980.0, 14.5, 0.0, 1894716670.0, 8.5, 4899.5, 9.5, 1794.0, 1760.0, 27.5, 33.5, 0.0, 0.0, 0.0, 3808451070.0, 4229337090.0, 14.5, 25.5, 1913259520.0, 2174.0, 51.5, 0.0, 0.0, 0.0, 0.0, 2231.5, 2490968060.0, 9.5, 2867.0, 33.5, 77366.0, 1926.5, 1981155070.0, 3517857540.0, 0.0, 26.5, 0.0, 44.0, 54.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 3: np.array([1899908220.0, 12.5, 8296.0, 5095.5, 5095.5, 13.5, 20.5, 1271012740.0, 2913640960.0, 2579633410.0, 7032.5, 11.5, 32.5, 224695.0, 0.0, 604422656.0, 9.5, 1981155070.0, 8028.5, 1981155070.0, 3430.5, 1271012740.0, 0.0, 33.5, 42.5, 54.5, 2336.5, 0.0, 0.0, 33.5, 2218.5, 40.5, 32.5, 1643620350.0, 62.5, 0.0, 0.0, 3237087230.0, 28.5, 3517857540.0, 0.0, 3821399040.0, 6466.0, 5954.5, 2231.5, 2218.5, 27.5, 2386.5, 2264190980.0, 14.5, 0.0, 1894716670.0, 8.5, 4899.5, 9.5, 1794.0, 1760.0, 27.5, 33.5, 0.0, 0.0, 0.0, 3808451070.0, 4229337090.0, 14.5, 25.5, 1913259520.0, 2174.0, 51.5, 0.0, 0.0, 0.0, 0.0, 2231.5, 2490968060.0, 9.5, 2867.0, 33.5, 77366.0, 1926.5, 1981155070.0, 3517857540.0, 0.0, 26.5, 0.0, 44.0, 54.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 4: np.array([1981155070.0, 4718.5, 5119.0, 12.5, 7731.5, 2579633410.0, 2579633410.0, 2218.5, 32.5, 4826.0, 20.5, 9.5, 12.5, 62.5, 8296.0, 33.5, 3089.5, 1534.0, 14.5, 0.0, 6297.0, 0.0, 0.0, 8.5, 1846.0, 604422656.0, 47.5, 0.0, 10585.5, 44.5, 0.0, 23840.0, 78.5, 2391.5, 0.0, 49.0, 1577.0, 2270.0, 1486.0, 35.5, 332033.0, 5.5, 39.5, 33.5, 1989.5, 2518213380.0, 47.5, 4668.5, 3237087230.0, 9976.0, 0.0, 0.0, 7073.5, 22729.5, 0.0, 4229337090.0, 1533645060.0, 1439947260.0, 0.0, 3517857540.0, 2516545540.0, 0.0, 2218.0, 31.0, 0.0, 45.5, 0.0, 0.0, 2224906240.0, 0.0, 0.0, 43.5, 37.5, 1073455620.0, 35.5, 25.5, 3120.0, 0.0, 2168.5, 0.0, 0.0, 2218.0, 1514558340.0, 1913259520.0, 43.5, 1520731900.0, 30.5, 22.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 5: np.array([1981155070.0, 4718.5, 5119.0, 12.5, 7731.5, 2579633410.0, 2579633410.0, 2218.5, 32.5, 4826.0, 20.5, 9.5, 12.5, 62.5, 8296.0, 33.5, 3089.5, 1534.0, 14.5, 0.0, 6297.0, 0.0, 0.0, 8.5, 1846.0, 604422656.0, 47.5, 0.0, 10585.5, 44.5, 0.0, 23840.0, 78.5, 2391.5, 0.0, 49.0, 1577.0, 2270.0, 1486.0, 35.5, 332033.0, 5.5, 39.5, 33.5, 1989.5, 2518213380.0, 47.5, 4668.5, 3237087230.0, 9976.0, 0.0, 0.0, 7073.5, 22729.5, 0.0, 4229337090.0, 1533645060.0, 1439947260.0, 0.0, 3517857540.0, 2516545540.0, 0.0, 2218.0, 31.0, 0.0, 45.5, 0.0, 0.0, 2224906240.0, 0.0, 0.0, 43.5, 37.5, 1073455620.0, 35.5, 25.5, 3120.0, 0.0, 2168.5, 0.0, 0.0, 2218.0, 1514558340.0, 1913259520.0, 43.5, 1520731900.0, 30.5, 22.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 6: np.array([1981155070.0, 4718.5, 11.5, 12.5, 7731.5, 2579633410.0, 2579633410.0, 2218.5, 27.5, 4826.0, 20.5, 5095.5, 8296.0, 5095.5, 41.5, 33.5, 3089.5, 2218.0, 49.0, 0.0, 6297.0, 0.0, 0.0, 1846.0, 62.5, 87.0, 0.0, 35.5, 0.0, 8296.0, 3808451070.0, 23840.0, 47.5, 2391.5, 0.0, 53.5, 3234417660.0, 33.5, 332249.0, 4899.5, 62.0, 8.5, 1989.5, 0.0, 10585.5, 604422656.0, 2229326590.0, 1073455620.0, 1794.0, 1893.5, 0.0, 1762009470.0, 14.5, 22729.5, 49.5, 4229337090.0, 3821399040.0, 1439947260.0, 0.0, 0.0, 208486.5, 0.0, 0.0, 1486.0, 3237087230.0, 303843.0, 354676.0, 0.0, 758484224.0, 0.0, 0.0, 45.5, 29.5, 36249.0, 2384.5, 9976.0, 0.0, 2518213380.0, 3808451070.0, 0.0, 3890194940.0, 2516545540.0, 31.0, 3120.0, 1989.5, 2984186880.0, 127089.5, 166232.5, 306684.5, 162024.0, 58.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 7: np.array([1981155070.0, 4718.5, 11.5, 12.5, 7731.5, 2579633410.0, 2579633410.0, 2218.5, 27.5, 4826.0, 20.5, 5095.5, 8296.0, 5095.5, 41.5, 33.5, 3089.5, 2218.0, 49.0, 0.0, 6297.0, 0.0, 0.0, 1846.0, 62.5, 87.0, 0.0, 35.5, 0.0, 8296.0, 3808451070.0, 23840.0, 47.5, 2391.5, 0.0, 53.5, 3234417660.0, 33.5, 332249.0, 4899.5, 62.0, 8.5, 1989.5, 0.0, 10585.5, 604422656.0, 2229326590.0, 1073455620.0, 1794.0, 1893.5, 0.0, 1762009470.0, 14.5, 22729.5, 49.5, 4229337090.0, 3821399040.0, 1439947260.0, 0.0, 0.0, 208486.5, 0.0, 0.0, 1486.0, 3237087230.0, 303843.0, 354676.0, 0.0, 758484224.0, 0.0, 0.0, 45.5, 29.5, 36249.0, 2384.5, 9976.0, 0.0, 2518213380.0, 3808451070.0, 0.0, 3890194940.0, 2516545540.0, 31.0, 3120.0, 1989.5, 2984186880.0, 127089.5, 166232.5, 306684.5, 162024.0, 58.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 8: np.array([1981155070.0, 4718.5, 2579633410.0, 12.5, 7731.5, 5095.5, 12.5, 32.5, 27.5, 4826.0, 20.5, 11.5, 62.5, 8296.0, 4668.5, 2248.0, 3237087230.0, 2218.0, 39.5, 0.0, 758484224.0, 0.0, 0.0, 34.5, 1782.5, 0.0, 10585.5, 47.5, 0.0, 42.5, 63.5, 23840.0, 0.0, 3546267650.0, 3821399040.0, 53.5, 3234417660.0, 2090.0, 2231676160.0, 49.0, 6297.0, 1073455620.0, 37.5, 629.0, 1989.5, 9976.0, 0.0, 3437018370.0, 1514558340.0, 161079.0, 3237087230.0, 35.5, 0.0, 22729.5, 1439947260.0, 11.5, 2985530370.0, 0.0, 41.5, 1534.0, 25.5, 0.0, 0.0, 4229337090.0, 0.0, 297.0, 159950.0, 0.0, 0.0, 0.0, 10.5, 60.5, 2278.0, 4247713020.0, 5.5, 13.5, 28.5, 0.0, 2168.5, 1762009470.0, 0.0, 2218.0, 39.0, 1762009470.0, 27892.5, 31178.0, 2984186880.0, 1520731900.0, 42.5, 0.0, 4826.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 9: np.array([1981155070.0, 4718.5, 2579633410.0, 12.5, 7731.5, 5095.5, 12.5, 32.5, 27.5, 4826.0, 20.5, 11.5, 62.5, 8296.0, 4668.5, 2248.0, 3237087230.0, 2218.0, 39.5, 0.0, 758484224.0, 0.0, 0.0, 34.5, 1782.5, 0.0, 10585.5, 47.5, 0.0, 42.5, 63.5, 23840.0, 0.0, 3546267650.0, 3821399040.0, 53.5, 3234417660.0, 2090.0, 2231676160.0, 49.0, 6297.0, 1073455620.0, 37.5, 629.0, 1989.5, 9976.0, 0.0, 3437018370.0, 1514558340.0, 161079.0, 3237087230.0, 35.5, 0.0, 22729.5, 1439947260.0, 11.5, 2985530370.0, 0.0, 41.5, 1534.0, 25.5, 0.0, 0.0, 4229337090.0, 0.0, 297.0, 159950.0, 0.0, 0.0, 0.0, 10.5, 60.5, 2278.0, 4247713020.0, 5.5, 13.5, 28.5, 0.0, 2168.5, 1762009470.0, 0.0, 2218.0, 39.0, 1762009470.0, 27892.5, 31178.0, 2984186880.0, 1520731900.0, 42.5, 0.0, 4826.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 10: np.array([1981155070.0, 11.5, 2579633410.0, 7731.5, 27.5, 5095.5, 12.5, 32.5, 30961.5, 4718.5, 4718.5, 40.5, 62.5, 8296.0, 8296.0, 40.5, 3237087230.0, 0.0, 0.0, 2218.0, 0.0, 2380576770.0, 2250831620.0, 4229337090.0, 1253912830.0, 0.0, 10585.5, 47.5, 0.0, 33.5, 0.0, 23840.0, 880071872.0, 3532605950.0, 3821399040.0, 24.5, 3234417660.0, 3569706240.0, 37.5, 0.0, 60.0, 474873408.0, 2632611330.0, 474873408.0, 2985530370.0, 9976.0, 0.0, 3237087230.0, 1913259520.0, 71.5, 1520731900.0, 1965452290.0, 1018380670.0, 0.0, 2703150080.0, 27646.5, 180073.0, 0.0, 2231676160.0, 2743740160.0, 198899.5, 0.0, 0.0, 44.5, 787725504.0, 237403.0, 297.0, 0.0, 0.0, 35.5, 1782.5, 590497600.0, 27.5, 39.5, 347415.0, 1913259520.0, 3409335810.0, 1762009470.0, 0.0, 604422656.0, 9.5, 32745.0, 1514558340.0, 1349453820.0, 0.0, 2231676160.0, 45.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 11: np.array([1981155070.0, 11.5, 2579633410.0, 7731.5, 27.5, 5095.5, 12.5, 32.5, 30961.5, 4718.5, 4718.5, 40.5, 62.5, 8296.0, 8296.0, 40.5, 3237087230.0, 0.0, 0.0, 2218.0, 0.0, 2380576770.0, 2250831620.0, 4229337090.0, 1253912830.0, 0.0, 10585.5, 47.5, 0.0, 33.5, 0.0, 23840.0, 880071872.0, 3532605950.0, 3821399040.0, 24.5, 3234417660.0, 3569706240.0, 37.5, 0.0, 60.0, 474873408.0, 2632611330.0, 474873408.0, 2985530370.0, 9976.0, 0.0, 3237087230.0, 1913259520.0, 71.5, 1520731900.0, 1965452290.0, 1018380670.0, 0.0, 2703150080.0, 27646.5, 180073.0, 0.0, 2231676160.0, 2743740160.0, 198899.5, 0.0, 0.0, 44.5, 787725504.0, 237403.0, 297.0, 0.0, 0.0, 35.5, 1782.5, 590497600.0, 27.5, 39.5, 347415.0, 1913259520.0, 3409335810.0, 1762009470.0, 0.0, 604422656.0, 9.5, 32745.0, 1514558340.0, 1349453820.0, 0.0, 2231676160.0, 45.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 12: np.array([27.5, 23.5, 7073.5, 6739.5, 1899908220.0, 1981155070.0, 62.5, 1824.5, 24559.5, 39.5, 7731.5, 12.5, 2579633410.0, 24884.0, 10585.5, 45.5, 21.5, 0.0, 0.0, 1894716670.0, 2994.0, 31770.5, 0.0, 40.5, 14.5, 61.5, 1913259520.0, 0.0, 0.0, 9976.0, 0.0, 908059648.0, 42061.0, 0.0, 10.5, 3108591620.0, 32.5, 3724086270.0, 3120.0, 39.0, 11.5, 38.5, 1913259520.0, 2270.0, 41393.5, 3168195580.0, 2161.5, 474873408.0, 9.5, 2579633410.0, 0.0, 2695055360.0, 3437018370.0, 3409335810.0, 323457.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.5, 167631.0, 0.0, 4225.0, 1691764220.0, 0.0, 1691764220.0, 59.0, 1439947260.0, 3237087230.0, 320689.5, 3821399040.0, 2231676160.0, 0.0, 0.0, 31.5, 89187.0, 3471696380.0, 39.5, 128293.0, 13.5, 53.5, 2985530370.0, 2391.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 13: np.array([27.5, 23.5, 7073.5, 6739.5, 1899908220.0, 1981155070.0, 62.5, 1824.5, 24559.5, 39.5, 7731.5, 12.5, 2579633410.0, 24884.0, 10585.5, 45.5, 21.5, 0.0, 0.0, 1894716670.0, 2994.0, 31770.5, 0.0, 40.5, 14.5, 61.5, 1913259520.0, 0.0, 0.0, 9976.0, 0.0, 908059648.0, 42061.0, 0.0, 10.5, 3108591620.0, 32.5, 3724086270.0, 3120.0, 39.0, 11.5, 38.5, 1913259520.0, 2270.0, 41393.5, 3168195580.0, 2161.5, 474873408.0, 9.5, 2579633410.0, 0.0, 2695055360.0, 3437018370.0, 3409335810.0, 323457.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.5, 167631.0, 0.0, 4225.0, 1691764220.0, 0.0, 1691764220.0, 59.0, 1439947260.0, 3237087230.0, 320689.5, 3821399040.0, 2231676160.0, 0.0, 0.0, 31.5, 89187.0, 3471696380.0, 39.5, 128293.0, 13.5, 53.5, 2985530370.0, 2391.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 14: np.array([28.5, 23.5, 1913259520.0, 6739.5, 1899908220.0, 474873408.0, 2985530370.0, 1824.5, 24559.5, 35.5, 10.5, 39.5, 4243.5, 1439947260.0, 3409335810.0, 45.5, 21.5, 0.0, 0.0, 3108591620.0, 935904768.0, 1520731900.0, 54.5, 169961.0, 3237087230.0, 1253912830.0, 4401.0, 2984186880.0, 1564455300.0, 4243.5, 14.5, 908059648.0, 42061.0, 0.0, 10.5, 1297622530.0, 0.0, 9.5, 148520.5, 816967616.0, 3808451070.0, 31724.0, 134792.0, 140858.5, 179969.5, 782.0, 39.5, 43.5, 1602982400.0, 269274.0, 5095.5, 54.5, 305508.0, 48.5, 3794433280.0, 55.5, 144784.0, 7073.5, 4229337090.0, 2518213380.0, 3437018370.0, 1899908220.0, 48.5, 0.0, 0.0, 0.0, 4225.0, 137154.0, 459069.0, 78182.5, 26.5, 0.0, 4962.5, 3237087230.0, 122855.0, 2380576770.0, 176728.0, 0.0, 2229326590.0, 118039.5, 0.0, 0.0, 3821399040.0, 1981155070.0, 0.0, 59.0, 1899908220.0, 69291.0, 2632611330.0, 2579633410.0, 1981155070.0, 0.0, 0.0, 2579633410.0, 7073.5, 2380576770.0, 191579.0, 37.5, 3237087230.0, 2380576770.0, 61.0, 4147.0, 35.5, 4247713020.0, 44.5, 0.0, 5367.0, 30.5, 62.5, 55.5, 3253334530.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 15: np.array([28.5, 23.5, 1913259520.0, 6739.5, 1899908220.0, 474873408.0, 2985530370.0, 1824.5, 24559.5, 35.5, 10.5, 39.5, 4243.5, 1439947260.0, 3409335810.0, 45.5, 21.5, 0.0, 0.0, 3108591620.0, 935904768.0, 1520731900.0, 54.5, 169961.0, 3237087230.0, 1253912830.0, 4401.0, 2984186880.0, 1564455300.0, 4243.5, 14.5, 908059648.0, 42061.0, 0.0, 10.5, 1297622530.0, 0.0, 9.5, 148520.5, 816967616.0, 3808451070.0, 31724.0, 134792.0, 140858.5, 179969.5, 782.0, 39.5, 43.5, 1602982400.0, 269274.0, 5095.5, 54.5, 305508.0, 48.5, 3794433280.0, 55.5, 144784.0, 7073.5, 4229337090.0, 2518213380.0, 3437018370.0, 1899908220.0, 48.5, 0.0, 0.0, 0.0, 4225.0, 137154.0, 459069.0, 78182.5, 26.5, 0.0, 4962.5, 3237087230.0, 122855.0, 2380576770.0, 176728.0, 0.0, 2229326590.0, 118039.5, 0.0, 0.0, 3821399040.0, 1981155070.0, 0.0, 59.0, 1899908220.0, 69291.0, 2632611330.0, 2579633410.0, 1981155070.0, 0.0, 0.0, 2579633410.0, 7073.5, 2380576770.0, 191579.0, 37.5, 3237087230.0, 2380576770.0, 61.0, 4147.0, 35.5, 4247713020.0, 44.5, 0.0, 5367.0, 30.5, 62.5, 55.5, 3253334530.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 16: np.array([25.5, 23.5, 1981155070.0, 6739.5, 1534.0, 2231676160.0, 2579633410.0, 45.5, 9.5, 3874314500.0, 244934.0, 3237087230.0, 2391.5, 5095.5, 9.5, 3794433280.0, 323457.0, 0.0, 0.0, 55.5, 1640259840.0, 97747.0, 0.0, 11.5, 1913259520.0, 4229337090.0, 0.0, 4447.0, 62.5, 28221.0, 3237087230.0, 1824.5, 1514558340.0, 42061.0, 401606.5, 2994.0, 10.5, 163587.5, 1915263740.0, 0.0, 0.0, 3532605950.0, 302547.0, 1602982400.0, 2985530370.0, 45318.0, 158745.5, 4225.0, 0.0, 0.0, 6640.5, 935904768.0, 4668.5, 2984186880.0, 1520731900.0, 3437018370.0, 10.5, 21.5, 0.0, 1299692030.0, 1271012740.0, 0.0, 0.0, 27540.5, 9.5, 149415.5, 202882.0, 0.0, 211039.5, 0.0, 199024.5, 4899.5, 50.5, 1534.0, 1890159740.0, 758484224.0, 1691764220.0, 38.5, 10.5, 2790202370.0, 85.5, 2984186880.0, 342611.5, 3120.0, 1253912830.0, 0.0, 7032.5, 26378.0, 0.0, 1534.0, 139293.5, 31400.5, 54.5, 43535.0, 47.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 17: np.array([25.5, 23.5, 1981155070.0, 6739.5, 1534.0, 2231676160.0, 2579633410.0, 45.5, 9.5, 3874314500.0, 244934.0, 3237087230.0, 2391.5, 5095.5, 9.5, 3794433280.0, 323457.0, 0.0, 0.0, 55.5, 1640259840.0, 97747.0, 0.0, 11.5, 1913259520.0, 4229337090.0, 0.0, 4447.0, 62.5, 28221.0, 3237087230.0, 1824.5, 1514558340.0, 42061.0, 401606.5, 2994.0, 10.5, 163587.5, 1915263740.0, 0.0, 0.0, 3532605950.0, 302547.0, 1602982400.0, 2985530370.0, 45318.0, 158745.5, 4225.0, 0.0, 0.0, 6640.5, 935904768.0, 4668.5, 2984186880.0, 1520731900.0, 3437018370.0, 10.5, 21.5, 0.0, 1299692030.0, 1271012740.0, 0.0, 0.0, 27540.5, 9.5, 149415.5, 202882.0, 0.0, 211039.5, 0.0, 199024.5, 4899.5, 50.5, 1534.0, 1890159740.0, 758484224.0, 1691764220.0, 38.5, 10.5, 2790202370.0, 85.5, 2984186880.0, 342611.5, 3120.0, 1253912830.0, 0.0, 7032.5, 26378.0, 0.0, 1534.0, 139293.5, 31400.5, 54.5, 43535.0, 47.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 18: np.array([25.5, 758484224.0, 8.5, 7731.5, 42.5, 42.5, 1881.5, 2218.0, 20.5, 4229337090.0, 307078.0, 4243.5, 84591.5, 1568.5, 1978.5, 4.5, 0.0, 0.0, 0.0, 1640259840.0, 24.5, 1602982400.0, 9.5, 5.5, 4401.0, 73863.0, 1894716670.0, 1551.5, 1820.5, 27.5, 2168.5, 2238683140.0, 23.5, 228150.0, 1824.5, 23.5, 604422656.0, 48.0, 48.5, 54.5, 0.0, 1673783040.0, 37.5, 0.0, 5776.0, 1981155070.0, 0.0, 60.5, 3808451070.0, 7073.5, 14.5, 17.5, 1862.0, 0.0, 36249.0, 0.0, 2384.5, 0.0, 0.0, 1673783040.0, 10.5, 24.5, 254765.0, 3409335810.0, 0.0, 0.0, 260477.0, 0.0, 0.0, 0.0, 10.5, 194590.5, 89950.5, 0.0, 0.0, 46.0, 3721163520.0, 379737.5, 2985530370.0, 0.0, 6681.5, 0.0, 4.5, 44.5, 64.5, 62.5, 33.5, 35.5, 62.5, 0.0, 0.0, 0.0, 0.0, 66.5, 0.0, 1894716670.0, 56.5, 43.5, 60.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 19: np.array([25.5, 758484224.0, 8.5, 7731.5, 42.5, 42.5, 1881.5, 2218.0, 20.5, 4229337090.0, 307078.0, 4243.5, 84591.5, 1568.5, 1978.5, 4.5, 0.0, 0.0, 0.0, 1640259840.0, 24.5, 1602982400.0, 9.5, 5.5, 4401.0, 73863.0, 1894716670.0, 1551.5, 1820.5, 27.5, 2168.5, 2238683140.0, 23.5, 228150.0, 1824.5, 23.5, 604422656.0, 48.0, 48.5, 54.5, 0.0, 1673783040.0, 37.5, 0.0, 5776.0, 1981155070.0, 0.0, 60.5, 3808451070.0, 7073.5, 14.5, 17.5, 1862.0, 0.0, 36249.0, 0.0, 2384.5, 0.0, 0.0, 1673783040.0, 10.5, 24.5, 254765.0, 3409335810.0, 0.0, 0.0, 260477.0, 0.0, 0.0, 0.0, 10.5, 194590.5, 89950.5, 0.0, 0.0, 46.0, 3721163520.0, 379737.5, 2985530370.0, 0.0, 6681.5, 0.0, 4.5, 44.5, 64.5, 62.5, 33.5, 35.5, 62.5, 0.0, 0.0, 0.0, 0.0, 66.5, 0.0, 1894716670.0, 56.5, 43.5, 60.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 20: np.array([2231676160.0, 36.5, 1981155070.0, 48.5, 59.5, 12.5, 9.5, 604422656.0, 29.5, 13.5, 4247713020.0, 1849082240.0, 149537.5, 49.0, 2579633410.0, 3821399040.0, 3237087230.0, 1691764220.0, 2811921410.0, 1520731900.0, 44.5, 36.5, 179103.5, 3808451070.0, 84.5, 132454.0, 409387.5, 4169195260.0, 7.5, 3821399040.0, 51.0, 1894716670.0, 8.5, 33.5, 9.5, 816967616.0, 114960.5, 400739.0, 424913.0, 2660186370.0, 3794433280.0, 109408.5, 435669.5, 3517857540.0, 71575.0, 111105.5, 316454.0, 3.5, 0.0, 8684.5, 0.0, 4040423170.0, 134754.0, 53.5, 0.0, 1520731900.0, 0.0, 0.0, 1063213760.0, 38.0, 1297622530.0, 4040423170.0, 11.0, 25.5, 4182308860.0, 0.0, 41.0, 1534.0, 3808451070.0, 27635.0, 83257.5, 0.0, 3821399040.0, 38573.0, 9.5, 377824.0, 1894716670.0, 192624.0, 0.0, 1602982400.0, 114236.5, 322907.0, 3808451070.0, 45657.0, 343825.5, 58.5, 0.0, 17.5, 141643.5, 3237087230.0, 1643620350.0, 52733.5, 82.5, 1468.0, 0.0, 0.0, 0.0, 2103.0, 9.5, 45318.0, 33.5, 0.0, 144237.5, 0.0, 24.5, 0.0, 2380576770.0, 0.0, 0.0, 0.0, 43.5, 0.0, 47.5, 0.0, 34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 21: np.array([2231676160.0, 36.5, 1981155070.0, 48.5, 59.5, 12.5, 9.5, 604422656.0, 29.5, 13.5, 4247713020.0, 1849082240.0, 149537.5, 49.0, 2579633410.0, 3821399040.0, 3237087230.0, 1691764220.0, 2811921410.0, 1520731900.0, 44.5, 36.5, 179103.5, 3808451070.0, 84.5, 132454.0, 409387.5, 4169195260.0, 7.5, 3821399040.0, 51.0, 1894716670.0, 8.5, 33.5, 9.5, 816967616.0, 114960.5, 400739.0, 424913.0, 2660186370.0, 3794433280.0, 109408.5, 435669.5, 3517857540.0, 71575.0, 111105.5, 316454.0, 3.5, 0.0, 8684.5, 0.0, 4040423170.0, 134754.0, 53.5, 0.0, 1520731900.0, 0.0, 0.0, 1063213760.0, 38.0, 1297622530.0, 4040423170.0, 11.0, 25.5, 4182308860.0, 0.0, 41.0, 1534.0, 3808451070.0, 27635.0, 83257.5, 0.0, 3821399040.0, 38573.0, 9.5, 377824.0, 1894716670.0, 192624.0, 0.0, 1602982400.0, 114236.5, 322907.0, 3808451070.0, 45657.0, 343825.5, 58.5, 0.0, 17.5, 141643.5, 3237087230.0, 1643620350.0, 52733.5, 82.5, 1468.0, 0.0, 0.0, 0.0, 2103.0, 9.5, 45318.0, 33.5, 0.0, 144237.5, 0.0, 24.5, 0.0, 2380576770.0, 0.0, 0.0, 0.0, 43.5, 0.0, 47.5, 0.0, 34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 22: np.array([2231676160.0, 7073.5, 1981155070.0, 1881.5, 62.5, 12.5, 9.5, 1568.5, 1978.5, 27067.5, 10585.5, 1849082240.0, 149537.5, 49.0, 2579633410.0, 1457.0, 1820.5, 1899908220.0, 2218.5, 0.0, 1297622530.0, 9976.0, 0.0, 3808451070.0, 84.5, 132454.0, 53.5, 4169195260.0, 51.5, 1602982400.0, 51.0, 1913259520.0, 208572.5, 13.5, 1859.0, 3874314500.0, 2759257090.0, 64.5, 9.5, 3237087230.0, 0.0, 1899908220.0, 0.0, 1297622530.0, 0.0, 8684.5, 0.0, 4040423170.0, 134754.0, 409387.5, 24.5, 1520731900.0, 0.0, 0.0, 6.5, 29.5, 151366.5, 4040423170.0, 11.0, 1981155070.0, 2985530370.0, 1253912830.0, 41.5, 0.0, 0.0, 66.5, 0.0, 0.0, 67218.5, 0.0, 0.0, 0.0, 2343295230.0, 167866.0, 2384.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2103.0, 1986582140.0, 45318.0, 1106937220.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 180772.0, 0.0, 0.0, 0.0, 11.5, 100701.5, 35.5, 0.0, 34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 23: np.array([2231676160.0, 7073.5, 1981155070.0, 1881.5, 62.5, 12.5, 9.5, 1568.5, 1978.5, 27067.5, 10585.5, 1849082240.0, 149537.5, 49.0, 2579633410.0, 1457.0, 1820.5, 1899908220.0, 2218.5, 0.0, 1297622530.0, 9976.0, 0.0, 3808451070.0, 84.5, 132454.0, 53.5, 4169195260.0, 51.5, 1602982400.0, 51.0, 1913259520.0, 208572.5, 13.5, 1859.0, 3874314500.0, 2759257090.0, 64.5, 9.5, 3237087230.0, 0.0, 1899908220.0, 0.0, 1297622530.0, 0.0, 8684.5, 0.0, 4040423170.0, 134754.0, 409387.5, 24.5, 1520731900.0, 0.0, 0.0, 6.5, 29.5, 151366.5, 4040423170.0, 11.0, 1981155070.0, 2985530370.0, 1253912830.0, 41.5, 0.0, 0.0, 66.5, 0.0, 0.0, 67218.5, 0.0, 0.0, 0.0, 2343295230.0, 167866.0, 2384.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2103.0, 1986582140.0, 45318.0, 1106937220.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 180772.0, 0.0, 0.0, 0.0, 11.5, 100701.5, 35.5, 0.0, 34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 24: np.array([23.5, 45.5, 1439947260.0, 3794433280.0, 1640259840.0, 9.5, 2579633410.0, 7692.5, 2380576770.0, 49.0, 269939.5, 66.5, 86380.5, 3721163520.0, 1762009470.0, 1824.5, 1514558340.0, 0.0, 0.0, 0.0, 187521.5, 44117.5, 329522.0, 40225.5, 0.0, 1430875260.0, 2231676160.0, 5095.5, 7.5, 53.5, 604422656.0, 3437018370.0, 22.5, 0.0, 0.0, 70948.5, 0.0, 0.0, 0.0, 0.0, 0.0, 36.5, 4229337090.0, 40.5, 24.5, 64.5, 94443.5, 4447.0, 20.5, 1894716670.0, 3517857540.0, 3437018370.0, 1894716670.0, 0.0, 39.5, 1673783040.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24373.5, 3409335810.0, 816967616.0, 164682.5, 0.0, 0.0, 0.0, 60.5, 33.5, 0.0, 0.0, 4533.0, 4225.0, 0.0, 10.5, 1253912830.0, 0.0, 0.0, 30.5, 0.0, 4668.5, 0.0, 39.5, 57.5, 3108591620.0, 28.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 25: np.array([23.5, 45.5, 1439947260.0, 3794433280.0, 1640259840.0, 9.5, 2579633410.0, 7692.5, 2380576770.0, 49.0, 269939.5, 66.5, 86380.5, 3721163520.0, 1762009470.0, 1824.5, 1514558340.0, 0.0, 0.0, 0.0, 187521.5, 44117.5, 329522.0, 40225.5, 0.0, 1430875260.0, 2231676160.0, 5095.5, 7.5, 53.5, 604422656.0, 3437018370.0, 22.5, 0.0, 0.0, 70948.5, 0.0, 0.0, 0.0, 0.0, 0.0, 36.5, 4229337090.0, 40.5, 24.5, 64.5, 94443.5, 4447.0, 20.5, 1894716670.0, 3517857540.0, 3437018370.0, 1894716670.0, 0.0, 39.5, 1673783040.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24373.5, 3409335810.0, 816967616.0, 164682.5, 0.0, 0.0, 0.0, 60.5, 33.5, 0.0, 0.0, 4533.0, 4225.0, 0.0, 10.5, 1253912830.0, 0.0, 0.0, 30.5, 0.0, 4668.5, 0.0, 39.5, 57.5, 3108591620.0, 28.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 26: np.array([23.5, 42.5, 8.5, 1849082240.0, 604422656.0, 29.5, 1881.5, 1632681980.0, 7692.5, 0.0, 8.5, 9.5, 1691764220.0, 1568.5, 1978.5, 0.0, 0.0, 21.5, 0.0, 3409335810.0, 3808451070.0, 6.5, 0.0, 36.5, 161556.5, 1551.5, 1820.5, 66844.5, 2168.5, 0.0, 1514558340.0, 0.0, 0.0, 0.0, 1915263740.0, 0.0, 0.0, 120658.0, 4.5, 152829.0, 179588.5, 4229337090.0, 0.0, 15.5, 1862.0, 4040423170.0, 27.5, 0.0, 2384.5, 31.0, 1824.5, 0.0, 0.0, 42.5, 380856.5, 137899.0, 154920.0, 128340.5, 0.0, 0.0, 3808451070.0, 41.5, 33.5, 0.0, 0.0, 66.5, 0.0, 0.0, 2759257090.0, 0.0, 1899908220.0, 2310.5, 60.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 27: np.array([23.5, 42.5, 8.5, 1849082240.0, 604422656.0, 29.5, 1881.5, 1632681980.0, 7692.5, 0.0, 8.5, 9.5, 1691764220.0, 1568.5, 1978.5, 0.0, 0.0, 21.5, 0.0, 3409335810.0, 3808451070.0, 6.5, 0.0, 36.5, 161556.5, 1551.5, 1820.5, 66844.5, 2168.5, 0.0, 1514558340.0, 0.0, 0.0, 0.0, 1915263740.0, 0.0, 0.0, 120658.0, 4.5, 152829.0, 179588.5, 4229337090.0, 0.0, 15.5, 1862.0, 4040423170.0, 27.5, 0.0, 2384.5, 31.0, 1824.5, 0.0, 0.0, 42.5, 380856.5, 137899.0, 154920.0, 128340.5, 0.0, 0.0, 3808451070.0, 41.5, 33.5, 0.0, 0.0, 66.5, 0.0, 0.0, 2759257090.0, 0.0, 1899908220.0, 2310.5, 60.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 28: np.array([23.5, 31.0, 4247713020.0, 4229337090.0, 1640259840.0, 1894716670.0, 53.5, 0.0, 0.0, 1691764220.0, 54.5, 2660186370.0, 126294.0, 230679.5, 54.5, 380381.5, 188671.5, 1824.5, 2790202370.0, 33.5, 2998031360.0, 2264190980.0, 3794433280.0, 13.5, 40.5, 10.5, 55.5, 3821399040.0, 0.0, 0.0, 0.0, 604422656.0, 0.0, 109046.0, 0.0, 23840.0, 106915.0, 61.5, 44.5, 37681.5, 1899908220.0, 4182308860.0, 2380576770.0, 51.5, 1439947260.0, 2984186880.0, 387372.0, 0.0, 124501.0, 0.0, 1899908220.0, 215847.0, 35.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1821.5, 935904768.0, 119410.0, 1899908220.0, 1846.0, 3546267650.0, 97967.5, 36621.5, 1881.5, 3808451070.0, 0.0, 134049.5, 28.5, 53.5, 604422656.0, 225596.0, 9.5, 47.5, 103144.5, 42.5, 0.0, 4040423170.0, 3234417660.0, 0.0, 0.0, 172779.5, 2759257090.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 29: np.array([23.5, 31.0, 4247713020.0, 4229337090.0, 1640259840.0, 1894716670.0, 53.5, 0.0, 0.0, 1691764220.0, 54.5, 2660186370.0, 126294.0, 230679.5, 54.5, 380381.5, 188671.5, 1824.5, 2790202370.0, 33.5, 2998031360.0, 2264190980.0, 3794433280.0, 13.5, 40.5, 10.5, 55.5, 3821399040.0, 0.0, 0.0, 0.0, 604422656.0, 0.0, 109046.0, 0.0, 23840.0, 106915.0, 61.5, 44.5, 37681.5, 1899908220.0, 4182308860.0, 2380576770.0, 51.5, 1439947260.0, 2984186880.0, 387372.0, 0.0, 124501.0, 0.0, 1899908220.0, 215847.0, 35.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1821.5, 935904768.0, 119410.0, 1899908220.0, 1846.0, 3546267650.0, 97967.5, 36621.5, 1881.5, 3808451070.0, 0.0, 134049.5, 28.5, 53.5, 604422656.0, 225596.0, 9.5, 47.5, 103144.5, 42.5, 0.0, 4040423170.0, 3234417660.0, 0.0, 0.0, 172779.5, 2759257090.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 30: np.array([7073.5, 3120.0, 62.5, 3040.0, 4243.5, 20.5, 10585.5, 57.0, 12.5, 0.0, 4973.5, 0.0, 1271012740.0, 9976.0, 0.0, 2231676160.0, 0.0, 0.0, 2984186880.0, 9.5, 5119.0, 7565.5, 0.0, 1899908220.0, 0.0, 89192.0, 21.5, 0.0, 0.0, 51.5, 4668.5, 0.0, 6667.5, 0.0, 0.0, 0.0, 0.0, 30269.5, 9.5, 0.0, 2660186370.0, 2510666750.0, 174906.0, 4401.0, 52.5, 2913640960.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 31: np.array([7073.5, 3120.0, 62.5, 3040.0, 4243.5, 20.5, 10585.5, 57.0, 12.5, 0.0, 4973.5, 0.0, 1271012740.0, 9976.0, 0.0, 2231676160.0, 0.0, 0.0, 2984186880.0, 9.5, 5119.0, 7565.5, 0.0, 1899908220.0, 0.0, 89192.0, 21.5, 0.0, 0.0, 51.5, 4668.5, 0.0, 6667.5, 0.0, 0.0, 0.0, 0.0, 30269.5, 9.5, 0.0, 2660186370.0, 2510666750.0, 174906.0, 4401.0, 52.5, 2913640960.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 32: np.array([1439947260.0, 9.5, 2579633410.0, 3237087230.0, 29.5, 349418.0, 3237087230.0, 62.5, 1602982400.0, 1486.0, 3237087230.0, 4247713020.0, 43.5, 604422656.0, 39.5, 816967616.0, 0.0, 758484224.0, 1913259520.0, 185631.0, 0.0, 32.5, 282812.5, 1894716670.0, 206735.5, 462899.0, 62.5, 2343295230.0, 49.5, 435106.5, 386557.5, 0.0, 3546267650.0, 32.5, 0.0, 1124995460.0, 2687803390.0, 142692.5, 0.0, 211089.0, 133544.5, 278516.0, 4182308860.0, 27581.0, 31.5, 204835.0, 59.0, 459839.5, 502034.0, 9.5, 1819687170.0, 0.0, 0.0, 10.5, 101448.5, 239474.0, 495116.5, 357156.5, 0.0, 0.0, 0.0, 0.0, 41.0, 0.0, 0.0, 41.5, 41.5, 0.0, 3237087230.0, 2231.5, 2985530370.0, 38.5, 3143431420.0, 1430875260.0, 2578020350.0, 41.5, 315814.0, 2985530370.0, 40.5, 3821399040.0, 59.5, 3409335810.0, 0.0, 2480675330.0, 252442.5, 60.5, 0.0, 11.5, 3143431420.0, 50.5, 421037.5, 0.0, 47.0, 17.0, 160557.0, 14.5, 3143431420.0, 1297622530.0, 1534.0, 0.0, 0.0, 44345.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 33: np.array([1439947260.0, 9.5, 2579633410.0, 3237087230.0, 29.5, 349418.0, 3237087230.0, 62.5, 1602982400.0, 1486.0, 3237087230.0, 4247713020.0, 43.5, 604422656.0, 39.5, 816967616.0, 0.0, 758484224.0, 1913259520.0, 185631.0, 0.0, 32.5, 282812.5, 1894716670.0, 206735.5, 462899.0, 62.5, 2343295230.0, 49.5, 435106.5, 386557.5, 0.0, 3546267650.0, 32.5, 0.0, 1124995460.0, 2687803390.0, 142692.5, 0.0, 211089.0, 133544.5, 278516.0, 4182308860.0, 27581.0, 31.5, 204835.0, 59.0, 459839.5, 502034.0, 9.5, 1819687170.0, 0.0, 0.0, 10.5, 101448.5, 239474.0, 495116.5, 357156.5, 0.0, 0.0, 0.0, 0.0, 41.0, 0.0, 0.0, 41.5, 41.5, 0.0, 3237087230.0, 2231.5, 2985530370.0, 38.5, 3143431420.0, 1430875260.0, 2578020350.0, 41.5, 315814.0, 2985530370.0, 40.5, 3821399040.0, 59.5, 3409335810.0, 0.0, 2480675330.0, 252442.5, 60.5, 0.0, 11.5, 3143431420.0, 50.5, 421037.5, 0.0, 47.0, 17.0, 160557.0, 14.5, 3143431420.0, 1297622530.0, 1534.0, 0.0, 0.0, 44345.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 34: np.array([388234912.0, 13.5, 816967616.0, 33.5, 0.0, 214170.5, 7073.5, 0.0, 4229337090.0, 116732.5, 277405.0, 3120.0, 62.5, 134727.5, 0.0, 33.0, 175028.0, 0.0, 30.0, 3040.0, 4243.5, 30785.5, 10585.5, 2230677760.0, 0.0, 0.0, 55664.0, 0.0, 180337.0, 0.0, 341200.5, 57.0, 27.5, 0.0, 4826.0, 0.0, 24.5, 9976.0, 0.0, 0.0, 0.0, 36843.0, 69427.0, 0.0, 1899908220.0, 0.0, 0.0, 8.5, 0.0, 0.0, 2984186880.0, 4668.5, 5119.0, 0.0, 1297622530.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 35: np.array([388234912.0, 13.5, 816967616.0, 33.5, 0.0, 214170.5, 7073.5, 0.0, 4229337090.0, 116732.5, 277405.0, 3120.0, 62.5, 134727.5, 0.0, 33.0, 175028.0, 0.0, 30.0, 3040.0, 4243.5, 30785.5, 10585.5, 2230677760.0, 0.0, 0.0, 55664.0, 0.0, 180337.0, 0.0, 341200.5, 57.0, 27.5, 0.0, 4826.0, 0.0, 24.5, 9976.0, 0.0, 0.0, 0.0, 36843.0, 69427.0, 0.0, 1899908220.0, 0.0, 0.0, 8.5, 0.0, 0.0, 2984186880.0, 4668.5, 5119.0, 0.0, 1297622530.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 36: np.array([1881.5, 1568.5, 1978.5, 1457.0, 1820.5, 1899908220.0, 2218.5, 25.5, 208572.5, 385008.5, 1859.0, 3874314500.0, 3237087230.0, 64.5, 2581.0, 42.5, 106.5, 36.0, 41.5, 0.0, 0.0, 66.5, 0.0, 0.0, 67218.5, 0.0, 0.0, 0.0, 156327.0, 2384.5, 1762009470.0, 249757.0, 194821.0, 90.5, 82449.0, 112483.0, 76909.0, 2985530370.0, 0.0, 0.0, 0.0, 12.0, 4040423170.0, 0.0, 0.0, 2262.5, 65.5, 0.0, 2789.0, 233485.5, 3032.0, 49.5, 216099.5, 68.5, 2913640960.0, 0.0, 0.0, 0.0, 1106937220.0, 2040074240.0, 1494.5, 3237087230.0, 2759257090.0, 0.0, 0.0, 1894.5, 57.5, 46.5, 65.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 37: np.array([1881.5, 1568.5, 1978.5, 1457.0, 1820.5, 1899908220.0, 2218.5, 25.5, 208572.5, 385008.5, 1859.0, 3874314500.0, 3237087230.0, 64.5, 2581.0, 42.5, 106.5, 36.0, 41.5, 0.0, 0.0, 66.5, 0.0, 0.0, 67218.5, 0.0, 0.0, 0.0, 156327.0, 2384.5, 1762009470.0, 249757.0, 194821.0, 90.5, 82449.0, 112483.0, 76909.0, 2985530370.0, 0.0, 0.0, 0.0, 12.0, 4040423170.0, 0.0, 0.0, 2262.5, 65.5, 0.0, 2789.0, 233485.5, 3032.0, 49.5, 216099.5, 68.5, 2913640960.0, 0.0, 0.0, 0.0, 1106937220.0, 2040074240.0, 1494.5, 3237087230.0, 2759257090.0, 0.0, 0.0, 1894.5, 57.5, 46.5, 65.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 38: np.array([604422656.0, 58.0, 31.5, 3817837570.0, 9.5, 474873408.0, 3237087230.0, 160852.5, 0.0, 0.0, 195484.5, 167049.5, 50.5, 1913259520.0, 43.5, 84915.5, 200839.5, 36.5, 273466.0, 19.0, 37.5, 4229337090.0, 1661389570.0, 56.5, 2380576770.0, 413900.0, 63.5, 76205.5, 17.0, 187831.0, 33.5, 95092.5, 3950337020.0, 0.0, 0.0, 0.0, 0.0, 0.0, 232760.5, 29.5, 2759257090.0, 1643620350.0, 4040423170.0, 474873408.0, 109865.0, 40.0, 6.5, 71.0, 30.5, 2985530370.0, 2970714110.0, 53.5, 4229337090.0, 155220.5, 2380576770.0, 50.5, 1894716670.0, 241042.5, 8.5, 0.0, 0.0, 3409335810.0, 0.0, 0.0, 0.0, 3569706240.0, 673403136.0, 45.5, 1894716670.0, 68.5, 173712.5, 52.5, 68.5, 2632611330.0, 37334.5, 0.0, 1439947260.0, 10.5, 0.0, 0.0, 3817837570.0, 75748.5, 90.5, 11.5, 1643620350.0, 2380576770.0, 3409335810.0, 28096.5, 133606.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 39: np.array([604422656.0, 58.0, 31.5, 3817837570.0, 9.5, 474873408.0, 3237087230.0, 160852.5, 0.0, 0.0, 195484.5, 167049.5, 50.5, 1913259520.0, 43.5, 84915.5, 200839.5, 36.5, 273466.0, 19.0, 37.5, 4229337090.0, 1661389570.0, 56.5, 2380576770.0, 413900.0, 63.5, 76205.5, 17.0, 187831.0, 33.5, 95092.5, 3950337020.0, 0.0, 0.0, 0.0, 0.0, 0.0, 232760.5, 29.5, 2759257090.0, 1643620350.0, 4040423170.0, 474873408.0, 109865.0, 40.0, 6.5, 71.0, 30.5, 2985530370.0, 2970714110.0, 53.5, 4229337090.0, 155220.5, 2380576770.0, 50.5, 1894716670.0, 241042.5, 8.5, 0.0, 0.0, 3409335810.0, 0.0, 0.0, 0.0, 3569706240.0, 673403136.0, 45.5, 1894716670.0, 68.5, 173712.5, 52.5, 68.5, 2632611330.0, 37334.5, 0.0, 1439947260.0, 10.5, 0.0, 0.0, 3817837570.0, 75748.5, 90.5, 11.5, 1643620350.0, 2380576770.0, 3409335810.0, 28096.5, 133606.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 40: np.array([14.5, 590497600.0, 935904768.0, 604422656.0, 474873408.0, 237816.5, 38.5, 3701449730.0, 274602.0, 167206.5, 1253912830.0, 27.5, 362478.5, 239031.5, 64.5, 125756.0, 0.0, 32846.0, 0.0, 154759.0, 173678.0, 43.5, 28161.0, 0.0, 38.5, 39.0, 48.5, 3253334530.0, 77.5, 13.5, 26.5, 0.0, 0.0, 44.5, 49.0, 1984539010.0, 48.5, 3237087230.0, 176074.5, 99047.5, 44.5, 46.5, 40.5, 189564.5, 1899908220.0, 34.5, 259140.5, 0.0, 0.0, 4182308860.0, 31.5, 35.5, 0.0, 0.0, 3237087230.0, 3253334530.0, 318405.0, 1894716670.0, 0.0, 39.0, 119859.0, 55879.0, 95840.5, 0.0, 10.5, 0.0, 2759257090.0, 0.0, 1899908220.0, 40.5, 34.5, 0.0, 1481366270.0, 1691764220.0, 21731.0, 4229337090.0, 31990.0, 29.5, 0.0, 115695.5, 52.5, 261031.0, 0.0, 0.0, 758484224.0, 0.0, 28.0, 0.0, 47.5, 0.0, 0.0, 3253334530.0, 1177.0, 0.0, 0.0, 104077.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 41: np.array([14.5, 590497600.0, 935904768.0, 604422656.0, 474873408.0, 237816.5, 38.5, 3701449730.0, 274602.0, 167206.5, 1253912830.0, 27.5, 362478.5, 239031.5, 64.5, 125756.0, 0.0, 32846.0, 0.0, 154759.0, 173678.0, 43.5, 28161.0, 0.0, 38.5, 39.0, 48.5, 3253334530.0, 77.5, 13.5, 26.5, 0.0, 0.0, 44.5, 49.0, 1984539010.0, 48.5, 3237087230.0, 176074.5, 99047.5, 44.5, 46.5, 40.5, 189564.5, 1899908220.0, 34.5, 259140.5, 0.0, 0.0, 4182308860.0, 31.5, 35.5, 0.0, 0.0, 3237087230.0, 3253334530.0, 318405.0, 1894716670.0, 0.0, 39.0, 119859.0, 55879.0, 95840.5, 0.0, 10.5, 0.0, 2759257090.0, 0.0, 1899908220.0, 40.5, 34.5, 0.0, 1481366270.0, 1691764220.0, 21731.0, 4229337090.0, 31990.0, 29.5, 0.0, 115695.5, 52.5, 261031.0, 0.0, 0.0, 758484224.0, 0.0, 28.0, 0.0, 47.5, 0.0, 0.0, 3253334530.0, 1177.0, 0.0, 0.0, 104077.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 42: np.array([7073.5, 388234912.0, 2579633410.0, 13.5, 816967616.0, 15.5, 8296.0, 33.5, 0.0, 9.5, 4208147710.0, 0.0, 62.5, 0.0, 0.0, 0.0, 4040423170.0, 4040423170.0, 34.5, 1881.5, 0.0, 0.0, 3808451070.0, 0.0, 215646.0, 2703150080.0, 40.0, 3143431420.0, 133120.5, 1568.5, 1978.5, 0.0, 0.0, 0.0, 0.0, 56.5, 0.0, 0.0, 0.0, 1899908220.0, 0.0, 55664.0, 0.0, 1551.5, 1820.5, 3874314500.0, 2218.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 43: np.array([7073.5, 388234912.0, 2579633410.0, 13.5, 816967616.0, 15.5, 8296.0, 33.5, 0.0, 9.5, 4208147710.0, 0.0, 62.5, 0.0, 0.0, 0.0, 4040423170.0, 4040423170.0, 34.5, 1881.5, 0.0, 0.0, 3808451070.0, 0.0, 215646.0, 2703150080.0, 40.0, 3143431420.0, 133120.5, 1568.5, 1978.5, 0.0, 0.0, 0.0, 0.0, 56.5, 0.0, 0.0, 0.0, 1899908220.0, 0.0, 55664.0, 0.0, 1551.5, 1820.5, 3874314500.0, 2218.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 44: np.array([21.5, 42.5, 7565.5, 9474.5, 215228.5, 3120.0, 62.5, 0.0, 0.0, 0.0, 2490968060.0, 3040.0, 4243.5, 0.0, 10585.5, 0.0, 0.0, 57.0, 27.5, 0.0, 4401.0, 9976.0, 0.0, 2985530370.0, 0.0, 0.0, 2984186880.0, 50.5, 4668.5, 0.0, 0.0, 1913259520.0, 3409335810.0, 25.5, 0.0, 37.0, 0.0, 0.0, 4826.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), 45: np.array([21.5, 42.5, 7565.5, 9474.5, 215228.5, 3120.0, 62.5, 0.0, 0.0, 0.0, 2490968060.0, 3040.0, 4243.5, 0.0, 10585.5, 0.0, 0.0, 57.0, 27.5, 0.0, 4401.0, 9976.0, 0.0, 2985530370.0, 0.0, 0.0, 2984186880.0, 50.5, 4668.5, 0.0, 0.0, 1913259520.0, 3409335810.0, 25.5, 0.0, 37.0, 0.0, 0.0, 4826.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])}


class PredictorError(Exception):

    def __init__(self, msg, code):
        self.msg = msg
        self.code = code

    def __str__(self):
        return self.msg

def __convert(cell):
    value = str(cell)
    try:
        result = int(value)
        return result
    except ValueError:
        try:
            result = float(value)
            if math.isnan(result):
                raise PredictorError('NaN value found. Aborting.', code=1)
            return result
        except ValueError:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            return result
        except Exception as e:
            raise e


def __get_key(val, dictionary):
    if dictionary == {}:
        return val
    for key, value in dictionary.items():
        if val == value:
            return key
    if val not in dictionary.values():
        raise PredictorError(f"Label {val} key does not exist", code=2)


def __confusion_matrix(y_true, y_pred, json):
    stats = {}
    labels = np.array(list(mapping.keys()))
    sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
    for class_i in range(n_classes):
        class_i_label = __get_key(class_i, mapping)
        stats[int(class_i)] = {}
        class_i_indices = np.argwhere(y_true == class_i_label)
        not_class_i_indices = np.argwhere(y_true != class_i_label)
        # None represents N/A in this case
        stats[int(class_i)]['TP'] = TP = int(np.sum(y_pred[class_i_indices] == class_i_label)) if class_i_indices.size > 0 else None
        stats[int(class_i)]['FN'] = FN = int(np.sum(y_pred[class_i_indices] != class_i_label)) if class_i_indices.size > 0 else None
        stats[int(class_i)]['TN'] = TN = int(np.sum(y_pred[not_class_i_indices] != class_i_label)) if not_class_i_indices.size > 0 else None
        stats[int(class_i)]['FP'] = FP = int(np.sum(y_pred[not_class_i_indices] == class_i_label)) if not_class_i_indices.size > 0 else None
        if TP is None or FN is None or (TP + FN == 0):
            stats[int(class_i)]['TPR'] = None
        else:
            stats[int(class_i)]['TPR'] = (TP / (TP + FN))
        if TN is None or FP is None or (TN + FP == 0):
            stats[int(class_i)]['TNR'] = None
        else:
            stats[int(class_i)]['TNR'] = (TN / (TN + FP))
        if TP is None or FP is None or (TP + FP == 0):
            stats[int(class_i)]['PPV'] = None
        else:
            stats[int(class_i)]['PPV'] = (TP / (TP + FP))
        if TN is None or FN is None or (TN + FN == 0):
            stats[int(class_i)]['NPV'] = None
        else:
            stats[int(class_i)]['NPV'] = (TN / (TN + FN))
        if TP is None or FP is None or FN is None or (TP + FP + FN == 0):
            stats[int(class_i)]['F1'] = None
        else:
            stats[int(class_i)]['F1'] = ((2 * TP) / (2 * TP + FP + FN))
        if TP is None or FP is None or FN is None or (TP + FP + FN == 0):
            stats[int(class_i)]['TS'] = None
        else:
            stats[int(class_i)]['TS'] = (TP / (TP + FP + FN))

    if not report_cmat:
        return np.array([]), stats

    label_to_ind = {label: i for i, label in enumerate(labels)}
    y_pred = np.array([label_to_ind.get(x, n_classes + 1) for x in y_pred])
    y_true = np.array([label_to_ind.get(x, n_classes + 1) for x in y_true])

    ind = np.logical_and(y_pred < n_classes, y_true < n_classes)
    y_pred = y_pred[ind]
    y_true = y_true[ind]
    sample_weight = sample_weight[ind]

    cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_classes, n_classes), dtype=np.int64).toarray()
    with np.errstate(all='ignore'):
        cm = np.nan_to_num(cm)

    return cm, stats


def __preprocess_and_clean_in_memory(arr):
    clean_arr = np.zeros((len(arr), len(important_idxs)))
    for i, row in enumerate(arr):
        try:
            row_used_cols_only = [row[i] for i in important_idxs]
        except IndexError:
            error_str = f"The input has shape ({len(arr)}, {len(row)}) but the expected shape is (*, {len(ignorecolumns) + len(important_idxs)})."
            if len(arr) == num_attr and len(arr[0]) != num_attr:
                error_str += "\n\nNote: You may have passed an input directly to 'preprocess_and_clean_in_memory' or 'predict_in_memory' "
                error_str += "rather than as an element of a list. Make sure that even single instances "
                error_str += "are enclosed in a list. Example: predict_in_memory(0) is invalid but "
                error_str += "predict_in_memory([0]) is valid."
            raise PredictorError(error_str, 3)
        clean_arr[i] = [float(__convert(field)) for field in row_used_cols_only]
    return clean_arr


def __evaluate_tree(xs, split_vals, split_feats, right_children, logits):
    if xs is None:
        xs = np.frombuffer(var_dict['X']).reshape(var_dict['X_shape'])

    current_node_per_row = np.zeros(xs.shape[0]).astype('int')
    values = np.empty(xs.shape[0])
    values.fill(np.nan)

    while np.isnan(values).any():

        row_idxs_at_leaf = np.argwhere(np.logical_and(right_children[current_node_per_row] == -1, np.isnan(values))).reshape(-1)
        row_idxs_at_branch = np.argwhere(right_children[current_node_per_row] != -1).reshape(-1)

        if row_idxs_at_leaf.shape[0] > 0:

            values[row_idxs_at_leaf] = logits[current_node_per_row[row_idxs_at_leaf]].reshape(-1)
            current_node_per_row[row_idxs_at_leaf] = -1

        if row_idxs_at_branch.shape[0] > 0:

            split_values_per_row = split_vals[current_node_per_row[row_idxs_at_branch]].astype('float64')
            split_features_per_row = split_feats[current_node_per_row[row_idxs_at_branch]].astype('int')
            feature_val_per_row = xs[row_idxs_at_branch, split_features_per_row].reshape(-1)

            branch_nodes = current_node_per_row[row_idxs_at_branch]
            current_node_per_row[row_idxs_at_branch] = np.where(feature_val_per_row < split_values_per_row,
                                                                right_children[branch_nodes].astype('int'),
                                                                (right_children[branch_nodes] + 1).astype('int'))

    return values


def __build_logit_func(n_trees, clss):

    def __logit_func(xs, serial, data_shape, pool=None):
        if serial:
            sum_of_leaf_values = np.zeros(xs.shape[0])
            for booster_index in range(clss, n_trees, n_classes):
                sum_of_leaf_values += __evaluate_tree(
                    xs, split_vals_dict[booster_index], split_feats_dict[booster_index],
                    right_children_dict[booster_index], logits_dict[booster_index])
        else:
            sum_of_leaf_values = np.sum(
                list(pool.starmap(__evaluate_tree,
                                  [(None, split_vals_dict[booster_index], split_feats_dict[booster_index],
                                    right_children_dict[booster_index], logits_dict[booster_index])
                                   for booster_index in range(clss, n_trees, n_classes)])), axis=0)
        return sum_of_leaf_values

    return __logit_func


def __init_worker(X, X_shape):
    var_dict['X'] = X
    var_dict['X_shape'] = X_shape

def __classify(rows, return_probabilities=False, force_serial=False):
    if force_serial:
        serial = True
    else:
        serial = default_to_serial
    if isinstance(rows, list):
        rows = np.array(rows)

    logits = [__build_logit_func(46, clss) for clss in range(n_classes)]

    if serial:
        o = np.array([logits[class_index](rows, True, rows.shape) for class_index in range(n_classes)]).T
    else:
        shared_arr = multiprocessing.RawArray('d', rows.shape[0] * rows.shape[1])
        shared_arr_np = np.frombuffer(shared_arr, dtype=rows.dtype).reshape(rows.shape)
        np.copyto(shared_arr_np, rows)

        procs = multiprocessing.cpu_count()
        pool = multiprocessing.Pool(processes=procs, initializer=__init_worker, initargs=(shared_arr, rows.shape))
        o = np.array([logits[class_index](None, False, rows.shape, pool) for class_index in range(n_classes)]).T

    if return_probabilities:

        argument = o[:, 0] - o[:, 1]
        p0 = 1.0 / (1.0 + np.exp(-argument)).reshape(-1, 1)
        p1 = 1.0 - p0
        output = np.concatenate((p0, p1), axis=1)

    else:
        output = np.argmax(o, axis=1)
    return output



def __validate_kwargs(kwargs):
    for key in kwargs:

        if key not in ['return_probabilities', 'force_serial']:
            raise PredictorError(f'{key} is not a keyword argument for Brainome\'s {classifier_type} predictor. Please see the documentation.', 4)


def __validate_data(row_or_arr, validate, row_num=None):
    if validate:
        expected_columns = len(important_idxs) + len(ignore_idxs) + 1
    else:
        expected_columns = len(important_idxs) + len(ignore_idxs)

    input_is_array = isinstance(row_or_arr, np.ndarray)
    n_cols = row_or_arr.shape[1] if input_is_array else len(row_or_arr)

    if n_cols != expected_columns:

        if row_num is None:
            err_str = f"Your data contains {n_cols} columns but {expected_columns} are required."
        else:
            err_str = f"At row {row_num}, your data contains {n_cols} columns but {expected_columns} are required."

        if validate:
            err_str += " The predictor's validate() method works on data that has the same columns in the same order as were present in the training CSV."
            err_str += " This includes the target column and features that are not used by the model but existed in the training CSV."
            if n_cols == 1 + len(important_idxs):
                err_str += f" We suggest confirming that the {len(ignore_idxs)} unused features are present in the data."
            elif n_cols == len(important_idxs):
                err_str += f" We suggest confirming that the {len(ignore_idxs)} unused features are present in the data as well as the target column. "
            elif n_cols == len(important_idxs) + len(ignore_idxs):
                err_str += " We suggest confirming that the target column present in the data. "
            err_str += " To make predictions, see the predictor's predict() method."
        else:
            err_str += " The predictor's predict() method works on data that has the same feature columns in the same relative order as were present in the training CSV."
            err_str += " This DOES NOT include the target column but DOES include features that are not used by the model but existed in the training CSV."
            if n_cols == 1 + len(important_idxs):
                err_str += f" We suggest confirming that the {len(ignore_idxs)} unused features are present in the data and that the target column is not present."
            elif n_cols == len(important_idxs):
                err_str += f" We suggest confirming that the {len(ignore_idxs)} unused features are present in the data."
            elif n_cols == 1 + len(important_idxs) + len(ignore_idxs):
                err_str += " We suggest confirming that the target column is not present."
            err_str += " To receive a performance summary, instead of make predictions, see the predictor's validate() method."

        raise PredictorError(err_str, 5)

    else:

        if not input_is_array:
            return row_or_arr


def __write_predictions(arr, header, headerless, trim, outfile=None):
    predictions = predict(arr)

    if not headerless:
        if trim:
            header = ','.join([x for i, x in enumerate(header) if i in important_idxs] + ['Prediction'])
        else:
            header = ','.join(header.tolist() + ['Prediction'])
        if outfile is None:
            print(header)
        else:
            print(header, file=outfile)

    for row, prediction in zip(arr, predictions):
        if trim:
            row = ['"' + field + '"' if ',' in field else field for i, field in enumerate(row) if i in important_idxs]
        else:
            row = ['"' + field + '"' if ',' in field else field for field in row]
        row.append(prediction)
        if outfile is None:
            print(','.join(row))
        else:
            print(','.join(row), file=outfile)


def load_data(csvfile, headerless, validate):
    """
    Parameters
    ----------
    csvfile : str
        The path to the CSV file containing the data.

    headerless : bool
        True if the CSV does not contain a header.

    validate : bool
        True if the data should be loaded to be used by the predictor's validate() method.
        False if the data should be loaded to be used by the predictor's predict() method.

    Returns
    -------
    arr : np.ndarray
        The data (observations and labels) found in the CSV without any header.

    data : np.ndarray or NoneType
        None if validate is False, otherwise the observations (data without the labels) found in the CSV.

    labels : np.ndarray or NoneType
        None if the validate is False, otherwise the labels found in the CSV.

    header : np.ndarray or NoneType
        None if the CSV is headerless, otherwise the header.
    """

    with open(csvfile, 'r', encoding='utf-8') as csvinput:
        arr = np.array([__validate_data(row, validate, row_num=i) for i, row in enumerate(csv.reader(csvinput)) if row != []], dtype=str)
    if headerless:
        header = None
    else:
        header = arr[0]
        arr = arr[1:]
    if validate:
        labels = arr[:, target_column]
        feature_columns = [i for i in range(arr.shape[1]) if i != target_column]
        data = arr[:, feature_columns]
    else:
        data, labels = None, None

    if validate and ignorelabels != []:
        idxs_to_keep = np.argwhere(np.logical_not(np.isin(labels, ignorelabels))).reshape(-1)
        labels = labels[idxs_to_keep]
        data = data[idxs_to_keep]

    return arr, data, labels, header


def predict(arr, remap=True, **kwargs):
    """
    Parameters
    ----------
    arr : list[list]
        An array of inputs to be cleaned by 'preprocess_and_clean_in_memory'. This
        should contain all the features that were present in the training data,
        regardless of whether or not they are used by the model, with the same
        relative order as in the training data. There should be no target column.


    remap : bool
        If True and 'return_probs' is False, remaps the output to the original class
        label. If 'return_probs' is True this instead adds a header indicating which
        original class label each column of output corresponds to.

    **kwargs :
        return_probabilities : bool
            If true, return class membership probabilities instead of classifications.

    **kwargs :
        force_serial : bool
            If true, model inference is done in serial rather than in parallel. This is
            useful if calling "predict" repeatedly inside a for-loop.

    Returns
    -------
    output : np.ndarray

        A numpy array of
            1. Class predictions if 'return_probabilities' is False.
            2. Class probabilities if 'return_probabilities' is True.

    """
    if not isinstance(arr, np.ndarray) and not isinstance(arr, list):
        raise PredictorError(f'Data must be provided to \'predict\' and \'validate\' as a list or np.ndarray, but an input of type {type(arr).__name__} was found.', 6)
    if isinstance(arr, list):
        arr = np.array(arr, dtype=str)

    kwargs = kwargs or {}
    __validate_kwargs(kwargs)
    __validate_data(arr, False)
    remove_bad_chars = lambda x: str(x).replace('"', '').replace(',', '').replace('(', '').replace(')', '').replace("'", '')
    arr = [[remove_bad_chars(field) for field in row] for row in arr]
    arr = __preprocess_and_clean_in_memory(arr)

    output = __classify(arr, **kwargs)

    if remap:
        if kwargs.get('return_probabilities'):
            header = np.array([__get_key(i, mapping) for i in range(output.shape[1])], dtype=str).reshape(1, -1)
            output = np.concatenate((header, output), axis=0)
        else:
            output = np.array([__get_key(prediction, mapping) for prediction in output])

    return output


def validate(arr, labels):
    """
    Parameters
    ----------
    cleanarr : np.ndarray
        An array of float values that has undergone each pre-
        prediction step.

    Returns
    -------
    count : int
        A count of the number of instances in cleanarr.

    correct_count : int
        A count of the number of correctly classified instances in
        cleanarr.

    numeachclass : dict
        A dictionary mapping each class to its number of instances.

    outputs : np.ndarray
        The output of the predictor's '__classify' method on cleanarr.
    """
    predictions = predict(arr)
    correct_count = int(np.sum(predictions.reshape(-1) == labels.reshape(-1)))
    count = predictions.shape[0]
    
    class_0, class_1 = __get_key(0, mapping), __get_key(1, mapping)
    num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0
    num_TP = int(np.sum(np.logical_and(predictions.reshape(-1) == class_1, labels.reshape(-1) == class_1)))
    num_TN = int(np.sum(np.logical_and(predictions.reshape(-1) == class_0, labels.reshape(-1) == class_0)))
    num_FN = int(np.sum(np.logical_and(predictions.reshape(-1) == class_0, labels.reshape(-1) == class_1)))
    num_FP = int(np.sum(np.logical_and(predictions.reshape(-1) == class_1, labels.reshape(-1) == class_0)))
    num_class_0 = int(np.sum(labels.reshape(-1) == class_0))
    num_class_1 = int(np.sum(labels.reshape(-1) == class_1))
    return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, predictions


def __main():
    parser = argparse.ArgumentParser(description='Predictor trained on ' + str(TRAINFILE))
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    parser.add_argument('-json', action="store_true", default=False, help="report measurements as json")
    parser.add_argument('-trim', action="store_true", help="If true, the prediction will not output ignored columns.")
    args = parser.parse_args()
    faulthandler.enable()

    arr, data, labels, header = load_data(csvfile=args.csvfile, headerless=args.headerless, validate=args.validate)

    if not args.validate:
        __write_predictions(arr, header, args.headerless, args.trim)
    else:

        count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, preds = validate(data, labels)

        classcounts = np.bincount(np.array([mapping[label] for label in labels], dtype='int32')).reshape(-1)
        class_balance = (classcounts[np.argwhere(classcounts > 0)] / arr.shape[0]).reshape(-1).tolist()
        best_guess = round(100.0 * np.max(class_balance), 2)
        H = float(-1.0 * sum([class_balance[i] * math.log(class_balance[i]) / math.log(2) for i in range(len(class_balance))]))
        modelacc = int(float(correct_count * 10000) / count) / 100.0
        mtrx, stats = __confusion_matrix(np.array(labels).reshape(-1), np.array(preds).reshape(-1), args.json)

        if args.json:
            json_dict = {'instance_count': count,
                         'classifier_type': classifier_type,
                         'classes': n_classes,
                         'number_correct': correct_count,
                         'accuracy': {
                             'best_guess': (best_guess/100),
                             'improvement': (modelacc - best_guess)/100,
                              'model_accuracy': (modelacc/100),
                         },
                         'model_capacity': model_cap,
                         'generalization_ratio': int(float(correct_count * 100) / model_cap) / 100.0 * H,
                         'model_efficiency': int(100 * (modelacc - best_guess) / model_cap) / 100.0,
                         'shannon_entropy_of_labels': H,
                         'class_balance': class_balance,
                         'confusion_matrix': mtrx.tolist(),
                         'multiclass_stats': stats}

            print(json.dumps(json_dict))
        else:
            pad = lambda s, length, pad_right: str(s) + ' ' * max(0, length - len(str(s))) if pad_right else ' ' * max(0, length - len(str(s))) + str(s)
            labels = np.array(list(mapping.keys())).reshape(-1, 1)
            max_class_name_len = max([len(clss) for clss in mapping.keys()] + [7])

            max_TP_len = max([len(str(stats[key]['TP'])) for key in stats.keys()] + [2])
            max_FP_len = max([len(str(stats[key]['FP'])) for key in stats.keys()] + [2])
            max_TN_len = max([len(str(stats[key]['TN'])) for key in stats.keys()] + [2])
            max_FN_len = max([len(str(stats[key]['FN'])) for key in stats.keys()] + [2])

            cmat_template_1 = "    {} | {}"
            cmat_template_2 = "    {} | " + " {} " * n_classes
            acc_by_class_template_1 = "    {} | {}  {}  {}  {}  {}  {}  {}  {}  {}  {}"

            acc_by_class_lengths = [max_class_name_len, max_TP_len, max_FP_len, max_TN_len, max_FN_len, 7, 7, 7, 7, 7, 7]
            acc_by_class_header_fields = ['target', 'TP', 'FP', 'TN', 'FN', 'TPR', 'TNR', 'PPV', 'NPV', 'F1', 'TS']
            print("Classifier Type:                    Random Forest")

            print(f"System Type:                        {n_classes}-way classifier\n")

            print("Accuracy:")
            print("    Best-guess accuracy:            {:.2f}%".format(best_guess))
            print("    Model accuracy:                 {:.2f}%".format(modelacc) + " (" + str(int(correct_count)) + "/" + str(count) + " correct)")
            print("    Improvement over best guess:    {:.2f}%".format(modelacc - best_guess) + " (of possible " + str(round(100 - best_guess, 2)) + "%)\n")

            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(correct_count * 100) / model_cap) / 100.0 * H) + " bits/bit")

            if report_cmat:
                max_cmat_entry_len = len(str(int(np.max(mtrx))))
                mtrx = np.concatenate((labels, mtrx.astype('str')), axis=1).astype('str')
                max_pred_len = (mtrx.shape[1] - 1) * max_cmat_entry_len + n_classes * 2 - 1
                print("\nConfusion Matrix:\n")
                print(cmat_template_1.format(pad("Actual", max_class_name_len, False), "Predicted"))
                print(cmat_template_1.format("-" * max_class_name_len, "-" * max(max_pred_len, 9)))
                for row in mtrx:
                    print(cmat_template_2.format(
                        *[pad(field, max_class_name_len if i == 0 else max_cmat_entry_len, False) for i, field in enumerate(row)]))

            print("\nAccuracy by Class:\n")
            print(acc_by_class_template_1.format(
                *[pad(header_field, length, False) for i, (header_field, length) in enumerate(zip(acc_by_class_header_fields, acc_by_class_lengths))]))
            print(acc_by_class_template_1.format(
                *["-" * length for length in acc_by_class_lengths]))

            pct_format_string = "{:8.2%}"      # width = 8, decimals = 2
            for raw_class in mapping.keys():
                class_stats = stats[int(mapping[raw_class])]
                TP, FP, TN, FN = class_stats.get('TP', None), class_stats.get('FP', None), class_stats.get('TN', None), class_stats.get('FN', None)
                TPR = pct_format_string.format(class_stats['TPR']) if class_stats['TPR'] is not None else 'N/A'
                TNR = pct_format_string.format(class_stats['TNR']) if class_stats['TNR'] is not None else 'N/A'
                PPV = pct_format_string.format(class_stats['PPV']) if class_stats['PPV'] is not None else 'N/A'
                NPV = pct_format_string.format(class_stats['NPV']) if class_stats['NPV'] is not None else 'N/A'
                F1 = pct_format_string.format(class_stats['F1']) if class_stats['F1'] is not None else 'N/A'
                TS = pct_format_string.format(class_stats['TS']) if class_stats['TS'] is not None else 'N/A'
                line_fields = [raw_class, TP, FP, TN, FN, TPR, TNR, PPV, NPV, F1, TS]
                print(acc_by_class_template_1.format(
                    *[pad(field, length, False) for i, (field, length) in enumerate(zip(line_fields, acc_by_class_lengths))]))


if __name__ == "__main__":
    try:
        __main()
    except PredictorError as e:
        print(e, file=sys.stderr)
        sys.exit(e.code)
    except Exception as e:
        print(f"An unknown exception of type {type(e).__name__} occurred.", file=sys.stderr)
        sys.exit(-1)
